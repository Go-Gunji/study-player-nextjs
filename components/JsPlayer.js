!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.JsPlayer=t():e.JsPlayer=t()}(window,(function(){return function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=16)}([function(e,t,i){var r;"undefined"!=typeof window&&(r=function(){return function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/dist/",i(i.s="./src/hls.ts")}({"./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";var r=Object.prototype.hasOwnProperty,n="~";function s(){}function a(e,t,i){this.fn=e,this.context=t,this.once=i||!1}function o(e,t,i,r,s){if("function"!=typeof i)throw new TypeError("The listener must be a function");var o=new a(i,r||e,s),l=n?n+t:t;return e._events[l]?e._events[l].fn?e._events[l]=[e._events[l],o]:e._events[l].push(o):(e._events[l]=o,e._eventsCount++),e}function l(e,t){0==--e._eventsCount?e._events=new s:delete e._events[t]}function u(){this._events=new s,this._eventsCount=0}Object.create&&(s.prototype=Object.create(null),(new s).__proto__||(n=!1)),u.prototype.eventNames=function(){var e,t,i=[];if(0===this._eventsCount)return i;for(t in e=this._events)r.call(e,t)&&i.push(n?t.slice(1):t);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(e)):i},u.prototype.listeners=function(e){var t=n?n+e:e,i=this._events[t];if(!i)return[];if(i.fn)return[i.fn];for(var r=0,s=i.length,a=new Array(s);r<s;r++)a[r]=i[r].fn;return a},u.prototype.listenerCount=function(e){var t=n?n+e:e,i=this._events[t];return i?i.fn?1:i.length:0},u.prototype.emit=function(e,t,i,r,s,a){var o=n?n+e:e;if(!this._events[o])return!1;var l,u,d=this._events[o],c=arguments.length;if(d.fn){switch(d.once&&this.removeListener(e,d.fn,void 0,!0),c){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,t),!0;case 3:return d.fn.call(d.context,t,i),!0;case 4:return d.fn.call(d.context,t,i,r),!0;case 5:return d.fn.call(d.context,t,i,r,s),!0;case 6:return d.fn.call(d.context,t,i,r,s,a),!0}for(u=1,l=new Array(c-1);u<c;u++)l[u-1]=arguments[u];d.fn.apply(d.context,l)}else{var h,f=d.length;for(u=0;u<f;u++)switch(d[u].once&&this.removeListener(e,d[u].fn,void 0,!0),c){case 1:d[u].fn.call(d[u].context);break;case 2:d[u].fn.call(d[u].context,t);break;case 3:d[u].fn.call(d[u].context,t,i);break;case 4:d[u].fn.call(d[u].context,t,i,r);break;default:if(!l)for(h=1,l=new Array(c-1);h<c;h++)l[h-1]=arguments[h];d[u].fn.apply(d[u].context,l)}}return!0},u.prototype.on=function(e,t,i){return o(this,e,t,i,!1)},u.prototype.once=function(e,t,i){return o(this,e,t,i,!0)},u.prototype.removeListener=function(e,t,i,r){var s=n?n+e:e;if(!this._events[s])return this;if(!t)return l(this,s),this;var a=this._events[s];if(a.fn)a.fn!==t||r&&!a.once||i&&a.context!==i||l(this,s);else{for(var o=0,u=[],d=a.length;o<d;o++)(a[o].fn!==t||r&&!a[o].once||i&&a[o].context!==i)&&u.push(a[o]);u.length?this._events[s]=1===u.length?u[0]:u:l(this,s)}return this},u.prototype.removeAllListeners=function(e){var t;return e?(t=n?n+e:e,this._events[t]&&l(this,t)):(this._events=new s,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=n,u.EventEmitter=u,e.exports=u},"./node_modules/url-toolkit/src/url-toolkit.js":
/*!*****************************************************!*\
  !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!
  \*****************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){var r,n,s,a,o;r=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#.*)?$/,n=/^([^\/?#]*)(.*)$/,s=/(?:\/|^)\.(?=\/)/g,a=/(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g,o={buildAbsoluteURL:function(e,t,i){if(i=i||{},e=e.trim(),!(t=t.trim())){if(!i.alwaysNormalize)return e;var r=o.parseURL(e);if(!r)throw new Error("Error trying to parse base URL.");return r.path=o.normalizePath(r.path),o.buildURLFromParts(r)}var s=o.parseURL(t);if(!s)throw new Error("Error trying to parse relative URL.");if(s.scheme)return i.alwaysNormalize?(s.path=o.normalizePath(s.path),o.buildURLFromParts(s)):t;var a=o.parseURL(e);if(!a)throw new Error("Error trying to parse base URL.");if(!a.netLoc&&a.path&&"/"!==a.path[0]){var l=n.exec(a.path);a.netLoc=l[1],a.path=l[2]}a.netLoc&&!a.path&&(a.path="/");var u={scheme:a.scheme,netLoc:s.netLoc,path:null,params:s.params,query:s.query,fragment:s.fragment};if(!s.netLoc&&(u.netLoc=a.netLoc,"/"!==s.path[0]))if(s.path){var d=a.path,c=d.substring(0,d.lastIndexOf("/")+1)+s.path;u.path=o.normalizePath(c)}else u.path=a.path,s.params||(u.params=a.params,s.query||(u.query=a.query));return null===u.path&&(u.path=i.alwaysNormalize?o.normalizePath(s.path):s.path),o.buildURLFromParts(u)},parseURL:function(e){var t=r.exec(e);return t?{scheme:t[1]||"",netLoc:t[2]||"",path:t[3]||"",params:t[4]||"",query:t[5]||"",fragment:t[6]||""}:null},normalizePath:function(e){for(e=e.split("").reverse().join("").replace(s,"");e.length!==(e=e.replace(a,"")).length;);return e.split("").reverse().join("")},buildURLFromParts:function(e){return e.scheme+e.netLoc+e.path+e.params+e.query+e.fragment}},e.exports=o},"./node_modules/webworkify-webpack/index.js":
/*!**************************************************!*\
  !*** ./node_modules/webworkify-webpack/index.js ***!
  \**************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){function r(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.i=function(e){return e},i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i.oe=function(e){throw console.error(e),e};var r=i(i.s=ENTRY_MODULE);return r.default||r}function n(e){return(e+"").replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}function s(e,t,r){var s={};s[r]=[];var a=t.toString(),o=a.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);if(!o)return s;for(var l,u=o[1],d=new RegExp("(\\\\n|\\W)"+n(u)+"\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)","g");l=d.exec(a);)"dll-reference"!==l[3]&&s[r].push(l[3]);for(d=new RegExp("\\("+n(u)+'\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',"g");l=d.exec(a);)e[l[2]]||(s[r].push(l[1]),e[l[2]]=i(l[1]).m),s[l[2]]=s[l[2]]||[],s[l[2]].push(l[4]);for(var c,h=Object.keys(s),f=0;f<h.length;f++)for(var p=0;p<s[h[f]].length;p++)c=s[h[f]][p],isNaN(1*c)||(s[h[f]][p]=1*s[h[f]][p]);return s}function a(e){return Object.keys(e).reduce((function(t,i){return t||e[i].length>0}),!1)}e.exports=function(e,t){t=t||{};var n={main:i.m},o=t.all?{main:Object.keys(n.main)}:function(e,t){for(var i={main:[t]},r={main:[]},n={main:{}};a(i);)for(var o=Object.keys(i),l=0;l<o.length;l++){var u=o[l],d=i[u].pop();if(n[u]=n[u]||{},!n[u][d]&&e[u][d]){n[u][d]=!0,r[u]=r[u]||[],r[u].push(d);for(var c=s(e,e[u][d],u),h=Object.keys(c),f=0;f<h.length;f++)i[h[f]]=i[h[f]]||[],i[h[f]]=i[h[f]].concat(c[h[f]])}}return r}(n,e),l="";Object.keys(o).filter((function(e){return"main"!==e})).forEach((function(e){for(var t=0;o[e][t];)t++;o[e].push(t),n[e][t]="(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",l=l+"var "+e+" = ("+r.toString().replace("ENTRY_MODULE",JSON.stringify(t))+")({"+o[e].map((function(t){return JSON.stringify(t)+": "+n[e][t].toString()})).join(",")+"});\n"})),l=l+"new (("+r.toString().replace("ENTRY_MODULE",JSON.stringify(e))+")({"+o.main.map((function(e){return JSON.stringify(e)+": "+n.main[e].toString()})).join(",")+"}))(self);";var u=new window.Blob([l],{type:"text/javascript"});if(t.bare)return u;var d=(window.URL||window.webkitURL||window.mozURL||window.msURL).createObjectURL(u),c=new window.Worker(d);return c.objectURL=d,c}},"./src/crypt/decrypter.js":
/*!********************************************!*\
  !*** ./src/crypt/decrypter.js + 3 modules ***!
  \********************************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.ts */function(e,t,i){"use strict";i.r(t);var r=function(){function e(e,t){this.subtle=e,this.aesIV=t}return e.prototype.decrypt=function(e,t){return this.subtle.decrypt({name:"AES-CBC",iv:this.aesIV},t,e)},e}(),n=function(){function e(e,t){this.subtle=e,this.key=t}return e.prototype.expandKey=function(){return this.subtle.importKey("raw",this.key,{name:"AES-CBC"},!1,["encrypt","decrypt"])},e}(),s=function(){function e(){this.rcon=[0,1,2,4,8,16,32,64,128,27,54],this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.sBox=new Uint32Array(256),this.invSBox=new Uint32Array(256),this.key=new Uint32Array(0),this.initTable()}var t=e.prototype;return t.uint8ArrayToUint32Array_=function(e){for(var t=new DataView(e),i=new Uint32Array(4),r=0;r<4;r++)i[r]=t.getUint32(4*r);return i},t.initTable=function(){var e=this.sBox,t=this.invSBox,i=this.subMix,r=i[0],n=i[1],s=i[2],a=i[3],o=this.invSubMix,l=o[0],u=o[1],d=o[2],c=o[3],h=new Uint32Array(256),f=0,p=0,g=0;for(g=0;g<256;g++)h[g]=g<128?g<<1:g<<1^283;for(g=0;g<256;g++){var m=p^p<<1^p<<2^p<<3^p<<4;m=m>>>8^255&m^99,e[f]=m,t[m]=f;var v=h[f],_=h[v],y=h[_],b=257*h[m]^16843008*m;r[f]=b<<24|b>>>8,n[f]=b<<16|b>>>16,s[f]=b<<8|b>>>24,a[f]=b,b=16843009*y^65537*_^257*v^16843008*f,l[m]=b<<24|b>>>8,u[m]=b<<16|b>>>16,d[m]=b<<8|b>>>24,c[m]=b,f?(f=v^h[h[h[y^v]]],p^=h[h[p]]):f=p=1}},t.expandKey=function(e){for(var t=this.uint8ArrayToUint32Array_(e),i=!0,r=0;r<t.length&&i;)i=t[r]===this.key[r],r++;if(!i){this.key=t;var n=this.keySize=t.length;if(4!==n&&6!==n&&8!==n)throw new Error("Invalid aes key size="+n);var s,a,o,l,u=this.ksRows=4*(n+6+1),d=this.keySchedule=new Uint32Array(u),c=this.invKeySchedule=new Uint32Array(u),h=this.sBox,f=this.rcon,p=this.invSubMix,g=p[0],m=p[1],v=p[2],_=p[3];for(s=0;s<u;s++)s<n?o=d[s]=t[s]:(l=o,s%n==0?(l=h[(l=l<<8|l>>>24)>>>24]<<24|h[l>>>16&255]<<16|h[l>>>8&255]<<8|h[255&l],l^=f[s/n|0]<<24):n>6&&s%n==4&&(l=h[l>>>24]<<24|h[l>>>16&255]<<16|h[l>>>8&255]<<8|h[255&l]),d[s]=o=(d[s-n]^l)>>>0);for(a=0;a<u;a++)s=u-a,l=3&a?d[s]:d[s-4],c[a]=a<4||s<=4?l:g[h[l>>>24]]^m[h[l>>>16&255]]^v[h[l>>>8&255]]^_[h[255&l]],c[a]=c[a]>>>0}},t.networkToHostOrderSwap=function(e){return e<<24|(65280&e)<<8|(16711680&e)>>8|e>>>24},t.decrypt=function(e,t,i,r){for(var n,s,a,o,l,u,d,c,h,f,p,g,m,v,_,y,b,E=this.keySize+6,T=this.invKeySchedule,S=this.invSBox,k=this.invSubMix,w=k[0],R=k[1],L=k[2],A=k[3],C=this.uint8ArrayToUint32Array_(i),D=C[0],x=C[1],I=C[2],O=C[3],P=new Int32Array(e),F=new Int32Array(P.length),M=this.networkToHostOrderSwap;t<P.length;){for(h=M(P[t]),f=M(P[t+1]),p=M(P[t+2]),g=M(P[t+3]),l=h^T[0],u=g^T[1],d=p^T[2],c=f^T[3],m=4,v=1;v<E;v++)n=w[l>>>24]^R[u>>16&255]^L[d>>8&255]^A[255&c]^T[m],s=w[u>>>24]^R[d>>16&255]^L[c>>8&255]^A[255&l]^T[m+1],a=w[d>>>24]^R[c>>16&255]^L[l>>8&255]^A[255&u]^T[m+2],o=w[c>>>24]^R[l>>16&255]^L[u>>8&255]^A[255&d]^T[m+3],l=n,u=s,d=a,c=o,m+=4;n=S[l>>>24]<<24^S[u>>16&255]<<16^S[d>>8&255]<<8^S[255&c]^T[m],s=S[u>>>24]<<24^S[d>>16&255]<<16^S[c>>8&255]<<8^S[255&l]^T[m+1],a=S[d>>>24]<<24^S[c>>16&255]<<16^S[l>>8&255]<<8^S[255&u]^T[m+2],o=S[c>>>24]<<24^S[l>>16&255]<<16^S[u>>8&255]<<8^S[255&d]^T[m+3],m+=3,F[t]=M(n^D),F[t+1]=M(o^x),F[t+2]=M(a^I),F[t+3]=M(s^O),D=h,x=f,I=p,O=g,t+=4}return r?(_=F.buffer,y=_.byteLength,(b=y&&new DataView(_).getUint8(y-1))?_.slice(0,y-b):_):F.buffer},t.destroy=function(){this.key=void 0,this.keySize=void 0,this.ksRows=void 0,this.sBox=void 0,this.invSBox=void 0,this.subMix=void 0,this.invSubMix=void 0,this.keySchedule=void 0,this.invKeySchedule=void 0,this.rcon=void 0},e}(),a=i("./src/errors.ts"),o=i("./src/utils/logger.js"),l=i("./src/events.js"),u=i("./src/utils/get-self-scope.js"),d=Object(u.getSelfScope)(),c=function(){function e(e,t,i){var r=(void 0===i?{}:i).removePKCS7Padding,n=void 0===r||r;if(this.logEnabled=!0,this.observer=e,this.config=t,this.removePKCS7Padding=n,n)try{var s=d.crypto;s&&(this.subtle=s.subtle||s.webkitSubtle)}catch(e){}this.disableWebCrypto=!this.subtle}var t=e.prototype;return t.isSync=function(){return this.disableWebCrypto&&this.config.enableSoftwareAES},t.decrypt=function(e,t,i,a){var l=this;if(this.disableWebCrypto&&this.config.enableSoftwareAES){this.logEnabled&&(o.logger.log("JS AES decrypt"),this.logEnabled=!1);var u=this.decryptor;u||(this.decryptor=u=new s),u.expandKey(t),a(u.decrypt(e,0,i,this.removePKCS7Padding))}else{this.logEnabled&&(o.logger.log("WebCrypto AES decrypt"),this.logEnabled=!1);var d=this.subtle;this.key!==t&&(this.key=t,this.fastAesKey=new n(d,t)),this.fastAesKey.expandKey().then((function(n){new r(d,i).decrypt(e,n).catch((function(r){l.onWebCryptoError(r,e,t,i,a)})).then((function(e){a(e)}))})).catch((function(r){l.onWebCryptoError(r,e,t,i,a)}))}},t.onWebCryptoError=function(e,t,i,r,n){this.config.enableSoftwareAES?(o.logger.log("WebCrypto Error, disable WebCrypto API"),this.disableWebCrypto=!0,this.logEnabled=!0,this.decrypt(t,i,r,n)):(o.logger.error("decrypting error : "+e.message),this.observer.trigger(l.default.ERROR,{type:a.ErrorTypes.MEDIA_ERROR,details:a.ErrorDetails.FRAG_DECRYPT_ERROR,fatal:!0,reason:e.message}))},t.destroy=function(){var e=this.decryptor;e&&(e.destroy(),this.decryptor=void 0)},e}();t.default=c},"./src/demux/demuxer-inline.js":
/*!**************************************************!*\
  !*** ./src/demux/demuxer-inline.js + 12 modules ***!
  \**************************************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.ts */function(e,t,i){"use strict";i.r(t);var r=i("./src/events.js"),n=i("./src/errors.ts"),s=i("./src/crypt/decrypter.js"),a=i("./src/polyfills/number.js"),o=i("./src/utils/logger.js"),l=i("./src/utils/get-self-scope.js");function u(e,t){return 255===e[t]&&240==(246&e[t+1])}function d(e,t){return 1&e[t+1]?7:9}function c(e,t){return(3&e[t+3])<<11|e[t+4]<<3|(224&e[t+5])>>>5}function h(e,t){return!!(t+1<e.length&&u(e,t))}function f(e,t){if(h(e,t)){var i=d(e,t);if(t+i>=e.length)return!1;var r=c(e,t);if(r<=i)return!1;var n=t+r;if(n===e.length||n+1<e.length&&u(e,n))return!0}return!1}function p(e,t,i,s,a){if(!e.samplerate){var l=function(e,t,i,s){var a,l,u,d,c,h=navigator.userAgent.toLowerCase(),f=s,p=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];if(a=1+((192&t[i+2])>>>6),!((l=(60&t[i+2])>>>2)>p.length-1))return d=(1&t[i+2])<<2,d|=(192&t[i+3])>>>6,o.logger.log("manifest codec:"+s+",ADTS data:type:"+a+",sampleingIndex:"+l+"["+p[l]+"Hz],channelConfig:"+d),/firefox/i.test(h)?l>=6?(a=5,c=new Array(4),u=l-3):(a=2,c=new Array(2),u=l):-1!==h.indexOf("android")?(a=2,c=new Array(2),u=l):(a=5,c=new Array(4),s&&(-1!==s.indexOf("mp4a.40.29")||-1!==s.indexOf("mp4a.40.5"))||!s&&l>=6?u=l-3:((s&&-1!==s.indexOf("mp4a.40.2")&&(l>=6&&1===d||/vivaldi/i.test(h))||!s&&1===d)&&(a=2,c=new Array(2)),u=l)),c[0]=a<<3,c[0]|=(14&l)>>1,c[1]|=(1&l)<<7,c[1]|=d<<3,5===a&&(c[1]|=(14&u)>>1,c[2]=(1&u)<<7,c[2]|=8,c[3]=0),{config:c,samplerate:p[l],channelCount:d,codec:"mp4a.40."+a,manifestCodec:f};e.trigger(r.default.ERROR,{type:n.ErrorTypes.MEDIA_ERROR,details:n.ErrorDetails.FRAG_PARSING_ERROR,fatal:!0,reason:"invalid ADTS sampling index:"+l})}(t,i,s,a);e.config=l.config,e.samplerate=l.samplerate,e.channelCount=l.channelCount,e.codec=l.codec,e.manifestCodec=l.manifestCodec,o.logger.log("parsed codec:"+e.codec+",rate:"+l.samplerate+",nb channel:"+l.channelCount)}}function g(e){return 9216e4/e}function m(e,t,i,r,n){var s=function(e,t,i,r,n){var s,a,o=e.length;if(s=d(e,t),a=c(e,t),(a-=s)>0&&t+s+a<=o)return{headerLength:s,frameLength:a,stamp:i+r*n}}(t,i,r,n,g(e.samplerate));if(s){var a=s.stamp,o=s.headerLength,l=s.frameLength,u={unit:t.subarray(i+o,i+o+l),pts:a,dts:a};return e.samples.push(u),{sample:u,length:l+o}}}var v=i("./src/demux/id3.js"),_=function(){function e(e,t,i){this.observer=e,this.config=i,this.remuxer=t}var t=e.prototype;return t.resetInitSegment=function(e,t,i,r){this._audioTrack={container:"audio/adts",type:"audio",id:0,sequenceNumber:0,isAAC:!0,samples:[],len:0,manifestCodec:t,duration:r,inputTimeScale:9e4}},t.resetTimeStamp=function(){},e.probe=function(e){if(!e)return!1;for(var t=(v.default.getID3Data(e,0)||[]).length,i=e.length;t<i;t++)if(f(e,t))return o.logger.log("ADTS sync word found !"),!0;return!1},t.append=function(e,t,i,r){for(var n=this._audioTrack,s=v.default.getID3Data(e,0)||[],l=v.default.getTimeStamp(s),u=Object(a.isFiniteNumber)(l)?90*l:9e4*t,d=0,c=u,f=e.length,g=s.length,_=[{pts:c,dts:c,data:s}];g<f-1;)if(h(e,g)&&g+5<f){p(n,this.observer,e,g,n.manifestCodec);var y=m(n,e,g,u,d);if(!y){o.logger.log("Unable to parse AAC frame");break}g+=y.length,c=y.sample.pts,d++}else v.default.isHeader(e,g)?(s=v.default.getID3Data(e,g),_.push({pts:c,dts:c,data:s}),g+=s.length):g++;this.remuxer.remux(n,{samples:[]},{samples:_,inputTimeScale:9e4},{samples:[]},t,i,r)},t.destroy=function(){},e}(),y=i("./src/demux/mp4demuxer.js"),b={BitratesMap:[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160],SamplingRateMap:[44100,48e3,32e3,22050,24e3,16e3,11025,12e3,8e3],SamplesCoefficients:[[0,72,144,12],[0,0,0,0],[0,72,144,12],[0,144,144,12]],BytesInSlot:[0,1,1,4],appendFrame:function(e,t,i,r,n){if(!(i+24>t.length)){var s=this.parseHeader(t,i);if(s&&i+s.frameLength<=t.length){var a=r+n*(9e4*s.samplesPerFrame/s.sampleRate),o={unit:t.subarray(i,i+s.frameLength),pts:a,dts:a};return e.config=[],e.channelCount=s.channelCount,e.samplerate=s.sampleRate,e.samples.push(o),{sample:o,length:s.frameLength}}}},parseHeader:function(e,t){var i=e[t+1]>>3&3,r=e[t+1]>>1&3,n=e[t+2]>>4&15,s=e[t+2]>>2&3,a=e[t+2]>>1&1;if(1!==i&&0!==n&&15!==n&&3!==s){var o=3===i?3-r:3===r?3:4,l=1e3*b.BitratesMap[14*o+n-1],u=3===i?0:2===i?1:2,d=b.SamplingRateMap[3*u+s],c=e[t+3]>>6==3?1:2,h=b.SamplesCoefficients[i][r],f=b.BytesInSlot[r],p=8*h*f;return{sampleRate:d,channelCount:c,frameLength:parseInt(h*l/d+a,10)*f,samplesPerFrame:p}}},isHeaderPattern:function(e,t){return 255===e[t]&&224==(224&e[t+1])&&0!=(6&e[t+1])},isHeader:function(e,t){return!!(t+1<e.length&&this.isHeaderPattern(e,t))},probe:function(e,t){if(t+1<e.length&&this.isHeaderPattern(e,t)){var i=this.parseHeader(e,t),r=4;i&&i.frameLength&&(r=i.frameLength);var n=t+r;if(n===e.length||n+1<e.length&&this.isHeaderPattern(e,n))return!0}return!1}},E=b,T=function(){function e(e){this.data=e,this.bytesAvailable=e.byteLength,this.word=0,this.bitsAvailable=0}var t=e.prototype;return t.loadWord=function(){var e=this.data,t=this.bytesAvailable,i=e.byteLength-t,r=new Uint8Array(4),n=Math.min(4,t);if(0===n)throw new Error("no bytes available");r.set(e.subarray(i,i+n)),this.word=new DataView(r.buffer).getUint32(0),this.bitsAvailable=8*n,this.bytesAvailable-=n},t.skipBits=function(e){var t;this.bitsAvailable>e?(this.word<<=e,this.bitsAvailable-=e):(e-=this.bitsAvailable,e-=(t=e>>3)>>3,this.bytesAvailable-=t,this.loadWord(),this.word<<=e,this.bitsAvailable-=e)},t.readBits=function(e){var t=Math.min(this.bitsAvailable,e),i=this.word>>>32-t;return e>32&&o.logger.error("Cannot read more than 32 bits at a time"),this.bitsAvailable-=t,this.bitsAvailable>0?this.word<<=t:this.bytesAvailable>0&&this.loadWord(),(t=e-t)>0&&this.bitsAvailable?i<<t|this.readBits(t):i},t.skipLZ=function(){var e;for(e=0;e<this.bitsAvailable;++e)if(0!=(this.word&2147483648>>>e))return this.word<<=e,this.bitsAvailable-=e,e;return this.loadWord(),e+this.skipLZ()},t.skipUEG=function(){this.skipBits(1+this.skipLZ())},t.skipEG=function(){this.skipBits(1+this.skipLZ())},t.readUEG=function(){var e=this.skipLZ();return this.readBits(e+1)-1},t.readEG=function(){var e=this.readUEG();return 1&e?1+e>>>1:-1*(e>>>1)},t.readBoolean=function(){return 1===this.readBits(1)},t.readUByte=function(){return this.readBits(8)},t.readUShort=function(){return this.readBits(16)},t.readUInt=function(){return this.readBits(32)},t.skipScalingList=function(e){var t,i=8,r=8;for(t=0;t<e;t++)0!==r&&(r=(i+this.readEG()+256)%256),i=0===r?i:r},t.readSPS=function(){var e,t,i,r,n,s,a,o=0,l=0,u=0,d=0,c=this.readUByte.bind(this),h=this.readBits.bind(this),f=this.readUEG.bind(this),p=this.readBoolean.bind(this),g=this.skipBits.bind(this),m=this.skipEG.bind(this),v=this.skipUEG.bind(this),_=this.skipScalingList.bind(this);if(c(),e=c(),h(5),g(3),c(),v(),100===e||110===e||122===e||244===e||44===e||83===e||86===e||118===e||128===e){var y=f();if(3===y&&g(1),v(),v(),g(1),p())for(s=3!==y?8:12,a=0;a<s;a++)p()&&_(a<6?16:64)}v();var b=f();if(0===b)f();else if(1===b)for(g(1),m(),m(),t=f(),a=0;a<t;a++)m();v(),g(1),i=f(),r=f(),0===(n=h(1))&&g(1),g(1),p()&&(o=f(),l=f(),u=f(),d=f());var E=[1,1];if(p()&&p())switch(c()){case 1:E=[1,1];break;case 2:E=[12,11];break;case 3:E=[10,11];break;case 4:E=[16,11];break;case 5:E=[40,33];break;case 6:E=[24,11];break;case 7:E=[20,11];break;case 8:E=[32,11];break;case 9:E=[80,33];break;case 10:E=[18,11];break;case 11:E=[15,11];break;case 12:E=[64,33];break;case 13:E=[160,99];break;case 14:E=[4,3];break;case 15:E=[3,2];break;case 16:E=[2,1];break;case 255:E=[c()<<8|c(),c()<<8|c()]}return{width:Math.ceil(16*(i+1)-2*o-2*l),height:(2-n)*(r+1)*16-(n?2:4)*(u+d),pixelRatio:E}},t.readSliceType=function(){return this.readUByte(),this.readUEG(),this.readUEG()},e}(),S=function(){function e(e,t,i,r){this.decryptdata=i,this.discardEPB=r,this.decrypter=new s.default(e,t,{removePKCS7Padding:!1})}var t=e.prototype;return t.decryptBuffer=function(e,t){this.decrypter.decrypt(e,this.decryptdata.key.buffer,this.decryptdata.iv.buffer,t)},t.decryptAacSample=function(e,t,i,r){var n=e[t].unit,s=n.subarray(16,n.length-n.length%16),a=s.buffer.slice(s.byteOffset,s.byteOffset+s.length),o=this;this.decryptBuffer(a,(function(s){s=new Uint8Array(s),n.set(s,16),r||o.decryptAacSamples(e,t+1,i)}))},t.decryptAacSamples=function(e,t,i){for(;;t++){if(t>=e.length)return void i();if(!(e[t].unit.length<32)){var r=this.decrypter.isSync();if(this.decryptAacSample(e,t,i,r),!r)return}}},t.getAvcEncryptedData=function(e){for(var t=16*Math.floor((e.length-48)/160)+16,i=new Int8Array(t),r=0,n=32;n<=e.length-16;n+=160,r+=16)i.set(e.subarray(n,n+16),r);return i},t.getAvcDecryptedUnit=function(e,t){t=new Uint8Array(t);for(var i=0,r=32;r<=e.length-16;r+=160,i+=16)e.set(t.subarray(i,i+16),r);return e},t.decryptAvcSample=function(e,t,i,r,n,s){var a=this.discardEPB(n.data),o=this.getAvcEncryptedData(a),l=this;this.decryptBuffer(o.buffer,(function(o){n.data=l.getAvcDecryptedUnit(a,o),s||l.decryptAvcSamples(e,t,i+1,r)}))},t.decryptAvcSamples=function(e,t,i,r){for(;;t++,i=0){if(t>=e.length)return void r();for(var n=e[t].units;!(i>=n.length);i++){var s=n[i];if(!(s.length<=48||1!==s.type&&5!==s.type)){var a=this.decrypter.isSync();if(this.decryptAvcSample(e,t,i,r,s,a),!a)return}}}},e}(),k={video:1,audio:2,id3:3,text:4},w=function(){function e(e,t,i,r){this.observer=e,this.config=i,this.typeSupported=r,this.remuxer=t,this.sampleAes=null,this.pmtUnknownTypes={}}var t=e.prototype;return t.setDecryptData=function(e){null!=e&&null!=e.key&&"SAMPLE-AES"===e.method?this.sampleAes=new S(this.observer,this.config,e,this.discardEPB):this.sampleAes=null},e.probe=function(t){var i=e._syncOffset(t);return!(i<0||(i&&o.logger.warn("MPEG2-TS detected but first sync word found @ offset "+i+", junk ahead ?"),0))},e._syncOffset=function(e){for(var t=Math.min(1e3,e.length-564),i=0;i<t;){if(71===e[i]&&71===e[i+188]&&71===e[i+376])return i;i++}return-1},e.createTrack=function(e,t){return{container:"video"===e||"audio"===e?"video/mp2t":void 0,type:e,id:k[e],pid:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],dropped:"video"===e?0:void 0,isAAC:"audio"===e||void 0,duration:"audio"===e?t:void 0}},t.resetInitSegment=function(t,i,r,n){this.pmtParsed=!1,this._pmtId=-1,this.pmtUnknownTypes={},this._avcTrack=e.createTrack("video",n),this._audioTrack=e.createTrack("audio",n),this._id3Track=e.createTrack("id3",n),this._txtTrack=e.createTrack("text",n),this.aacOverFlow=null,this.aacLastPTS=null,this.avcSample=null,this.audioCodec=i,this.videoCodec=r,this._duration=n},t.resetTimeStamp=function(){},t.append=function(t,i,s,a){var l,u,d,c,h,f=t.length,p=!1;this.pmtUnknownTypes={},this.contiguous=s;var g=this.pmtParsed,m=this._avcTrack,v=this._audioTrack,_=this._id3Track,y=m.pid,b=v.pid,E=_.pid,T=this._pmtId,S=m.pesData,k=v.pesData,w=_.pesData,R=this._parsePAT,L=this._parsePMT.bind(this),A=this._parsePES,C=this._parseAVCPES.bind(this),D=this._parseAACPES.bind(this),x=this._parseMPEGPES.bind(this),I=this._parseID3PES.bind(this),O=e._syncOffset(t);for(f-=(f+O)%188,l=O;l<f;l+=188)if(71===t[l]){if(u=!!(64&t[l+1]),d=((31&t[l+1])<<8)+t[l+2],(48&t[l+3])>>4>1){if((c=l+5+t[l+4])===l+188)continue}else c=l+4;switch(d){case y:u&&(S&&(h=A(S))&&C(h,!1),S={data:[],size:0}),S&&(S.data.push(t.subarray(c,l+188)),S.size+=l+188-c);break;case b:u&&(k&&(h=A(k))&&(v.isAAC?D(h):x(h)),k={data:[],size:0}),k&&(k.data.push(t.subarray(c,l+188)),k.size+=l+188-c);break;case E:u&&(w&&(h=A(w))&&I(h),w={data:[],size:0}),w&&(w.data.push(t.subarray(c,l+188)),w.size+=l+188-c);break;case 0:u&&(c+=t[c]+1),T=this._pmtId=R(t,c);break;case T:u&&(c+=t[c]+1);var P=L(t,c,!0===this.typeSupported.mpeg||!0===this.typeSupported.mp3,null!=this.sampleAes);(y=P.avc)>0&&(m.pid=y),(b=P.audio)>0&&(v.pid=b,v.isAAC=P.isAAC),(E=P.id3)>0&&(_.pid=E),p&&!g&&(o.logger.log("reparse from beginning"),p=!1,l=O-188),g=this.pmtParsed=!0;break;case 17:case 8191:break;default:p=!0}}else this.observer.trigger(r.default.ERROR,{type:n.ErrorTypes.MEDIA_ERROR,details:n.ErrorDetails.FRAG_PARSING_ERROR,fatal:!1,reason:"TS packet did not start with 0x47"});S&&(h=A(S))?(C(h,!0),m.pesData=null):m.pesData=S,k&&(h=A(k))?(v.isAAC?D(h):x(h),v.pesData=null):(k&&k.size&&o.logger.log("last AAC PES packet truncated,might overlap between fragments"),v.pesData=k),w&&(h=A(w))?(I(h),_.pesData=null):_.pesData=w,null==this.sampleAes?this.remuxer.remux(v,m,_,this._txtTrack,i,s,a):this.decryptAndRemux(v,m,_,this._txtTrack,i,s,a)},t.decryptAndRemux=function(e,t,i,r,n,s,a){if(e.samples&&e.isAAC){var o=this;this.sampleAes.decryptAacSamples(e.samples,0,(function(){o.decryptAndRemuxAvc(e,t,i,r,n,s,a)}))}else this.decryptAndRemuxAvc(e,t,i,r,n,s,a)},t.decryptAndRemuxAvc=function(e,t,i,r,n,s,a){if(t.samples){var o=this;this.sampleAes.decryptAvcSamples(t.samples,0,0,(function(){o.remuxer.remux(e,t,i,r,n,s,a)}))}else this.remuxer.remux(e,t,i,r,n,s,a)},t.destroy=function(){this._initPTS=this._initDTS=void 0,this._duration=0},t._parsePAT=function(e,t){return(31&e[t+10])<<8|e[t+11]},t._trackUnknownPmt=function(e,t,i){var r=this.pmtUnknownTypes[e]||0;return 0===r&&(this.pmtUnknownTypes[e]=0,t.call(o.logger,i)),this.pmtUnknownTypes[e]++,r},t._parsePMT=function(e,t,i,r){var n,s,a={audio:-1,avc:-1,id3:-1,isAAC:!0};for(n=t+3+((15&e[t+1])<<8|e[t+2])-4,t+=12+((15&e[t+10])<<8|e[t+11]);t<n;){switch(s=(31&e[t+1])<<8|e[t+2],e[t]){case 207:if(!r){this._trackUnknownPmt(e[t],o.logger.warn,"ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream");break}case 15:-1===a.audio&&(a.audio=s);break;case 21:-1===a.id3&&(a.id3=s);break;case 219:if(!r){this._trackUnknownPmt(e[t],o.logger.warn,"H.264 with AES-128-CBC slice encryption found in unencrypted stream");break}case 27:-1===a.avc&&(a.avc=s);break;case 3:case 4:i?-1===a.audio&&(a.audio=s,a.isAAC=!1):this._trackUnknownPmt(e[t],o.logger.warn,"MPEG audio found, not supported in this browser");break;case 36:this._trackUnknownPmt(e[t],o.logger.warn,"Unsupported HEVC stream type found");break;default:this._trackUnknownPmt(e[t],o.logger.log,"Unknown stream type:"+e[t])}t+=5+((15&e[t+3])<<8|e[t+4])}return a},t._parsePES=function(e){var t,i,r,n,s,a,l,u,d=0,c=e.data;if(!e||0===e.size)return null;for(;c[0].length<19&&c.length>1;){var h=new Uint8Array(c[0].length+c[1].length);h.set(c[0]),h.set(c[1],c[0].length),c[0]=h,c.splice(1,1)}if(1===((t=c[0])[0]<<16)+(t[1]<<8)+t[2]){if((r=(t[4]<<8)+t[5])&&r>e.size-6)return null;if(192&(i=t[7])&&(a=536870912*(14&t[9])+4194304*(255&t[10])+16384*(254&t[11])+128*(255&t[12])+(254&t[13])/2,64&i?a-(l=536870912*(14&t[14])+4194304*(255&t[15])+16384*(254&t[16])+128*(255&t[17])+(254&t[18])/2)>54e5&&(o.logger.warn(Math.round((a-l)/9e4)+"s delta between PTS and DTS, align them"),a=l):l=a),u=(n=t[8])+9,e.size<=u)return null;e.size-=u,s=new Uint8Array(e.size);for(var f=0,p=c.length;f<p;f++){var g=(t=c[f]).byteLength;if(u){if(u>g){u-=g;continue}t=t.subarray(u),g-=u,u=0}s.set(t,d),d+=g}return r&&(r-=n+3),{data:s,pts:a,dts:l,len:r}}return null},t.pushAccesUnit=function(e,t){if(e.units.length&&e.frame){var i=t.samples,r=i.length;if(isNaN(e.pts)){if(!r)return void t.dropped++;var n=i[r-1];e.pts=n.pts,e.dts=n.dts}!this.config.forceKeyFrameOnDiscontinuity||!0===e.key||t.sps&&(r||this.contiguous)?(e.id=r,i.push(e)):t.dropped++}e.debug.length&&o.logger.log(e.pts+"/"+e.dts+":"+e.debug)},t._parseAVCPES=function(e,t){var i,r,n,s=this,a=this._avcTrack,o=this._parseAVCNALu(e.data),l=this.avcSample,u=!1,d=this.pushAccesUnit.bind(this),c=function(e,t,i,r){return{key:e,pts:t,dts:i,units:[],debug:r}};e.data=null,l&&o.length&&!a.audFound&&(d(l,a),l=this.avcSample=c(!1,e.pts,e.dts,"")),o.forEach((function(t){switch(t.type){case 1:r=!0,l||(l=s.avcSample=c(!0,e.pts,e.dts,"")),l.frame=!0;var o=t.data;if(u&&o.length>4){var h=new T(o).readSliceType();2!==h&&4!==h&&7!==h&&9!==h||(l.key=!0)}break;case 5:r=!0,l||(l=s.avcSample=c(!0,e.pts,e.dts,"")),l.key=!0,l.frame=!0;break;case 6:r=!0,(i=new T(s.discardEPB(t.data))).readUByte();for(var f=0,p=0,g=!1,m=0;!g&&i.bytesAvailable>1;){f=0;do{f+=m=i.readUByte()}while(255===m);p=0;do{p+=m=i.readUByte()}while(255===m);if(4===f&&0!==i.bytesAvailable){if(g=!0,181===i.readUByte()&&49===i.readUShort()&&1195456820===i.readUInt()&&3===i.readUByte()){var _=i.readUByte(),y=31&_,b=[_,i.readUByte()];for(n=0;n<y;n++)b.push(i.readUByte()),b.push(i.readUByte()),b.push(i.readUByte());s._insertSampleInOrder(s._txtTrack.samples,{type:3,pts:e.pts,bytes:b})}}else if(5===f&&0!==i.bytesAvailable){if(g=!0,p>16){var E=[];for(n=0;n<16;n++)E.push(i.readUByte().toString(16)),3!==n&&5!==n&&7!==n&&9!==n||E.push("-");var S=p-16,k=new Uint8Array(S);for(n=0;n<S;n++)k[n]=i.readUByte();s._insertSampleInOrder(s._txtTrack.samples,{pts:e.pts,payloadType:f,uuid:E.join(""),userDataBytes:k,userData:Object(v.utf8ArrayToStr)(k.buffer)})}}else if(p<i.bytesAvailable)for(n=0;n<p;n++)i.readUByte()}break;case 7:if(r=!0,u=!0,!a.sps){var w=(i=new T(t.data)).readSPS();a.width=w.width,a.height=w.height,a.pixelRatio=w.pixelRatio,a.sps=[t.data],a.duration=s._duration;var R=t.data.subarray(1,4),L="avc1.";for(n=0;n<3;n++){var A=R[n].toString(16);A.length<2&&(A="0"+A),L+=A}a.codec=L}break;case 8:r=!0,a.pps||(a.pps=[t.data]);break;case 9:r=!1,a.audFound=!0,l&&d(l,a),l=s.avcSample=c(!1,e.pts,e.dts,"");break;case 12:r=!1;break;default:r=!1,l&&(l.debug+="unknown NAL "+t.type+" ")}l&&r&&l.units.push(t)})),t&&l&&(d(l,a),this.avcSample=null)},t._insertSampleInOrder=function(e,t){var i=e.length;if(i>0){if(t.pts>=e[i-1].pts)e.push(t);else for(var r=i-1;r>=0;r--)if(t.pts<e[r].pts){e.splice(r,0,t);break}}else e.push(t)},t._getLastNalUnit=function(){var e,t=this.avcSample;if(!t||0===t.units.length){var i=this._avcTrack.samples;t=i[i.length-1]}if(t){var r=t.units;e=r[r.length-1]}return e},t._parseAVCNALu=function(e){var t,i,r,n,s=0,a=e.byteLength,o=this._avcTrack,l=o.naluState||0,u=l,d=[],c=-1;for(-1===l&&(c=0,n=31&e[0],l=0,s=1);s<a;)if(t=e[s++],l)if(1!==l)if(t)if(1===t){if(c>=0)r={data:e.subarray(c,s-l-1),type:n},d.push(r);else{var h=this._getLastNalUnit();if(h&&(u&&s<=4-u&&h.state&&(h.data=h.data.subarray(0,h.data.byteLength-u)),(i=s-l-1)>0)){var f=new Uint8Array(h.data.byteLength+i);f.set(h.data,0),f.set(e.subarray(0,i),h.data.byteLength),h.data=f}}s<a?(c=s,n=31&e[s],l=0):l=-1}else l=0;else l=3;else l=t?0:2;else l=t?0:1;if(c>=0&&l>=0&&(r={data:e.subarray(c,a),type:n,state:l},d.push(r)),0===d.length){var p=this._getLastNalUnit();if(p){var g=new Uint8Array(p.data.byteLength+e.byteLength);g.set(p.data,0),g.set(e,p.data.byteLength),p.data=g}}return o.naluState=l,d},t.discardEPB=function(e){for(var t,i,r=e.byteLength,n=[],s=1;s<r-2;)0===e[s]&&0===e[s+1]&&3===e[s+2]?(n.push(s+2),s+=2):s++;if(0===n.length)return e;t=r-n.length,i=new Uint8Array(t);var a=0;for(s=0;s<t;a++,s++)a===n[0]&&(a++,n.shift()),i[s]=e[a];return i},t._parseAACPES=function(e){var t,i,s,a,l,u,d,c=this._audioTrack,f=e.data,v=e.pts,_=this.aacOverFlow,y=this.aacLastPTS;if(_){var b=new Uint8Array(_.byteLength+f.byteLength);b.set(_,0),b.set(f,_.byteLength),f=b}for(s=0,l=f.length;s<l-1&&!h(f,s);s++);if(!s||(s<l-1?(u="AAC PES did not start with ADTS header,offset:"+s,d=!1):(u="no ADTS header found in AAC PES",d=!0),o.logger.warn("parsing error:"+u),this.observer.trigger(r.default.ERROR,{type:n.ErrorTypes.MEDIA_ERROR,details:n.ErrorDetails.FRAG_PARSING_ERROR,fatal:d,reason:u}),!d)){if(p(c,this.observer,f,s,this.audioCodec),i=0,t=g(c.samplerate),_&&y){var E=y+t;Math.abs(E-v)>1&&(o.logger.log("AAC: align PTS for overlapping frames by "+Math.round((E-v)/90)),v=E)}for(;s<l;){if(h(f,s)){if(s+5<l){var T=m(c,f,s,v,i);if(T){s+=T.length,a=T.sample.pts,i++;continue}}break}s++}_=s<l?f.subarray(s,l):null,this.aacOverFlow=_,this.aacLastPTS=a}},t._parseMPEGPES=function(e){for(var t=e.data,i=t.length,r=0,n=0,s=e.pts;n<i;)if(E.isHeader(t,n)){var a=E.appendFrame(this._audioTrack,t,n,s,r);if(!a)break;n+=a.length,r++}else n++},t._parseID3PES=function(e){this._id3Track.samples.push(e)},e}(),R=function(){function e(e,t,i){this.observer=e,this.config=i,this.remuxer=t}var t=e.prototype;return t.resetInitSegment=function(e,t,i,r){this._audioTrack={container:"audio/mpeg",type:"audio",id:-1,sequenceNumber:0,isAAC:!1,samples:[],len:0,manifestCodec:t,duration:r,inputTimeScale:9e4}},t.resetTimeStamp=function(){},e.probe=function(e){var t,i,r=v.default.getID3Data(e,0);if(r&&void 0!==v.default.getTimeStamp(r))for(t=r.length,i=Math.min(e.length-1,t+100);t<i;t++)if(E.probe(e,t))return o.logger.log("MPEG Audio sync word found !"),!0;return!1},t.append=function(e,t,i,r){for(var n=v.default.getID3Data(e,0)||[],s=v.default.getTimeStamp(n),a=void 0!==s?90*s:9e4*t,o=n.length,l=e.length,u=0,d=0,c=this._audioTrack,h=[{pts:a,dts:a,data:n}];o<l;)if(E.isHeader(e,o)){var f=E.appendFrame(c,e,o,a,u);if(!f)break;o+=f.length,d=f.sample.pts,u++}else v.default.isHeader(e,o)?(n=v.default.getID3Data(e,o),h.push({pts:d,dts:d,data:n}),o+=n.length):o++;this.remuxer.remux(c,{samples:[]},{samples:h,inputTimeScale:9e4},{samples:[]},t,i,r)},t.destroy=function(){},e}(),L=function(){function e(){}return e.getSilentFrame=function(e,t){switch(e){case"mp4a.40.2":if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]);break;default:if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null},e}(),A=Math.pow(2,32)-1,C=function(){function e(){}return e.init=function(){var t;for(t in e.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]},e.types)e.types.hasOwnProperty(t)&&(e.types[t]=[t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2),t.charCodeAt(3)]);var i=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),r=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]);e.HDLR_TYPES={video:i,audio:r};var n=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),s=new Uint8Array([0,0,0,0,0,0,0,0]);e.STTS=e.STSC=e.STCO=s,e.STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),e.VMHD=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),e.SMHD=new Uint8Array([0,0,0,0,0,0,0,0]),e.STSD=new Uint8Array([0,0,0,0,0,0,0,1]);var a=new Uint8Array([105,115,111,109]),o=new Uint8Array([97,118,99,49]),l=new Uint8Array([0,0,0,1]);e.FTYP=e.box(e.types.ftyp,a,l,a,o),e.DINF=e.box(e.types.dinf,e.box(e.types.dref,n))},e.box=function(e){for(var t,i=Array.prototype.slice.call(arguments,1),r=8,n=i.length,s=n;n--;)r+=i[n].byteLength;for((t=new Uint8Array(r))[0]=r>>24&255,t[1]=r>>16&255,t[2]=r>>8&255,t[3]=255&r,t.set(e,4),n=0,r=8;n<s;n++)t.set(i[n],r),r+=i[n].byteLength;return t},e.hdlr=function(t){return e.box(e.types.hdlr,e.HDLR_TYPES[t])},e.mdat=function(t){return e.box(e.types.mdat,t)},e.mdhd=function(t,i){i*=t;var r=Math.floor(i/(A+1)),n=Math.floor(i%(A+1));return e.box(e.types.mdhd,new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,255&t,r>>24,r>>16&255,r>>8&255,255&r,n>>24,n>>16&255,n>>8&255,255&n,85,196,0,0]))},e.mdia=function(t){return e.box(e.types.mdia,e.mdhd(t.timescale,t.duration),e.hdlr(t.type),e.minf(t))},e.mfhd=function(t){return e.box(e.types.mfhd,new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t]))},e.minf=function(t){return"audio"===t.type?e.box(e.types.minf,e.box(e.types.smhd,e.SMHD),e.DINF,e.stbl(t)):e.box(e.types.minf,e.box(e.types.vmhd,e.VMHD),e.DINF,e.stbl(t))},e.moof=function(t,i,r){return e.box(e.types.moof,e.mfhd(t),e.traf(r,i))},e.moov=function(t){for(var i=t.length,r=[];i--;)r[i]=e.trak(t[i]);return e.box.apply(null,[e.types.moov,e.mvhd(t[0].timescale,t[0].duration)].concat(r).concat(e.mvex(t)))},e.mvex=function(t){for(var i=t.length,r=[];i--;)r[i]=e.trex(t[i]);return e.box.apply(null,[e.types.mvex].concat(r))},e.mvhd=function(t,i){i*=t;var r=Math.floor(i/(A+1)),n=Math.floor(i%(A+1)),s=new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,255&t,r>>24,r>>16&255,r>>8&255,255&r,n>>24,n>>16&255,n>>8&255,255&n,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return e.box(e.types.mvhd,s)},e.sdtp=function(t){var i,r,n=t.samples||[],s=new Uint8Array(4+n.length);for(r=0;r<n.length;r++)i=n[r].flags,s[r+4]=i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;return e.box(e.types.sdtp,s)},e.stbl=function(t){return e.box(e.types.stbl,e.stsd(t),e.box(e.types.stts,e.STTS),e.box(e.types.stsc,e.STSC),e.box(e.types.stsz,e.STSZ),e.box(e.types.stco,e.STCO))},e.avc1=function(t){var i,r,n,s=[],a=[];for(i=0;i<t.sps.length;i++)n=(r=t.sps[i]).byteLength,s.push(n>>>8&255),s.push(255&n),s=s.concat(Array.prototype.slice.call(r));for(i=0;i<t.pps.length;i++)n=(r=t.pps[i]).byteLength,a.push(n>>>8&255),a.push(255&n),a=a.concat(Array.prototype.slice.call(r));var o=e.box(e.types.avcC,new Uint8Array([1,s[3],s[4],s[5],255,224|t.sps.length].concat(s).concat([t.pps.length]).concat(a))),l=t.width,u=t.height,d=t.pixelRatio[0],c=t.pixelRatio[1];return e.box(e.types.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,l>>8&255,255&l,u>>8&255,255&u,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),o,e.box(e.types.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192])),e.box(e.types.pasp,new Uint8Array([d>>24,d>>16&255,d>>8&255,255&d,c>>24,c>>16&255,c>>8&255,255&c])))},e.esds=function(e){var t=e.config.length;return new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e.config).concat([6,1,2]))},e.mp4a=function(t){var i=t.samplerate;return e.box(e.types.mp4a,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,i>>8&255,255&i,0,0]),e.box(e.types.esds,e.esds(t)))},e.mp3=function(t){var i=t.samplerate;return e.box(e.types[".mp3"],new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,i>>8&255,255&i,0,0]))},e.stsd=function(t){return"audio"===t.type?t.isAAC||"mp3"!==t.codec?e.box(e.types.stsd,e.STSD,e.mp4a(t)):e.box(e.types.stsd,e.STSD,e.mp3(t)):e.box(e.types.stsd,e.STSD,e.avc1(t))},e.tkhd=function(t){var i=t.id,r=t.duration*t.timescale,n=t.width,s=t.height,a=Math.floor(r/(A+1)),o=Math.floor(r%(A+1));return e.box(e.types.tkhd,new Uint8Array([1,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,i>>24&255,i>>16&255,i>>8&255,255&i,0,0,0,0,a>>24,a>>16&255,a>>8&255,255&a,o>>24,o>>16&255,o>>8&255,255&o,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,n>>8&255,255&n,0,0,s>>8&255,255&s,0,0]))},e.traf=function(t,i){var r=e.sdtp(t),n=t.id,s=Math.floor(i/(A+1)),a=Math.floor(i%(A+1));return e.box(e.types.traf,e.box(e.types.tfhd,new Uint8Array([0,0,0,0,n>>24,n>>16&255,n>>8&255,255&n])),e.box(e.types.tfdt,new Uint8Array([1,0,0,0,s>>24,s>>16&255,s>>8&255,255&s,a>>24,a>>16&255,a>>8&255,255&a])),e.trun(t,r.length+16+20+8+16+8+8),r)},e.trak=function(t){return t.duration=t.duration||4294967295,e.box(e.types.trak,e.tkhd(t),e.mdia(t))},e.trex=function(t){var i=t.id;return e.box(e.types.trex,new Uint8Array([0,0,0,0,i>>24,i>>16&255,i>>8&255,255&i,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]))},e.trun=function(t,i){var r,n,s,a,o,l,u=t.samples||[],d=u.length,c=12+16*d,h=new Uint8Array(c);for(i+=8+c,h.set([0,0,15,1,d>>>24&255,d>>>16&255,d>>>8&255,255&d,i>>>24&255,i>>>16&255,i>>>8&255,255&i],0),r=0;r<d;r++)s=(n=u[r]).duration,a=n.size,o=n.flags,l=n.cts,h.set([s>>>24&255,s>>>16&255,s>>>8&255,255&s,a>>>24&255,a>>>16&255,a>>>8&255,255&a,o.isLeading<<2|o.dependsOn,o.isDependedOn<<6|o.hasRedundancy<<4|o.paddingValue<<1|o.isNonSync,61440&o.degradPrio,15&o.degradPrio,l>>>24&255,l>>>16&255,l>>>8&255,255&l],12+16*r);return e.box(e.types.trun,h)},e.initSegment=function(t){e.types||e.init();var i,r=e.moov(t);return(i=new Uint8Array(e.FTYP.byteLength+r.byteLength)).set(e.FTYP),i.set(r,e.FTYP.byteLength),i},e}();function D(e,t,i,r){void 0===i&&(i=1),void 0===r&&(r=!1);var n=e*t*i;return r?Math.round(n):n}function x(e,t){return void 0===t&&(t=!1),D(e,1e3,1/9e4,t)}function I(e,t){return void 0===t&&(t=1),D(e,9e4,1/t)}var O=I(10),P=I(.2),F=null;function M(e,t){var i;if(void 0===t)return e;for(i=t<e?-8589934592:8589934592;Math.abs(e-t)>4294967296;)e+=i;return e}var B,N=function(){function e(e,t,i,r){if(this.observer=e,this.config=t,this.typeSupported=i,this.ISGenerated=!1,null===F){var n=navigator.userAgent.match(/Chrome\/(\d+)/i);F=n?parseInt(n[1]):0}}var t=e.prototype;return t.destroy=function(){},t.resetTimeStamp=function(e){this._initPTS=this._initDTS=e},t.resetInitSegment=function(){this.ISGenerated=!1},t.getVideoStartPts=function(e){var t=!1,i=e.reduce((function(e,i){var r=i.pts-e;return r<-4294967296?(t=!0,e):r>0?e:i.pts}),e[0].pts);return t&&o.logger.debug("PTS rollover detected"),i},t.remux=function(e,t,i,n,s,a,l){if(this.ISGenerated||this.generateIS(e,t,s),this.ISGenerated){var u=e.samples.length,d=t.samples.length,c=s,h=s;if(u&&d){var f=this.getVideoStartPts(t.samples),p=(e.samples[0].pts-f)/t.inputTimeScale;c+=Math.max(0,p),h+=Math.max(0,-p)}if(u){e.timescale||(o.logger.warn("regenerate InitSegment as audio detected"),this.generateIS(e,t,s));var g,m=this.remuxAudio(e,c,a,l);d&&(m&&(g=m.endPTS-m.startPTS),t.timescale||(o.logger.warn("regenerate InitSegment as video detected"),this.generateIS(e,t,s)),this.remuxVideo(t,h,a,g))}else if(d){var v=this.remuxVideo(t,h,a,0,l);v&&e.codec&&this.remuxEmptyAudio(e,c,a,v)}}i.samples.length&&this.remuxID3(i,s),n.samples.length&&this.remuxText(n,s),this.observer.trigger(r.default.FRAG_PARSED)},t.generateIS=function(e,t,i){var s,a,l=this.observer,u=e.samples,d=t.samples,c=this.typeSupported,h="audio/mp4",f={},p={tracks:f},g=void 0===this._initPTS;if(g&&(s=a=1/0),e.config&&u.length&&(e.timescale=e.samplerate,o.logger.log("audio sampling rate : "+e.samplerate),e.isAAC||(c.mpeg?(h="audio/mpeg",e.codec=""):c.mp3&&(e.codec="mp3")),f.audio={container:h,codec:e.codec,initSegment:!e.isAAC&&c.mpeg?new Uint8Array:C.initSegment([e]),metadata:{channelCount:e.channelCount}},g&&(s=a=u[0].pts-Math.round(e.inputTimeScale*i))),t.sps&&t.pps&&d.length){var m=t.inputTimeScale;if(t.timescale=m,f.video={container:"video/mp4",codec:t.codec,initSegment:C.initSegment([t]),metadata:{width:t.width,height:t.height}},g){var v=this.getVideoStartPts(d),_=Math.round(m*i);a=Math.min(a,d[0].dts-_),s=Math.min(s,v-_),this.observer.trigger(r.default.INIT_PTS_FOUND,{initPTS:s})}}else g&&f.audio&&this.observer.trigger(r.default.INIT_PTS_FOUND,{initPTS:s});Object.keys(f).length?(l.trigger(r.default.FRAG_PARSING_INIT_SEGMENT,p),this.ISGenerated=!0,g&&(this._initPTS=s,this._initDTS=a)):l.trigger(r.default.ERROR,{type:n.ErrorTypes.MEDIA_ERROR,details:n.ErrorDetails.FRAG_PARSING_ERROR,fatal:!1,reason:"no audio/video samples found"})},t.remuxVideo=function(e,t,i,s){var a,l,u,d,c,h=e.timescale,f=e.samples,p=[],g=f.length,m=this._initPTS,v=8,_=Number.POSITIVE_INFINITY,y=Number.NEGATIVE_INFINITY,b=0,E=!1,T=this.nextAvcDts;if(0!==g){i||(T=t*h-(f[0].pts-M(f[0].dts,f[0].pts)));for(var S=0;S<g;S++){var k=f[S];k.pts=M(k.pts-m,T),k.dts=M(k.dts-m,T),k.dts>k.pts&&(b=Math.max(Math.min(b,k.pts-k.dts),-1*P)),k.dts<f[S>0?S-1:S].dts&&(E=!0)}E&&f.sort((function(e,t){var i=e.dts-t.dts,r=e.pts-t.pts;return i||r||e.id-t.id})),d=f[0].dts,c=f[g-1].dts;var w=Math.round((c-d)/(g-1));if(b<0){if(b<-2*w){o.logger.warn("PTS < DTS detected in video samples, offsetting DTS to PTS "+x(-w,!0)+" ms");for(var R=0;R<g;R++)f[R].dts=f[R].pts-w}else{o.logger.warn("PTS < DTS detected in video samples, shifting DTS by "+x(b,!0)+" ms to overcome this issue");for(var L=0;L<g;L++)f[L].dts=f[L].dts+b}d=f[0].dts,c=f[g-1].dts}if(i){var A=d-T,D=A>w;if(D||A<-1){D?o.logger.warn("AVC: "+x(A,!0)+" ms ("+A+"dts) hole between fragments detected, filling it"):o.logger.warn("AVC: "+x(-A,!0)+" ms ("+A+"dts) overlapping between fragments detected"),d=T;var I=f[0].pts-A;f[0].dts=d,f[0].pts=I,o.logger.log("Video: First PTS/DTS adjusted: "+x(I,!0)+"/"+x(d,!0)+", delta: "+x(A,!0)+" ms")}}F&&F<75&&(d=Math.max(0,d));for(var O=0,B=0,N=0;N<g;N++){for(var j=f[N],U=j.units,G=U.length,H=0,W=0;W<G;W++)H+=U[W].data.length;B+=H,O+=G,j.length=H,j.dts=Math.max(j.dts,d),j.pts=Math.max(j.pts,j.dts,0),_=Math.min(j.pts,_),y=Math.max(j.pts,y)}c=f[g-1].dts;var K=B+4*O+8;try{l=new Uint8Array(K)}catch(e){return void this.observer.trigger(r.default.ERROR,{type:n.ErrorTypes.MUX_ERROR,details:n.ErrorDetails.REMUX_ALLOC_ERROR,fatal:!1,bytes:K,reason:"fail allocating video mdat "+K})}var V=new DataView(l.buffer);V.setUint32(0,K),l.set(C.types.mdat,4);for(var q=0;q<g;q++){for(var Y,z=f[q],X=z.units,Q=0,Z=0,$=X.length;Z<$;Z++){var J=X[Z],ee=J.data,te=J.data.byteLength;V.setUint32(v,te),v+=4,l.set(ee,v),v+=te,Q+=4+te}if(q<g-1)a=f[q+1].dts-z.dts;else{var ie=this.config,re=z.dts-f[q>0?q-1:q].dts;if(ie.stretchShortVideoTrack){var ne=ie.maxBufferHole,se=Math.floor(ne*h),ae=(s?_+s*h:this.nextAudioPts)-z.pts;ae>se?((a=ae-re)<0&&(a=re),o.logger.log("It is approximately "+x(ae,!1)+" ms to the next segment; using duration "+x(a,!1)+" ms for the last video frame.")):a=re}else a=re}Y=Math.round(z.pts-z.dts),p.push({size:Q,duration:a,cts:Y,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:z.key?2:1,isNonSync:z.key?0:1}})}this.nextAvcDts=c+a;var oe=e.dropped;if(e.nbNalu=0,e.dropped=0,p.length&&navigator.userAgent.toLowerCase().indexOf("chrome")>-1){var le=p[0].flags;le.dependsOn=2,le.isNonSync=0}e.samples=p,u=C.moof(e.sequenceNumber++,d,e),e.samples=[];var ue={data1:u,data2:l,startPTS:_/h,endPTS:(y+a)/h,startDTS:d/h,endDTS:this.nextAvcDts/h,type:"video",hasAudio:!1,hasVideo:!0,nb:p.length,dropped:oe};return this.observer.trigger(r.default.FRAG_PARSING_DATA,ue),ue}},t.remuxAudio=function(e,t,i,s){var a,l,u,d,c,h,f=e.inputTimeScale,p=e.timescale,g=f/p,m=(e.isAAC?1024:1152)*g,v=this._initPTS,_=!e.isAAC&&this.typeSupported.mpeg,y=_?0:8,b=e.samples,E=[],T=this.nextAudioPts;if(i|=b.length&&T&&(s&&Math.abs(t-T/f)<.1||Math.abs(b[0].pts-T-v)<20*m),b.forEach((function(e){e.pts=e.dts=M(e.pts-v,t*f)})),0!==(b=b.filter((function(e){return e.pts>=0}))).length){if(i||(T=s?Math.max(0,t*f):b[0].pts),e.isAAC)for(var S=this.config.maxAudioFramesDrift,k=0,w=T;k<b.length;){var R=b[k],A=R.pts,D=A-w;if(D<=-S*m)i||k>0?(o.logger.warn("Dropping 1 audio frame @ "+x(w,!0)/1e3+"s due to "+x(D,!0)+" ms overlap."),b.splice(k,1)):(o.logger.warn("Audio frame @ "+x(A,!0)/1e3+"s overlaps nextAudioPts by "+x(D,!0)+" ms."),w=A+m,k++);else if(D>=S*m&&D<O&&w){var I=Math.round(D/m);o.logger.warn("Injecting "+I+" audio frames @ "+x(w,!0)/1e3+"s due to "+x(D,!0)+" ms gap.");for(var P=0;P<I;P++){var F=Math.max(w,0);(l=L.getSilentFrame(e.manifestCodec||e.codec,e.channelCount))||(o.logger.log("Unable to get silent frame for given audio codec; duplicating last frame instead."),l=R.unit.subarray()),b.splice(k,0,{unit:l,pts:F,dts:F}),w+=m,k++}R.pts=R.dts=w,w+=m,k++}else Math.abs(D),R.pts=R.dts=w,w+=m,k++}for(var B=b.length,N=0;B--;)N+=b[B].unit.byteLength;for(var j=0,U=b.length;j<U;j++){var G=b[j],H=G.unit,W=G.pts;if(void 0!==h&&a)a.duration=Math.round((W-h)/g);else{var K=W-T,V=0;if(i&&e.isAAC&&K){if(K>0&&K<O)V=Math.round((W-T)/m),o.logger.log(x(K,!0)+" ms hole between AAC samples detected,filling it"),V>0&&((l=L.getSilentFrame(e.manifestCodec||e.codec,e.channelCount))||(l=H.subarray()),N+=V*l.length);else if(K<-12){o.logger.log("drop overlapping AAC sample, expected/parsed/delta: "+x(T,!0)+" ms / "+x(W,!0)+" ms / "+x(-K,!0)+" ms"),N-=H.byteLength;continue}W=T}if(c=W,!(N>0))return;N+=y;try{u=new Uint8Array(N)}catch(e){return void this.observer.trigger(r.default.ERROR,{type:n.ErrorTypes.MUX_ERROR,details:n.ErrorDetails.REMUX_ALLOC_ERROR,fatal:!1,bytes:N,reason:"fail allocating audio mdat "+N})}_||(new DataView(u.buffer).setUint32(0,N),u.set(C.types.mdat,4));for(var q=0;q<V;q++)(l=L.getSilentFrame(e.manifestCodec||e.codec,e.channelCount))||(o.logger.log("Unable to get silent frame for given audio codec; duplicating this frame instead."),l=H.subarray()),u.set(l,y),y+=l.byteLength,a={size:l.byteLength,cts:0,duration:1024,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},E.push(a)}u.set(H,y);var Y=H.byteLength;y+=Y,a={size:Y,cts:0,duration:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}},E.push(a),h=W}var z=0;if((B=E.length)>=2&&(z=E[B-2].duration,a.duration=z),B){this.nextAudioPts=T=h+g*z,e.samples=E,d=_?new Uint8Array:C.moof(e.sequenceNumber++,c/g,e),e.samples=[];var X=c/f,Q=T/f,Z={data1:d,data2:u,startPTS:X,endPTS:Q,startDTS:X,endDTS:Q,type:"audio",hasAudio:!0,hasVideo:!1,nb:B};return this.observer.trigger(r.default.FRAG_PARSING_DATA,Z),Z}return null}},t.remuxEmptyAudio=function(e,t,i,r){var n=e.inputTimeScale,s=n/(e.samplerate?e.samplerate:n),a=this.nextAudioPts,l=(void 0!==a?a:r.startDTS*n)+this._initDTS,u=r.endDTS*n+this._initDTS,d=1024*s,c=Math.ceil((u-l)/d),h=L.getSilentFrame(e.manifestCodec||e.codec,e.channelCount);if(o.logger.warn("remux empty Audio"),h){for(var f=[],p=0;p<c;p++){var g=l+p*d;f.push({unit:h,pts:g,dts:g})}e.samples=f,this.remuxAudio(e,t,i)}else o.logger.trace("Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!")},t.remuxID3=function(e,t){var i=e.samples.length;if(i){for(var n=e.inputTimeScale,s=this._initPTS,a=this._initDTS,o=0;o<i;o++){var l=e.samples[o];l.pts=M(l.pts-s,t*n)/n,l.dts=M(l.dts-a,t*n)/n}this.observer.trigger(r.default.FRAG_PARSING_METADATA,{samples:e.samples}),e.samples=[]}},t.remuxText=function(e,t){var i=e.samples.length,n=e.inputTimeScale,s=this._initPTS;if(i){for(var a=0;a<i;a++){var o=e.samples[a];o.pts=M(o.pts-s,t*n)/n}e.samples.sort((function(e,t){return e.pts-t.pts})),this.observer.trigger(r.default.FRAG_PARSING_USERDATA,{samples:e.samples})}e.samples=[]},e}(),j=function(){function e(e){this.observer=e}var t=e.prototype;return t.destroy=function(){},t.resetTimeStamp=function(){},t.resetInitSegment=function(){},t.remux=function(e,t,i,n,s,a,o,l){var u=this.observer,d="";e&&(d+="audio"),t&&(d+="video"),u.trigger(r.default.FRAG_PARSING_DATA,{data1:l,startPTS:s,startDTS:s,type:d,hasAudio:!!e,hasVideo:!!t,nb:1,dropped:0}),u.trigger(r.default.FRAG_PARSED)},e}(),U=Object(l.getSelfScope)();try{B=U.performance.now.bind(U.performance)}catch(e){o.logger.debug("Unable to use Performance API on this environment"),B=U.Date.now}var G=function(){function e(e,t,i,r){this.observer=e,this.typeSupported=t,this.config=i,this.vendor=r}var t=e.prototype;return t.destroy=function(){var e=this.demuxer;e&&e.destroy()},t.push=function(e,t,i,n,a,o,l,u,d,c,h,f){var p=this;if(e.byteLength>0&&null!=t&&null!=t.key&&"AES-128"===t.method){var g=this.decrypter;null==g&&(g=this.decrypter=new s.default(this.observer,this.config));var m=B();g.decrypt(e,t.key.buffer,t.iv.buffer,(function(e){var s=B();p.observer.trigger(r.default.FRAG_DECRYPTED,{stats:{tstart:m,tdecrypt:s}}),p.pushDecrypted(new Uint8Array(e),t,new Uint8Array(i),n,a,o,l,u,d,c,h,f)}))}else this.pushDecrypted(new Uint8Array(e),t,new Uint8Array(i),n,a,o,l,u,d,c,h,f)},t.pushDecrypted=function(e,t,i,s,a,o,l,u,d,c,h,f){var p=this.demuxer,g=this.remuxer;if(!p||l||u){for(var m,v=this.observer,b=this.typeSupported,E=this.config,T=[{demux:w,remux:N},{demux:y.default,remux:j},{demux:_,remux:N},{demux:R,remux:N}],S=0,k=T.length;S<k&&!(m=T[S]).demux.probe(e);S++);if(!m)return void v.trigger(r.default.ERROR,{type:n.ErrorTypes.MEDIA_ERROR,details:n.ErrorDetails.FRAG_PARSING_ERROR,fatal:!0,reason:"no demux matching with content found"});g&&g instanceof m.remux||(g=new m.remux(v,E,b,this.vendor)),p&&p instanceof m.demux||(p=new m.demux(v,g,E,b),this.probe=m.demux.probe),this.demuxer=p,this.remuxer=g}(l||u)&&(p.resetInitSegment(i,s,a,c),g.resetInitSegment()),l&&(p.resetTimeStamp(f),g.resetTimeStamp(f)),"function"==typeof p.setDecryptData&&p.setDecryptData(t),p.append(e,o,d,h)},e}();t.default=G},"./src/demux/demuxer-worker.js":
/*!*************************************!*\
  !*** ./src/demux/demuxer-worker.js ***!
  \*************************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./src/demux/demuxer.js (referenced with require.resolve) */function(e,t,i){"use strict";i.r(t);var r=i(/*! ../demux/demuxer-inline */"./src/demux/demuxer-inline.js"),n=i(/*! ../events */"./src/events.js"),s=i(/*! ../utils/logger */"./src/utils/logger.js"),a=i(/*! eventemitter3 */"./node_modules/eventemitter3/index.js");t.default=function(e){var t=new a.EventEmitter;t.trigger=function(e){for(var i=arguments.length,r=new Array(i>1?i-1:0),n=1;n<i;n++)r[n-1]=arguments[n];t.emit.apply(t,[e,e].concat(r))},t.off=function(e){for(var i=arguments.length,r=new Array(i>1?i-1:0),n=1;n<i;n++)r[n-1]=arguments[n];t.removeListener.apply(t,[e].concat(r))};var i=function(t,i){e.postMessage({event:t,data:i})};e.addEventListener("message",(function(n){var a=n.data;switch(a.cmd){case"init":var o=JSON.parse(a.config);e.demuxer=new r.default(t,a.typeSupported,o,a.vendor),Object(s.enableLogs)(o.debug),i("init",null);break;case"demux":e.demuxer.push(a.data,a.decryptdata,a.initSegment,a.audioCodec,a.videoCodec,a.timeOffset,a.discontinuity,a.trackSwitch,a.contiguous,a.duration,a.accurateTimeOffset,a.defaultInitPTS)}})),t.on(n.default.FRAG_DECRYPTED,i),t.on(n.default.FRAG_PARSING_INIT_SEGMENT,i),t.on(n.default.FRAG_PARSED,i),t.on(n.default.ERROR,i),t.on(n.default.FRAG_PARSING_METADATA,i),t.on(n.default.FRAG_PARSING_USERDATA,i),t.on(n.default.INIT_PTS_FOUND,i),t.on(n.default.FRAG_PARSING_DATA,(function(t,i){var r=[],n={event:t,data:i};i.data1&&(n.data1=i.data1.buffer,r.push(i.data1.buffer),delete i.data1),i.data2&&(n.data2=i.data2.buffer,r.push(i.data2.buffer),delete i.data2),e.postMessage(n,r)}))}},"./src/demux/id3.js":
/*!**************************!*\
  !*** ./src/demux/id3.js ***!
  \**************************/
/*! exports provided: default, utf8ArrayToStr */function(e,t,i){"use strict";i.r(t),i.d(t,"utf8ArrayToStr",(function(){return o}));var r,n=i(/*! ../utils/get-self-scope */"./src/utils/get-self-scope.js"),s=function(){function e(){}return e.isHeader=function(e,t){return t+10<=e.length&&73===e[t]&&68===e[t+1]&&51===e[t+2]&&e[t+3]<255&&e[t+4]<255&&e[t+6]<128&&e[t+7]<128&&e[t+8]<128&&e[t+9]<128},e.isFooter=function(e,t){return t+10<=e.length&&51===e[t]&&68===e[t+1]&&73===e[t+2]&&e[t+3]<255&&e[t+4]<255&&e[t+6]<128&&e[t+7]<128&&e[t+8]<128&&e[t+9]<128},e.getID3Data=function(t,i){for(var r=i,n=0;e.isHeader(t,i);)n+=10,n+=e._readSize(t,i+6),e.isFooter(t,i+10)&&(n+=10),i+=n;if(n>0)return t.subarray(r,r+n)},e._readSize=function(e,t){var i=0;return i=(127&e[t])<<21,i|=(127&e[t+1])<<14,i|=(127&e[t+2])<<7,i|=127&e[t+3]},e.getTimeStamp=function(t){for(var i=e.getID3Frames(t),r=0;r<i.length;r++){var n=i[r];if(e.isTimeStampFrame(n))return e._readTimeStamp(n)}},e.isTimeStampFrame=function(e){return e&&"PRIV"===e.key&&"com.apple.streaming.transportStreamTimestamp"===e.info},e._getFrameData=function(t){var i=String.fromCharCode(t[0],t[1],t[2],t[3]),r=e._readSize(t,4);return{type:i,size:r,data:t.subarray(10,10+r)}},e.getID3Frames=function(t){for(var i=0,r=[];e.isHeader(t,i);){for(var n=e._readSize(t,i+6),s=(i+=10)+n;i+8<s;){var a=e._getFrameData(t.subarray(i)),o=e._decodeFrame(a);o&&r.push(o),i+=a.size+10}e.isFooter(t,i)&&(i+=10)}return r},e._decodeFrame=function(t){return"PRIV"===t.type?e._decodePrivFrame(t):"T"===t.type[0]?e._decodeTextFrame(t):"W"===t.type[0]?e._decodeURLFrame(t):void 0},e._readTimeStamp=function(e){if(8===e.data.byteLength){var t=new Uint8Array(e.data),i=1&t[3],r=(t[4]<<23)+(t[5]<<15)+(t[6]<<7)+t[7];return r/=45,i&&(r+=47721858.84),Math.round(r)}},e._decodePrivFrame=function(t){if(!(t.size<2)){var i=e._utf8ArrayToStr(t.data,!0),r=new Uint8Array(t.data.subarray(i.length+1));return{key:t.type,info:i,data:r.buffer}}},e._decodeTextFrame=function(t){if(!(t.size<2)){if("TXXX"===t.type){var i=1,r=e._utf8ArrayToStr(t.data.subarray(i),!0);i+=r.length+1;var n=e._utf8ArrayToStr(t.data.subarray(i));return{key:t.type,info:r,data:n}}var s=e._utf8ArrayToStr(t.data.subarray(1));return{key:t.type,data:s}}},e._decodeURLFrame=function(t){if("WXXX"===t.type){if(t.size<2)return;var i=1,r=e._utf8ArrayToStr(t.data.subarray(i),!0);i+=r.length+1;var n=e._utf8ArrayToStr(t.data.subarray(i));return{key:t.type,info:r,data:n}}var s=e._utf8ArrayToStr(t.data);return{key:t.type,data:s}},e._utf8ArrayToStr=function(e,t){void 0===t&&(t=!1);var i=a();if(i){var r=i.decode(e);if(t){var n=r.indexOf("\0");return-1!==n?r.substring(0,n):r}return r.replace(/\0/g,"")}for(var s,o,l,u=e.length,d="",c=0;c<u;){if(0===(s=e[c++])&&t)return d;if(0!==s&&3!==s)switch(s>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:d+=String.fromCharCode(s);break;case 12:case 13:o=e[c++],d+=String.fromCharCode((31&s)<<6|63&o);break;case 14:o=e[c++],l=e[c++],d+=String.fromCharCode((15&s)<<12|(63&o)<<6|(63&l)<<0)}}return d},e}();function a(){var e=Object(n.getSelfScope)();return r||void 0===e.TextDecoder||(r=new e.TextDecoder("utf-8")),r}var o=s._utf8ArrayToStr;t.default=s},"./src/demux/mp4demuxer.js":
/*!*********************************!*\
  !*** ./src/demux/mp4demuxer.js ***!
  \*********************************/
/*! exports provided: default */function(e,t,i){"use strict";i.r(t);var r=i(/*! ../utils/logger */"./src/utils/logger.js"),n=i(/*! ../events */"./src/events.js"),s=Math.pow(2,32)-1,a=function(){function e(e,t){this.observer=e,this.remuxer=t}var t=e.prototype;return t.resetTimeStamp=function(e){this.initPTS=e},t.resetInitSegment=function(t,i,r,s){if(t&&t.byteLength){var a=this.initData=e.parseInitSegment(t);null==i&&(i="mp4a.40.5"),null==r&&(r="avc1.42e01e");var o={};a.audio&&a.video?o.audiovideo={container:"video/mp4",codec:i+","+r,initSegment:s?t:null}:(a.audio&&(o.audio={container:"audio/mp4",codec:i,initSegment:s?t:null}),a.video&&(o.video={container:"video/mp4",codec:r,initSegment:s?t:null})),this.observer.trigger(n.default.FRAG_PARSING_INIT_SEGMENT,{tracks:o})}else i&&(this.audioCodec=i),r&&(this.videoCodec=r)},e.probe=function(t){return e.findBox({data:t,start:0,end:Math.min(t.length,16384)},["moof"]).length>0},e.bin2str=function(e){return String.fromCharCode.apply(null,e)},e.readUint16=function(e,t){e.data&&(t+=e.start,e=e.data);var i=e[t]<<8|e[t+1];return i<0?65536+i:i},e.readUint32=function(e,t){e.data&&(t+=e.start,e=e.data);var i=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3];return i<0?4294967296+i:i},e.writeUint32=function(e,t,i){e.data&&(t+=e.start,e=e.data),e[t]=i>>24,e[t+1]=i>>16&255,e[t+2]=i>>8&255,e[t+3]=255&i},e.findBox=function(t,i){var r,n,s,a,o,l,u=[];if(t.data?(o=t.start,s=t.end,t=t.data):(o=0,s=t.byteLength),!i.length)return null;for(r=o;r<s;)l=(n=e.readUint32(t,r))>1?r+n:s,e.bin2str(t.subarray(r+4,r+8))===i[0]&&(1===i.length?u.push({data:t,start:r+8,end:l}):(a=e.findBox({data:t,start:r+8,end:l},i.slice(1))).length&&(u=u.concat(a))),r=l;return u},e.parseSegmentIndex=function(t){var i,r=e.findBox(t,["moov"])[0],n=r?r.end:null,s=0,a=e.findBox(t,["sidx"]);if(!a||!a[0])return null;i=[];var o=(a=a[0]).data[0];s=0===o?8:16;var l=e.readUint32(a,s);s+=4,s+=0===o?8:16,s+=2;var u=a.end+0,d=e.readUint16(a,s);s+=2;for(var c=0;c<d;c++){var h=s,f=e.readUint32(a,h);h+=4;var p=2147483647&f;if(1==(2147483648&f)>>>31)return void console.warn("SIDX has hierarchical references (not supported)");var g=e.readUint32(a,h);h+=4,i.push({referenceSize:p,subsegmentDuration:g,info:{duration:g/l,start:u,end:u+p-1}}),u+=p,s=h+=4}return{earliestPresentationTime:0,timescale:l,version:o,referencesCount:d,references:i,moovEndOffset:n}},e.parseInitSegment=function(t){var i=[];return e.findBox(t,["moov","trak"]).forEach((function(t){var n=e.findBox(t,["tkhd"])[0];if(n){var s=n.data[n.start],a=0===s?12:20,o=e.readUint32(n,a),l=e.findBox(t,["mdia","mdhd"])[0];if(l){a=0===(s=l.data[l.start])?12:20;var u=e.readUint32(l,a),d=e.findBox(t,["mdia","hdlr"])[0];if(d){var c={soun:"audio",vide:"video"}[e.bin2str(d.data.subarray(d.start+8,d.start+12))];if(c){var h=e.findBox(t,["mdia","minf","stbl","stsd"]);if(h.length){h=h[0];var f=e.bin2str(h.data.subarray(h.start+12,h.start+16));r.logger.log("MP4Demuxer:"+c+":"+f+" found")}i[o]={timescale:u,type:c},i[c]={timescale:u,id:o}}}}}})),i},e.getStartDTS=function(t,i){var r,n,s;return r=e.findBox(i,["moof","traf"]),n=[].concat.apply([],r.map((function(i){return e.findBox(i,["tfhd"]).map((function(r){var n,s;return n=e.readUint32(r,4),s=t[n].timescale||9e4,e.findBox(i,["tfdt"]).map((function(t){var i,r;return i=t.data[t.start],r=e.readUint32(t,4),1===i&&(r*=Math.pow(2,32),r+=e.readUint32(t,8)),r}))[0]/s}))}))),s=Math.min.apply(null,n),isFinite(s)?s:0},e.offsetStartDTS=function(t,i,r){e.findBox(i,["moof","traf"]).map((function(i){return e.findBox(i,["tfhd"]).map((function(n){var a=e.readUint32(n,4),o=t[a].timescale||9e4;e.findBox(i,["tfdt"]).map((function(t){var i=t.data[t.start],n=e.readUint32(t,4);if(0===i)e.writeUint32(t,4,n-r*o);else{n*=Math.pow(2,32),n+=e.readUint32(t,8),n-=r*o,n=Math.max(n,0);var a=Math.floor(n/(s+1)),l=Math.floor(n%(s+1));e.writeUint32(t,4,a),e.writeUint32(t,8,l)}}))}))}))},t.append=function(t,i,r,s){var a=this.initData;a||(this.resetInitSegment(t,this.audioCodec,this.videoCodec,!1),a=this.initData);var o,l=this.initPTS;if(void 0===l){var u=e.getStartDTS(a,t);this.initPTS=l=u-i,this.observer.trigger(n.default.INIT_PTS_FOUND,{initPTS:l})}e.offsetStartDTS(a,t,l),o=e.getStartDTS(a,t),this.remuxer.remux(a.audio,a.video,null,null,o,r,s,t)},t.destroy=function(){},e}();t.default=a},"./src/errors.ts":
/*!***********************!*\
  !*** ./src/errors.ts ***!
  \***********************/
/*! exports provided: ErrorTypes, ErrorDetails */function(e,t,i){"use strict";var r,n;i.r(t),i.d(t,"ErrorTypes",(function(){return r})),i.d(t,"ErrorDetails",(function(){return n})),function(e){e.NETWORK_ERROR="networkError",e.MEDIA_ERROR="mediaError",e.KEY_SYSTEM_ERROR="keySystemError",e.MUX_ERROR="muxError",e.OTHER_ERROR="otherError"}(r||(r={})),function(e){e.KEY_SYSTEM_NO_KEYS="keySystemNoKeys",e.KEY_SYSTEM_NO_ACCESS="keySystemNoAccess",e.KEY_SYSTEM_NO_SESSION="keySystemNoSession",e.KEY_SYSTEM_LICENSE_REQUEST_FAILED="keySystemLicenseRequestFailed",e.KEY_SYSTEM_NO_INIT_DATA="keySystemNoInitData",e.MANIFEST_LOAD_ERROR="manifestLoadError",e.MANIFEST_LOAD_TIMEOUT="manifestLoadTimeOut",e.MANIFEST_PARSING_ERROR="manifestParsingError",e.MANIFEST_INCOMPATIBLE_CODECS_ERROR="manifestIncompatibleCodecsError",e.LEVEL_EMPTY_ERROR="levelEmptyError",e.LEVEL_LOAD_ERROR="levelLoadError",e.LEVEL_LOAD_TIMEOUT="levelLoadTimeOut",e.LEVEL_SWITCH_ERROR="levelSwitchError",e.AUDIO_TRACK_LOAD_ERROR="audioTrackLoadError",e.AUDIO_TRACK_LOAD_TIMEOUT="audioTrackLoadTimeOut",e.FRAG_LOAD_ERROR="fragLoadError",e.FRAG_LOAD_TIMEOUT="fragLoadTimeOut",e.FRAG_DECRYPT_ERROR="fragDecryptError",e.FRAG_PARSING_ERROR="fragParsingError",e.REMUX_ALLOC_ERROR="remuxAllocError",e.KEY_LOAD_ERROR="keyLoadError",e.KEY_LOAD_TIMEOUT="keyLoadTimeOut",e.BUFFER_ADD_CODEC_ERROR="bufferAddCodecError",e.BUFFER_APPEND_ERROR="bufferAppendError",e.BUFFER_APPENDING_ERROR="bufferAppendingError",e.BUFFER_STALLED_ERROR="bufferStalledError",e.BUFFER_FULL_ERROR="bufferFullError",e.BUFFER_SEEK_OVER_HOLE="bufferSeekOverHole",e.BUFFER_NUDGE_ON_STALL="bufferNudgeOnStall",e.INTERNAL_EXCEPTION="internalException"}(n||(n={}))},"./src/events.js":
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! exports provided: default */function(e,t,i){"use strict";i.r(t),t.default={MEDIA_ATTACHING:"hlsMediaAttaching",MEDIA_ATTACHED:"hlsMediaAttached",MEDIA_DETACHING:"hlsMediaDetaching",MEDIA_DETACHED:"hlsMediaDetached",BUFFER_RESET:"hlsBufferReset",BUFFER_CODECS:"hlsBufferCodecs",BUFFER_CREATED:"hlsBufferCreated",BUFFER_APPENDING:"hlsBufferAppending",BUFFER_APPENDED:"hlsBufferAppended",BUFFER_EOS:"hlsBufferEos",BUFFER_FLUSHING:"hlsBufferFlushing",BUFFER_FLUSHED:"hlsBufferFlushed",MANIFEST_LOADING:"hlsManifestLoading",MANIFEST_LOADED:"hlsManifestLoaded",MANIFEST_PARSED:"hlsManifestParsed",LEVEL_SWITCHING:"hlsLevelSwitching",LEVEL_SWITCHED:"hlsLevelSwitched",LEVEL_LOADING:"hlsLevelLoading",LEVEL_LOADED:"hlsLevelLoaded",LEVEL_UPDATED:"hlsLevelUpdated",LEVEL_PTS_UPDATED:"hlsLevelPtsUpdated",LEVELS_UPDATED:"hlsLevelsUpdated",AUDIO_TRACKS_UPDATED:"hlsAudioTracksUpdated",AUDIO_TRACK_SWITCHING:"hlsAudioTrackSwitching",AUDIO_TRACK_SWITCHED:"hlsAudioTrackSwitched",AUDIO_TRACK_LOADING:"hlsAudioTrackLoading",AUDIO_TRACK_LOADED:"hlsAudioTrackLoaded",SUBTITLE_TRACKS_UPDATED:"hlsSubtitleTracksUpdated",SUBTITLE_TRACK_SWITCH:"hlsSubtitleTrackSwitch",SUBTITLE_TRACK_LOADING:"hlsSubtitleTrackLoading",SUBTITLE_TRACK_LOADED:"hlsSubtitleTrackLoaded",SUBTITLE_FRAG_PROCESSED:"hlsSubtitleFragProcessed",CUES_PARSED:"hlsCuesParsed",NON_NATIVE_TEXT_TRACKS_FOUND:"hlsNonNativeTextTracksFound",INIT_PTS_FOUND:"hlsInitPtsFound",FRAG_LOADING:"hlsFragLoading",FRAG_LOAD_PROGRESS:"hlsFragLoadProgress",FRAG_LOAD_EMERGENCY_ABORTED:"hlsFragLoadEmergencyAborted",FRAG_LOADED:"hlsFragLoaded",FRAG_DECRYPTED:"hlsFragDecrypted",FRAG_PARSING_INIT_SEGMENT:"hlsFragParsingInitSegment",FRAG_PARSING_USERDATA:"hlsFragParsingUserdata",FRAG_PARSING_METADATA:"hlsFragParsingMetadata",FRAG_PARSING_DATA:"hlsFragParsingData",FRAG_PARSED:"hlsFragParsed",FRAG_BUFFERED:"hlsFragBuffered",FRAG_CHANGED:"hlsFragChanged",FPS_DROP:"hlsFpsDrop",FPS_DROP_LEVEL_CAPPING:"hlsFpsDropLevelCapping",ERROR:"hlsError",DESTROYING:"hlsDestroying",KEY_LOADING:"hlsKeyLoading",KEY_LOADED:"hlsKeyLoaded",STREAM_STATE_TRANSITION:"hlsStreamStateTransition",LIVE_BACK_BUFFER_REACHED:"hlsLiveBackBufferReached"}},"./src/hls.ts":
/*!*********************************!*\
  !*** ./src/hls.ts + 50 modules ***!
  \*********************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/demuxer-inline.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/eventemitter3/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/url-toolkit/src/url-toolkit.js (<- Module is not an ECMAScript module) */function(e,t,i){"use strict";i.r(t),i.d(t,"default",(function(){return si}));var r={};i.r(r),i.d(r,"newCue",(function(){return ft}));var n,s,a=i("./node_modules/url-toolkit/src/url-toolkit.js"),o=i("./src/errors.ts"),l=i("./src/polyfills/number.js"),u=i("./src/events.js"),d=i("./src/utils/logger.js"),c={hlsEventGeneric:!0,hlsHandlerDestroying:!0,hlsHandlerDestroyed:!0},h=function(){function e(e){this.hls=void 0,this.handledEvents=void 0,this.useGenericHandler=void 0,this.hls=e,this.onEvent=this.onEvent.bind(this);for(var t=arguments.length,i=new Array(t>1?t-1:0),r=1;r<t;r++)i[r-1]=arguments[r];this.handledEvents=i,this.useGenericHandler=!0,this.registerListeners()}var t=e.prototype;return t.destroy=function(){this.onHandlerDestroying(),this.unregisterListeners(),this.onHandlerDestroyed()},t.onHandlerDestroying=function(){},t.onHandlerDestroyed=function(){},t.isEventHandler=function(){return"object"==typeof this.handledEvents&&this.handledEvents.length&&"function"==typeof this.onEvent},t.registerListeners=function(){this.isEventHandler()&&this.handledEvents.forEach((function(e){if(c[e])throw new Error("Forbidden event-name: "+e);this.hls.on(e,this.onEvent)}),this)},t.unregisterListeners=function(){this.isEventHandler()&&this.handledEvents.forEach((function(e){this.hls.off(e,this.onEvent)}),this)},t.onEvent=function(e,t){this.onEventGeneric(e,t)},t.onEventGeneric=function(e,t){try{(function(e,t){var i="on"+e.replace("hls","");if("function"!=typeof this[i])throw new Error("Event "+e+" has no generic handler in this "+this.constructor.name+" class (tried "+i+")");return this[i].bind(this,t)}).call(this,e,t).call()}catch(t){d.logger.error("An internal error happened while handling event "+e+'. Error message: "'+t.message+'". Here is a stacktrace:',t),this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.OTHER_ERROR,details:o.ErrorDetails.INTERNAL_EXCEPTION,fatal:!1,event:e,err:t})}},e}();!function(e){e.MANIFEST="manifest",e.LEVEL="level",e.AUDIO_TRACK="audioTrack",e.SUBTITLE_TRACK="subtitleTrack"}(n||(n={})),function(e){e.MAIN="main",e.AUDIO="audio",e.SUBTITLE="subtitle"}(s||(s={}));var f=i("./src/demux/mp4demuxer.js");function p(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var g,m=function(){function e(e,t){this._uri=null,this.baseuri=void 0,this.reluri=void 0,this.method=null,this.key=null,this.iv=null,this.baseuri=e,this.reluri=t}var t,i,r;return t=e,(i=[{key:"uri",get:function(){return!this._uri&&this.reluri&&(this._uri=Object(a.buildAbsoluteURL)(this.baseuri,this.reluri,{alwaysNormalize:!0})),this._uri}}])&&p(t.prototype,i),r&&p(t,r),e}();function v(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}!function(e){e.AUDIO="audio",e.VIDEO="video"}(g||(g={}));var _=function(){function e(){var e;this._url=null,this._byteRange=null,this._decryptdata=null,this._elementaryStreams=((e={})[g.AUDIO]=!1,e[g.VIDEO]=!1,e),this.deltaPTS=0,this.rawProgramDateTime=null,this.programDateTime=null,this.title=null,this.tagList=[],this.cc=void 0,this.type=void 0,this.relurl=void 0,this.baseurl=void 0,this.duration=void 0,this.start=void 0,this.sn=0,this.urlId=0,this.level=0,this.levelkey=void 0,this.loader=void 0}var t,i,r,n=e.prototype;return n.setByteRange=function(e,t){var i=e.split("@",2),r=[];1===i.length?r[0]=t?t.byteRangeEndOffset:0:r[0]=parseInt(i[1]),r[1]=parseInt(i[0])+r[0],this._byteRange=r},n.addElementaryStream=function(e){this._elementaryStreams[e]=!0},n.hasElementaryStream=function(e){return!0===this._elementaryStreams[e]},n.createInitializationVector=function(e){for(var t=new Uint8Array(16),i=12;i<16;i++)t[i]=e>>8*(15-i)&255;return t},n.setDecryptDataFromLevelKey=function(e,t){var i=e;return(null==e?void 0:e.method)&&e.uri&&!e.iv&&((i=new m(e.baseuri,e.reluri)).method=e.method,i.iv=this.createInitializationVector(t)),i},t=e,(i=[{key:"url",get:function(){return!this._url&&this.relurl&&(this._url=Object(a.buildAbsoluteURL)(this.baseurl,this.relurl,{alwaysNormalize:!0})),this._url},set:function(e){this._url=e}},{key:"byteRange",get:function(){return this._byteRange?this._byteRange:[]}},{key:"byteRangeStartOffset",get:function(){return this.byteRange[0]}},{key:"byteRangeEndOffset",get:function(){return this.byteRange[1]}},{key:"decryptdata",get:function(){if(!this.levelkey&&!this._decryptdata)return null;if(!this._decryptdata&&this.levelkey){var e=this.sn;"number"!=typeof e&&(this.levelkey&&"AES-128"===this.levelkey.method&&!this.levelkey.iv&&d.logger.warn('missing IV for initialization segment with method="'+this.levelkey.method+'" - compliance issue'),e=0),this._decryptdata=this.setDecryptDataFromLevelKey(this.levelkey,e)}return this._decryptdata}},{key:"endProgramDateTime",get:function(){if(null===this.programDateTime)return null;if(!Object(l.isFiniteNumber)(this.programDateTime))return null;var e=Object(l.isFiniteNumber)(this.duration)?this.duration:0;return this.programDateTime+1e3*e}},{key:"encrypted",get:function(){return!(!this.decryptdata||null===this.decryptdata.uri||null!==this.decryptdata.key)}}])&&v(t.prototype,i),r&&v(t,r),e}();function y(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(e){this.endCC=0,this.endSN=0,this.fragments=[],this.initSegment=null,this.live=!0,this.needSidxRanges=!1,this.startCC=0,this.startSN=0,this.startTimeOffset=null,this.targetduration=0,this.totalduration=0,this.type=null,this.url=e,this.version=null}var t,i,r;return t=e,(i=[{key:"hasProgramDateTime",get:function(){return!(!this.fragments[0]||!Object(l.isFiniteNumber)(this.fragments[0].programDateTime))}}])&&y(t.prototype,i),r&&y(t,r),e}(),E=/^(\d+)x(\d+)$/,T=/\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,S=function(){function e(t){for(var i in"string"==typeof t&&(t=e.parseAttrList(t)),t)t.hasOwnProperty(i)&&(this[i]=t[i])}var t=e.prototype;return t.decimalInteger=function(e){var t=parseInt(this[e],10);return t>Number.MAX_SAFE_INTEGER?1/0:t},t.hexadecimalInteger=function(e){if(this[e]){var t=(this[e]||"0x").slice(2);t=(1&t.length?"0":"")+t;for(var i=new Uint8Array(t.length/2),r=0;r<t.length/2;r++)i[r]=parseInt(t.slice(2*r,2*r+2),16);return i}return null},t.hexadecimalIntegerAsNumber=function(e){var t=parseInt(this[e],16);return t>Number.MAX_SAFE_INTEGER?1/0:t},t.decimalFloatingPoint=function(e){return parseFloat(this[e])},t.enumeratedString=function(e){return this[e]},t.decimalResolution=function(e){var t=E.exec(this[e]);if(null!==t)return{width:parseInt(t[1],10),height:parseInt(t[2],10)}},e.parseAttrList=function(e){var t,i={};for(T.lastIndex=0;null!==(t=T.exec(e));){var r=t[2];0===r.indexOf('"')&&r.lastIndexOf('"')===r.length-1&&(r=r.slice(1,-1)),i[t[1]]=r}return i},e}(),k={audio:{a3ds:!0,"ac-3":!0,"ac-4":!0,alac:!0,alaw:!0,dra1:!0,"dts+":!0,"dts-":!0,dtsc:!0,dtse:!0,dtsh:!0,"ec-3":!0,enca:!0,g719:!0,g726:!0,m4ae:!0,mha1:!0,mha2:!0,mhm1:!0,mhm2:!0,mlpa:!0,mp4a:!0,"raw ":!0,Opus:!0,samr:!0,sawb:!0,sawp:!0,sevc:!0,sqcp:!0,ssmv:!0,twos:!0,ulaw:!0},video:{avc1:!0,avc2:!0,avc3:!0,avc4:!0,avcp:!0,drac:!0,dvav:!0,dvhe:!0,encv:!0,hev1:!0,hvc1:!0,mjp2:!0,mp4v:!0,mvc1:!0,mvc2:!0,mvc3:!0,mvc4:!0,resv:!0,rv60:!0,s263:!0,svc1:!0,svc2:!0,"vc-1":!0,vp08:!0,vp09:!0}};function w(e,t){return MediaSource.isTypeSupported((t||"video")+'/mp4;codecs="'+e+'"')}var R=/(?:#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)|#EXT-X-SESSION-DATA:([^\n\r]*)[\r\n]+)/g,L=/#EXT-X-MEDIA:(.*)/g,A=new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,/|(?!#)([\S+ ?]+)/.source,/|#EXT-X-BYTERANGE:*(.+)/.source,/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,/|#.*/.source].join(""),"g"),C=/(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/,D=/\.(mp4|m4s|m4v|m4a)$/i,x=function(){function e(){}return e.findGroup=function(e,t){for(var i=0;i<e.length;i++){var r=e[i];if(r.id===t)return r}},e.convertAVC1ToAVCOTI=function(e){var t,i=e.split(".");return i.length>2?(t=i.shift()+".",t+=parseInt(i.shift()).toString(16),t+=("000"+parseInt(i.shift()).toString(16)).substr(-4)):t=e,t},e.resolve=function(e,t){return a.buildAbsoluteURL(t,e,{alwaysNormalize:!0})},e.parseMasterPlaylist=function(t,i){var r,n=[],s={},a=!1;function o(e,t){["video","audio"].forEach((function(i){var r=e.filter((function(e){return function(e,t){var i=k[t];return!!i&&!0===i[e.slice(0,4)]}(e,i)}));if(r.length){var n=r.filter((function(e){return 0===e.lastIndexOf("avc1",0)||0===e.lastIndexOf("mp4a",0)}));t[i+"Codec"]=n.length>0?n[0]:r[0],e=e.filter((function(e){return-1===r.indexOf(e)}))}})),t.unknownCodecs=e}for(R.lastIndex=0;null!=(r=R.exec(t));)if(r[1]){var l={},u=l.attrs=new S(r[1]);l.url=e.resolve(r[2],i);var d=u.decimalResolution("RESOLUTION");d&&(l.width=d.width,l.height=d.height),l.bitrate=u.decimalInteger("AVERAGE-BANDWIDTH")||u.decimalInteger("BANDWIDTH"),l.name=u.NAME,o([].concat((u.CODECS||"").split(/[ ,]+/)),l),l.videoCodec&&-1!==l.videoCodec.indexOf("avc1")&&(l.videoCodec=e.convertAVC1ToAVCOTI(l.videoCodec)),n.push(l)}else if(r[3]){var c=new S(r[3]);c["DATA-ID"]&&(a=!0,s[c["DATA-ID"]]=c)}return{levels:n,sessionData:a?s:null}},e.parseMasterPlaylistMedia=function(t,i,r,n){var s;void 0===n&&(n=[]);var a=[],o=0;for(L.lastIndex=0;null!==(s=L.exec(t));){var l=new S(s[1]);if(l.TYPE===r){var u={attrs:l,id:o++,groupId:l["GROUP-ID"],instreamId:l["INSTREAM-ID"],name:l.NAME||l.LANGUAGE,type:r,default:"YES"===l.DEFAULT,autoselect:"YES"===l.AUTOSELECT,forced:"YES"===l.FORCED,lang:l.LANGUAGE};if(l.URI&&(u.url=e.resolve(l.URI,i)),n.length){var d=e.findGroup(n,u.groupId);u.audioCodec=d?d.codec:n[0].codec}a.push(u)}}return a},e.parseLevelPlaylist=function(e,t,i,r,n){var s,a,o,u=0,c=0,h=new b(t),f=0,p=null,g=new _,v=null;for(A.lastIndex=0;null!==(s=A.exec(e));){var y=s[1];if(y){g.duration=parseFloat(y);var E=(" "+s[2]).slice(1);g.title=E||null,g.tagList.push(E?["INF",y,E]:["INF",y])}else if(s[3]){if(Object(l.isFiniteNumber)(g.duration)){var T=u++;g.type=r,g.start=c,o&&(g.levelkey=o),g.sn=T,g.level=i,g.cc=f,g.urlId=n,g.baseurl=t,g.relurl=(" "+s[3]).slice(1),I(g,p),h.fragments.push(g),p=g,c+=g.duration,g=new _}}else if(s[4]){var k=(" "+s[4]).slice(1);p?g.setByteRange(k,p):g.setByteRange(k)}else if(s[5])g.rawProgramDateTime=(" "+s[5]).slice(1),g.tagList.push(["PROGRAM-DATE-TIME",g.rawProgramDateTime]),null===v&&(v=h.fragments.length);else{if(!(s=s[0].match(C))){d.logger.warn("No matches on slow regex match for level playlist!");continue}for(a=1;a<s.length&&void 0===s[a];a++);var w=(" "+s[a+1]).slice(1),R=(" "+s[a+2]).slice(1);switch(s[a]){case"#":g.tagList.push(R?[w,R]:[w]);break;case"PLAYLIST-TYPE":h.type=w.toUpperCase();break;case"MEDIA-SEQUENCE":u=h.startSN=parseInt(w);break;case"TARGETDURATION":h.targetduration=parseFloat(w);break;case"VERSION":h.version=parseInt(w);break;case"EXTM3U":break;case"ENDLIST":h.live=!1;break;case"DIS":f++,g.tagList.push(["DIS"]);break;case"DISCONTINUITY-SEQ":f=parseInt(w);break;case"KEY":var L=new S(w),x=L.enumeratedString("METHOD"),O=L.URI,P=L.hexadecimalInteger("IV");if("com.apple.streamingkeydelivery"===(L.KEYFORMAT||"identity")){d.logger.warn("Keyformat com.apple.streamingkeydelivery is not supported");continue}x&&(o=new m(t,O),O&&["AES-128","SAMPLE-AES","SAMPLE-AES-CENC"].indexOf(x)>=0&&(o.method=x,o.key=null,o.iv=P));break;case"START":var F=new S(w).decimalFloatingPoint("TIME-OFFSET");Object(l.isFiniteNumber)(F)&&(h.startTimeOffset=F);break;case"MAP":var M=new S(w);g.relurl=M.URI,M.BYTERANGE&&g.setByteRange(M.BYTERANGE),g.baseurl=t,g.level=i,g.type=r,g.sn="initSegment",h.initSegment=g,(g=new _).rawProgramDateTime=h.initSegment.rawProgramDateTime;break;default:d.logger.warn("line parsed but not handled: "+s)}}}return(g=p)&&!g.relurl&&(h.fragments.pop(),c-=g.duration),h.totalduration=c,h.averagetargetduration=c/h.fragments.length,h.endSN=u-1,h.startCC=h.fragments[0]?h.fragments[0].cc:0,h.endCC=f,!h.initSegment&&h.fragments.length&&h.fragments.every((function(e){return D.test(e.relurl)}))&&(d.logger.warn("MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX"),(g=new _).relurl=h.fragments[0].relurl,g.baseurl=t,g.level=i,g.type=r,g.sn="initSegment",h.initSegment=g,h.needSidxRanges=!0),v&&function(e,t){for(var i=e[t],r=t-1;r>=0;r--){var n=e[r];n.programDateTime=i.programDateTime-1e3*n.duration,i=n}}(h.fragments,v),h},e}();function I(e,t){e.rawProgramDateTime?e.programDateTime=Date.parse(e.rawProgramDateTime):(null==t?void 0:t.programDateTime)&&(e.programDateTime=t.endProgramDateTime),Object(l.isFiniteNumber)(e.programDateTime)||(e.programDateTime=null,e.rawProgramDateTime=null)}var O=window.performance,P=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MANIFEST_LOADING,u.default.LEVEL_LOADING,u.default.AUDIO_TRACK_LOADING,u.default.SUBTITLE_TRACK_LOADING)||this).loaders={},i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,r.canHaveQualityLevels=function(e){return e!==n.AUDIO_TRACK&&e!==n.SUBTITLE_TRACK},r.mapContextToLevelType=function(e){switch(e.type){case n.AUDIO_TRACK:return s.AUDIO;case n.SUBTITLE_TRACK:return s.SUBTITLE;default:return s.MAIN}},r.getResponseUrl=function(e,t){var i=e.url;return void 0!==i&&0!==i.indexOf("data:")||(i=t.url),i};var a=r.prototype;return a.createInternalLoader=function(e){var t=this.hls.config,i=t.pLoader,r=t.loader,n=new(i||r)(t);return e.loader=n,this.loaders[e.type]=n,n},a.getInternalLoader=function(e){return this.loaders[e.type]},a.resetInternalLoader=function(e){this.loaders[e]&&delete this.loaders[e]},a.destroyInternalLoaders=function(){for(var e in this.loaders){var t=this.loaders[e];t&&t.destroy(),this.resetInternalLoader(e)}},a.destroy=function(){this.destroyInternalLoaders(),e.prototype.destroy.call(this)},a.onManifestLoading=function(e){this.load({url:e.url,type:n.MANIFEST,level:0,id:null,responseType:"text"})},a.onLevelLoading=function(e){this.load({url:e.url,type:n.LEVEL,level:e.level,id:e.id,responseType:"text"})},a.onAudioTrackLoading=function(e){this.load({url:e.url,type:n.AUDIO_TRACK,level:null,id:e.id,responseType:"text"})},a.onSubtitleTrackLoading=function(e){this.load({url:e.url,type:n.SUBTITLE_TRACK,level:null,id:e.id,responseType:"text"})},a.load=function(e){var t=this.hls.config;d.logger.debug("Loading playlist of type "+e.type+", level: "+e.level+", id: "+e.id);var i,r,s,a,o=this.getInternalLoader(e);if(o){var l=o.context;if(l&&l.url===e.url)return d.logger.trace("playlist request ongoing"),!1;d.logger.warn("aborting previous loader for type: "+e.type),o.abort()}switch(e.type){case n.MANIFEST:i=t.manifestLoadingMaxRetry,r=t.manifestLoadingTimeOut,s=t.manifestLoadingRetryDelay,a=t.manifestLoadingMaxRetryTimeout;break;case n.LEVEL:i=0,a=0,s=0,r=t.levelLoadingTimeOut;break;default:i=t.levelLoadingMaxRetry,r=t.levelLoadingTimeOut,s=t.levelLoadingRetryDelay,a=t.levelLoadingMaxRetryTimeout}o=this.createInternalLoader(e);var u={timeout:r,maxRetry:i,retryDelay:s,maxRetryDelay:a},c={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)};return d.logger.debug("Calling internal loader delegate for URL: "+e.url),o.load(e,u,c),!0},a.loadsuccess=function(e,t,i,r){if(void 0===r&&(r=null),i.isSidxRequest)return this._handleSidxRequest(e,i),void this._handlePlaylistLoaded(e,t,i,r);if(this.resetInternalLoader(i.type),"string"!=typeof e.data)throw new Error('expected responseType of "text" for PlaylistLoader');var n=e.data;t.tload=O.now(),0===n.indexOf("#EXTM3U")?n.indexOf("#EXTINF:")>0||n.indexOf("#EXT-X-TARGETDURATION:")>0?this._handleTrackOrLevelPlaylist(e,t,i,r):this._handleMasterPlaylist(e,t,i,r):this._handleManifestParsingError(e,i,"no EXTM3U delimiter",r)},a.loaderror=function(e,t,i){void 0===i&&(i=null),this._handleNetworkError(t,i,!1,e)},a.loadtimeout=function(e,t,i){void 0===i&&(i=null),this._handleNetworkError(t,i,!0)},a._handleMasterPlaylist=function(e,t,i,n){var s=this.hls,a=e.data,o=r.getResponseUrl(e,i),l=x.parseMasterPlaylist(a,o),c=l.levels,h=l.sessionData;if(c.length){var f=c.map((function(e){return{id:e.attrs.AUDIO,codec:e.audioCodec}})),p=x.parseMasterPlaylistMedia(a,o,"AUDIO",f),g=x.parseMasterPlaylistMedia(a,o,"SUBTITLES"),m=x.parseMasterPlaylistMedia(a,o,"CLOSED-CAPTIONS");if(p.length){var v=!1;p.forEach((function(e){e.url||(v=!0)})),!1===v&&c[0].audioCodec&&!c[0].attrs.AUDIO&&(d.logger.log("audio codec signaled in quality level, but no embedded audio track signaled, create one"),p.unshift({type:"main",name:"main",default:!1,autoselect:!1,forced:!1,id:-1,attrs:{},url:""}))}s.trigger(u.default.MANIFEST_LOADED,{levels:c,audioTracks:p,subtitles:g,captions:m,url:o,stats:t,networkDetails:n,sessionData:h})}else this._handleManifestParsingError(e,i,"no level found in manifest",n)},a._handleTrackOrLevelPlaylist=function(e,t,i,s){var a=this.hls,d=i.id,c=i.level,h=i.type,f=r.getResponseUrl(e,i),p=Object(l.isFiniteNumber)(d)?d:0,g=Object(l.isFiniteNumber)(c)?c:p,m=r.mapContextToLevelType(i),v=x.parseLevelPlaylist(e.data,f,g,m,p);if(v.tload=t.tload,v.fragments.length){if(h===n.MANIFEST){var _={url:f,details:v};a.trigger(u.default.MANIFEST_LOADED,{levels:[_],audioTracks:[],url:f,stats:t,networkDetails:s,sessionData:null})}if(t.tparsed=O.now(),v.needSidxRanges){var y=v.initSegment.url;this.load({url:y,isSidxRequest:!0,type:h,level:c,levelDetails:v,id:d,rangeStart:0,rangeEnd:2048,responseType:"arraybuffer"})}else i.levelDetails=v,this._handlePlaylistLoaded(e,t,i,s)}else a.trigger(u.default.ERROR,{type:o.ErrorTypes.NETWORK_ERROR,details:o.ErrorDetails.LEVEL_EMPTY_ERROR,fatal:!1,url:f,reason:"no fragments found in level",level:"number"==typeof i.level?i.level:void 0})},a._handleSidxRequest=function(e,t){if("string"==typeof e.data)throw new Error("sidx request must be made with responseType of array buffer");var i=f.default.parseSegmentIndex(new Uint8Array(e.data));if(i){var r=i.references,n=t.levelDetails;r.forEach((function(e,t){var i=e.info;if(n){var r=n.fragments[t];0===r.byteRange.length&&r.setByteRange(String(1+i.end-i.start)+"@"+String(i.start))}})),n&&n.initSegment.setByteRange(String(i.moovEndOffset)+"@0")}},a._handleManifestParsingError=function(e,t,i,r){this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.NETWORK_ERROR,details:o.ErrorDetails.MANIFEST_PARSING_ERROR,fatal:!0,url:e.url,reason:i,networkDetails:r})},a._handleNetworkError=function(e,t,i,r){var s,a;void 0===i&&(i=!1),void 0===r&&(r=null),d.logger.info("A network error occured while loading a "+e.type+"-type playlist");var l=this.getInternalLoader(e);switch(e.type){case n.MANIFEST:s=i?o.ErrorDetails.MANIFEST_LOAD_TIMEOUT:o.ErrorDetails.MANIFEST_LOAD_ERROR,a=!0;break;case n.LEVEL:s=i?o.ErrorDetails.LEVEL_LOAD_TIMEOUT:o.ErrorDetails.LEVEL_LOAD_ERROR,a=!1;break;case n.AUDIO_TRACK:s=i?o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,a=!1;break;default:a=!1}l&&(l.abort(),this.resetInternalLoader(e.type));var c={type:o.ErrorTypes.NETWORK_ERROR,details:s,fatal:a,url:e.url,loader:l,context:e,networkDetails:t};r&&(c.response=r),this.hls.trigger(u.default.ERROR,c)},a._handlePlaylistLoaded=function(e,t,i,s){var a=i.type,o=i.level,l=i.id,d=i.levelDetails;if(d&&d.targetduration)if(r.canHaveQualityLevels(i.type))this.hls.trigger(u.default.LEVEL_LOADED,{details:d,level:o||0,id:l||0,stats:t,networkDetails:s});else switch(a){case n.AUDIO_TRACK:this.hls.trigger(u.default.AUDIO_TRACK_LOADED,{details:d,id:l,stats:t,networkDetails:s});break;case n.SUBTITLE_TRACK:this.hls.trigger(u.default.SUBTITLE_TRACK_LOADED,{details:d,id:l,stats:t,networkDetails:s})}else this._handleManifestParsingError(e,i,"invalid target duration",s)},r}(h),F=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.FRAG_LOADING)||this).loaders={},i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.destroy=function(){var t=this.loaders;for(var i in t){var r=t[i];r&&r.destroy()}this.loaders={},e.prototype.destroy.call(this)},n.onFragLoading=function(e){var t=e.frag,i=t.type,r=this.loaders,n=this.hls.config,s=n.fLoader,a=n.loader;t.loaded=0;var o,u,c,h=r[i];h&&(d.logger.warn("abort previous fragment loader for type: "+i),h.abort()),h=r[i]=t.loader=n.fLoader?new s(n):new a(n),o={url:t.url,frag:t,responseType:"arraybuffer",progressData:!1};var f=t.byteRangeStartOffset,p=t.byteRangeEndOffset;Object(l.isFiniteNumber)(f)&&Object(l.isFiniteNumber)(p)&&(o.rangeStart=f,o.rangeEnd=p),u={timeout:n.fragLoadingTimeOut,maxRetry:0,retryDelay:0,maxRetryDelay:n.fragLoadingMaxRetryTimeout},c={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this),onProgress:this.loadprogress.bind(this)},h.load(o,u,c)},n.loadsuccess=function(e,t,i,r){void 0===r&&(r=null);var n=e.data,s=i.frag;s.loader=void 0,this.loaders[s.type]=void 0,this.hls.trigger(u.default.FRAG_LOADED,{payload:n,frag:s,stats:t,networkDetails:r})},n.loaderror=function(e,t,i){void 0===i&&(i=null);var r=t.frag,n=r.loader;n&&n.abort(),this.loaders[r.type]=void 0,this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.NETWORK_ERROR,details:o.ErrorDetails.FRAG_LOAD_ERROR,fatal:!1,frag:t.frag,response:e,networkDetails:i})},n.loadtimeout=function(e,t,i){void 0===i&&(i=null);var r=t.frag,n=r.loader;n&&n.abort(),this.loaders[r.type]=void 0,this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.NETWORK_ERROR,details:o.ErrorDetails.FRAG_LOAD_TIMEOUT,fatal:!1,frag:t.frag,networkDetails:i})},n.loadprogress=function(e,t,i,r){void 0===r&&(r=null);var n=t.frag;n.loaded=e.loaded,this.hls.trigger(u.default.FRAG_LOAD_PROGRESS,{frag:n,stats:e,networkDetails:r})},r}(h),M=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.KEY_LOADING)||this).loaders={},i.decryptkey=null,i.decrypturl=null,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.destroy=function(){for(var t in this.loaders){var i=this.loaders[t];i&&i.destroy()}this.loaders={},e.prototype.destroy.call(this)},n.onKeyLoading=function(e){var t=e.frag,i=t.type,r=this.loaders[i];if(t.decryptdata){var n=t.decryptdata.uri;if(n!==this.decrypturl||null===this.decryptkey){var s=this.hls.config;if(r&&(d.logger.warn("abort previous key loader for type:"+i),r.abort()),!n)return void d.logger.warn("key uri is falsy");t.loader=this.loaders[i]=new s.loader(s),this.decrypturl=n,this.decryptkey=null;var a={url:n,frag:t,responseType:"arraybuffer"},o={timeout:s.fragLoadingTimeOut,maxRetry:0,retryDelay:s.fragLoadingRetryDelay,maxRetryDelay:s.fragLoadingMaxRetryTimeout},l={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)};t.loader.load(a,o,l)}else this.decryptkey&&(t.decryptdata.key=this.decryptkey,this.hls.trigger(u.default.KEY_LOADED,{frag:t}))}else d.logger.warn("Missing decryption data on fragment in onKeyLoading")},n.loadsuccess=function(e,t,i){var r=i.frag;r.decryptdata?(this.decryptkey=r.decryptdata.key=new Uint8Array(e.data),r.loader=void 0,delete this.loaders[r.type],this.hls.trigger(u.default.KEY_LOADED,{frag:r})):d.logger.error("after key load, decryptdata unset")},n.loaderror=function(e,t){var i=t.frag,r=i.loader;r&&r.abort(),delete this.loaders[i.type],this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.NETWORK_ERROR,details:o.ErrorDetails.KEY_LOAD_ERROR,fatal:!1,frag:i,response:e})},n.loadtimeout=function(e,t){var i=t.frag,r=i.loader;r&&r.abort(),delete this.loaders[i.type],this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.NETWORK_ERROR,details:o.ErrorDetails.KEY_LOAD_TIMEOUT,fatal:!1,frag:i})},r}(h),B="NOT_LOADED",N="APPENDING",j="PARTIAL",U="OK",G=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.BUFFER_APPENDED,u.default.FRAG_BUFFERED,u.default.FRAG_LOADED)||this).bufferPadding=.2,i.fragments=Object.create(null),i.timeRanges=Object.create(null),i.config=t.config,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.destroy=function(){this.fragments=Object.create(null),this.timeRanges=Object.create(null),this.config=null,h.prototype.destroy.call(this),e.prototype.destroy.call(this)},n.getBufferedFrag=function(e,t){var i=this.fragments,r=Object.keys(i).filter((function(r){var n=i[r];if(n.body.type!==t)return!1;if(!n.buffered)return!1;var s=n.body;return s.startPTS<=e&&e<=s.endPTS}));if(0===r.length)return null;var n=r.pop();return i[n].body},n.detectEvictedFragments=function(e,t){var i=this;Object.keys(this.fragments).forEach((function(r){var n=i.fragments[r];if(n&&n.buffered){var s=n.range[e];if(s)for(var a=s.time,o=0;o<a.length;o++){var l=a[o];if(!i.isTimeBuffered(l.startPTS,l.endPTS,t)){i.removeFragment(n.body);break}}}}))},n.detectPartialFragments=function(e){var t=this,i=this.getFragmentKey(e),r=this.fragments[i];r&&(r.buffered=!0,Object.keys(this.timeRanges).forEach((function(i){if(e.hasElementaryStream(i)){var n=t.timeRanges[i];r.range[i]=t.getBufferedTimes(e.startPTS,e.endPTS,n)}})))},n.getBufferedTimes=function(e,t,i){for(var r,n,s=[],a=!1,o=0;o<i.length;o++){if(r=i.start(o)-this.bufferPadding,n=i.end(o)+this.bufferPadding,e>=r&&t<=n){s.push({startPTS:Math.max(e,i.start(o)),endPTS:Math.min(t,i.end(o))});break}if(e<n&&t>r)s.push({startPTS:Math.max(e,i.start(o)),endPTS:Math.min(t,i.end(o))}),a=!0;else if(t<=r)break}return{time:s,partial:a}},n.getFragmentKey=function(e){return e.type+"_"+e.level+"_"+e.urlId+"_"+e.sn},n.getPartialFragment=function(e){var t,i,r,n=this,s=null,a=0;return Object.keys(this.fragments).forEach((function(o){var l=n.fragments[o];n.isPartial(l)&&(i=l.body.startPTS-n.bufferPadding,r=l.body.endPTS+n.bufferPadding,e>=i&&e<=r&&(t=Math.min(e-i,r-e),a<=t&&(s=l.body,a=t)))})),s},n.getState=function(e){var t=this.getFragmentKey(e),i=this.fragments[t],r=B;return void 0!==i&&(r=i.buffered?!0===this.isPartial(i)?j:U:N),r},n.isPartial=function(e){return!0===e.buffered&&(void 0!==e.range.video&&!0===e.range.video.partial||void 0!==e.range.audio&&!0===e.range.audio.partial)},n.isTimeBuffered=function(e,t,i){for(var r,n,s=0;s<i.length;s++){if(r=i.start(s)-this.bufferPadding,n=i.end(s)+this.bufferPadding,e>=r&&t<=n)return!0;if(t<=r)return!1}return!1},n.onFragLoaded=function(e){var t=e.frag;Object(l.isFiniteNumber)(t.sn)&&!t.bitrateTest&&(this.fragments[this.getFragmentKey(t)]={body:t,range:Object.create(null),buffered:!1})},n.onBufferAppended=function(e){var t=this;this.timeRanges=e.timeRanges,Object.keys(this.timeRanges).forEach((function(e){var i=t.timeRanges[e];t.detectEvictedFragments(e,i)}))},n.onFragBuffered=function(e){this.detectPartialFragments(e.frag)},n.hasFragment=function(e){var t=this.getFragmentKey(e);return void 0!==this.fragments[t]},n.removeFragment=function(e){var t=this.getFragmentKey(e);delete this.fragments[t]},n.removeAllFragments=function(){this.fragments=Object.create(null)},r}(h),H={search:function(e,t){for(var i=0,r=e.length-1,n=null,s=null;i<=r;){var a=t(s=e[n=(i+r)/2|0]);if(a>0)i=n+1;else{if(!(a<0))return s;r=n-1}}return null}},W=function(){function e(){}return e.isBuffered=function(e,t){try{if(e)for(var i=e.buffered,r=0;r<i.length;r++)if(t>=i.start(r)&&t<=i.end(r))return!0}catch(e){}return!1},e.bufferInfo=function(e,t,i){try{if(e){var r,n=e.buffered,s=[];for(r=0;r<n.length;r++)s.push({start:n.start(r),end:n.end(r)});return this.bufferedInfo(s,t,i)}}catch(e){}return{len:0,start:t,end:t,nextStart:void 0}},e.bufferedInfo=function(e,t,i){e.sort((function(e,t){var i=e.start-t.start;return i||t.end-e.end}));var r=[];if(i)for(var n=0;n<e.length;n++){var s=r.length;if(s){var a=r[s-1].end;e[n].start-a<i?e[n].end>a&&(r[s-1].end=e[n].end):r.push(e[n])}else r.push(e[n])}else r=e;for(var o,l=0,u=t,d=t,c=0;c<r.length;c++){var h=r[c].start,f=r[c].end;if(t+i>=h&&t<f)u=h,l=(d=f)-t;else if(t+i<h){o=h;break}}return{len:l,start:u,end:d,nextStart:o}},e}(),K=i("./node_modules/eventemitter3/index.js"),V=i("./node_modules/webworkify-webpack/index.js"),q=i("./src/demux/demuxer-inline.js");function Y(){return window.MediaSource||window.WebKitMediaSource}var z=i("./src/utils/get-self-scope.js"),X=function(e){var t,i;function r(){return e.apply(this,arguments)||this}return i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,r.prototype.trigger=function(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),r=1;r<t;r++)i[r-1]=arguments[r];this.emit.apply(this,[e,e].concat(i))},r}(K.EventEmitter),Q=Object(z.getSelfScope)(),Z=Y()||{isTypeSupported:function(){return!1}},$=function(){function e(e,t){var i=this;this.hls=e,this.id=t;var r=this.observer=new X,n=e.config,s=function(t,r){(r=r||{}).frag=i.frag,r.id=i.id,e.trigger(t,r)};r.on(u.default.FRAG_DECRYPTED,s),r.on(u.default.FRAG_PARSING_INIT_SEGMENT,s),r.on(u.default.FRAG_PARSING_DATA,s),r.on(u.default.FRAG_PARSED,s),r.on(u.default.ERROR,s),r.on(u.default.FRAG_PARSING_METADATA,s),r.on(u.default.FRAG_PARSING_USERDATA,s),r.on(u.default.INIT_PTS_FOUND,s);var a={mp4:Z.isTypeSupported("video/mp4"),mpeg:Z.isTypeSupported("audio/mpeg"),mp3:Z.isTypeSupported('audio/mp4; codecs="mp3"')},l=navigator.vendor;if(n.enableWorker&&"undefined"!=typeof Worker){var c;d.logger.log("demuxing in webworker");try{c=this.w=V(/*! ../demux/demuxer-worker.js */"./src/demux/demuxer-worker.js"),this.onwmsg=this.onWorkerMessage.bind(this),c.addEventListener("message",this.onwmsg),c.onerror=function(t){e.trigger(u.default.ERROR,{type:o.ErrorTypes.OTHER_ERROR,details:o.ErrorDetails.INTERNAL_EXCEPTION,fatal:!0,event:"demuxerWorker",err:{message:t.message+" ("+t.filename+":"+t.lineno+")"}})},c.postMessage({cmd:"init",typeSupported:a,vendor:l,id:t,config:JSON.stringify(n)})}catch(e){d.logger.warn("Error in worker:",e),d.logger.error("Error while initializing DemuxerWorker, fallback on DemuxerInline"),c&&Q.URL.revokeObjectURL(c.objectURL),this.demuxer=new q.default(r,a,n,l),this.w=void 0}}else this.demuxer=new q.default(r,a,n,l)}var t=e.prototype;return t.destroy=function(){var e=this.w;if(e)e.removeEventListener("message",this.onwmsg),e.terminate(),this.w=null;else{var t=this.demuxer;t&&(t.destroy(),this.demuxer=null)}var i=this.observer;i&&(i.removeAllListeners(),this.observer=null)},t.push=function(e,t,i,r,n,s,a,o){var u=this.w,c=Object(l.isFiniteNumber)(n.startPTS)?n.startPTS:n.start,h=n.decryptdata,f=this.frag,p=!(f&&n.cc===f.cc),g=!(f&&n.level===f.level),m=f&&n.sn===f.sn+1,v=!g&&m;if(p&&d.logger.log(this.id+":discontinuity detected"),g&&d.logger.log(this.id+":switch detected"),this.frag=n,u)u.postMessage({cmd:"demux",data:e,decryptdata:h,initSegment:t,audioCodec:i,videoCodec:r,timeOffset:c,discontinuity:p,trackSwitch:g,contiguous:v,duration:s,accurateTimeOffset:a,defaultInitPTS:o},e instanceof ArrayBuffer?[e]:[]);else{var _=this.demuxer;_&&_.push(e,h,t,i,r,c,p,g,v,s,a,o)}},t.onWorkerMessage=function(e){var t=e.data,i=this.hls;switch(t.event){case"init":Q.URL.revokeObjectURL(this.w.objectURL);break;case u.default.FRAG_PARSING_DATA:t.data.data1=new Uint8Array(t.data1),t.data2&&(t.data.data2=new Uint8Array(t.data2));default:t.data=t.data||{},t.data.frag=this.frag,t.data.id=this.id,i.trigger(t.event,t.data)}},e}();function J(e,t,i){switch(t){case"audio":e.audioGroupIds||(e.audioGroupIds=[]),e.audioGroupIds.push(i);break;case"text":e.textGroupIds||(e.textGroupIds=[]),e.textGroupIds.push(i)}}function ee(e,t,i){var r=e[t],n=e[i],s=n.startPTS;if(Object(l.isFiniteNumber)(s))i>t?(r.duration=s-r.start,r.duration<0&&d.logger.warn("negative duration computed for frag "+r.sn+",level "+r.level+", there should be some duration drift between playlist and fragment!")):(n.duration=r.start-s,n.duration<0&&d.logger.warn("negative duration computed for frag "+n.sn+",level "+n.level+", there should be some duration drift between playlist and fragment!"));else if(i>t){var a=r.cc===n.cc;n.start=r.start+(a&&r.minEndPTS?r.minEndPTS-r.start:r.duration)}else n.start=Math.max(r.start-n.duration,0)}function te(e,t,i,r,n,s){var a=i,o=r;if(Object(l.isFiniteNumber)(t.startPTS)){var u=Math.abs(t.startPTS-i);Object(l.isFiniteNumber)(t.deltaPTS)?t.deltaPTS=Math.max(u,t.deltaPTS):t.deltaPTS=u,a=Math.max(i,t.startPTS),i=Math.min(i,t.startPTS),o=Math.min(r,t.endPTS),r=Math.max(r,t.endPTS),n=Math.min(n,t.startDTS),s=Math.max(s,t.endDTS)}var d=i-t.start;t.start=t.startPTS=i,t.maxStartPTS=a,t.endPTS=r,t.minEndPTS=o,t.startDTS=n,t.endDTS=s,t.duration=r-i;var c,h,f,p=t.sn;if(!e||p<e.startSN||p>e.endSN)return 0;for(c=p-e.startSN,(h=e.fragments)[c]=t,f=c;f>0;f--)ee(h,f,f-1);for(f=c;f<h.length-1;f++)ee(h,f,f+1);return e.PTSKnown=!0,d}function ie(e,t){t.initSegment&&e.initSegment&&(t.initSegment=e.initSegment);var i,r=0;if(re(e,t,(function(e,n){r=e.cc-n.cc,Object(l.isFiniteNumber)(e.startPTS)&&(n.start=n.startPTS=e.startPTS,n.endPTS=e.endPTS,n.duration=e.duration,n.backtracked=e.backtracked,n.dropped=e.dropped,i=n),t.PTSKnown=!0})),t.PTSKnown){if(r){d.logger.log("discontinuity sliding from playlist, take drift into account");for(var n=t.fragments,s=0;s<n.length;s++)n[s].cc+=r}i?te(t,i,i.startPTS,i.endPTS,i.startDTS,i.endDTS):function(e,t){var i=t.startSN-e.startSN,r=e.fragments,n=t.fragments;if(!(i<0||i>r.length))for(var s=0;s<n.length;s++)n[s].start+=r[i].start}(e,t),t.PTSKnown=e.PTSKnown}}function re(e,t,i){if(e&&t)for(var r=Math.max(e.startSN,t.startSN)-t.startSN,n=Math.min(e.endSN,t.endSN)-t.startSN,s=t.startSN-e.startSN,a=r;a<=n;a++){var o=e.fragments[s+a],l=t.fragments[a];if(!o||!l)break;i(o,l,a)}}function ne(e,t,i){var r=1e3*(t.averagetargetduration?t.averagetargetduration:t.targetduration),n=r/2;return e&&t.endSN===e.endSN&&(r=n),i&&(r=Math.max(n,r-(window.performance.now()-i))),Math.round(r)}var se={toString:function(e){for(var t="",i=e.length,r=0;r<i;r++)t+="["+e.start(r).toFixed(3)+","+e.end(r).toFixed(3)+"]";return t}};function ae(e,t){t.fragments.forEach((function(t){if(t){var i=t.start+e;t.start=t.startPTS=i,t.endPTS=i+t.duration}})),t.PTSKnown=!0}function oe(e,t,i){!function(e,t,i){if(function(e,t,i){var r=!1;return t&&t.details&&i&&(i.endCC>i.startCC||e&&e.cc<i.startCC)&&(r=!0),r}(e,i,t)){var r=function(e,t){var i=e.fragments,r=t.fragments;if(r.length&&i.length){var n=function(e,t){for(var i=null,r=0;r<e.length;r+=1){var n=e[r];if(n&&n.cc===t){i=n;break}}return i}(i,r[0].cc);if(n&&(!n||n.startPTS))return n;d.logger.log("No frag in previous level to align on")}else d.logger.log("No fragments to align")}(i.details,t);r&&(d.logger.log("Adjusting PTS using last level due to CC increase within current level"),ae(r.start,t))}}(e,i,t),!i.PTSKnown&&t&&function(e,t){if(t&&t.fragments.length){if(!e.hasProgramDateTime||!t.hasProgramDateTime)return;var i=t.fragments[0].programDateTime,r=(e.fragments[0].programDateTime-i)/1e3+t.fragments[0].start;Object(l.isFiniteNumber)(r)&&(d.logger.log("adjusting PTS using programDateTime delta, sliding:"+r.toFixed(3)),ae(r,e))}}(i,t.details)}function le(e,t,i){if(null===t||!Array.isArray(e)||!e.length||!Object(l.isFiniteNumber)(t))return null;if(t<(e[0].programDateTime||0))return null;if(t>=(e[e.length-1].endProgramDateTime||0))return null;i=i||0;for(var r=0;r<e.length;++r){var n=e[r];if(ce(t,i,n))return n}return null}function ue(e,t,i,r){void 0===i&&(i=0),void 0===r&&(r=0);var n=null;if(e?n=t[e.sn-t[0].sn+1]:0===i&&0===t[0].start&&(n=t[0]),n&&0===de(i,r,n))return n;var s=H.search(t,de.bind(null,i,r));return s||n}function de(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0);var r=Math.min(t,i.duration+(i.deltaPTS?i.deltaPTS:0));return i.start+i.duration-r<=e?1:i.start-r>e&&i.start?-1:0}function ce(e,t,i){var r=1e3*Math.min(t,i.duration+(i.deltaPTS?i.deltaPTS:0));return(i.endProgramDateTime||0)-r>e}var he=function(){function e(e,t,i,r){this.config=e,this.media=t,this.fragmentTracker=i,this.hls=r,this.nudgeRetry=0,this.stallReported=!1,this.stalled=null,this.moved=!1,this.seeking=!1}var t=e.prototype;return t.poll=function(e){var t=this.config,i=this.media,r=this.stalled,n=i.currentTime,s=i.seeking,a=this.seeking&&!s,o=!this.seeking&&s;if(this.seeking=s,n===e){if((o||a)&&(this.stalled=null),!i.paused&&!i.ended&&0!==i.playbackRate&&i.buffered.length){var l=W.bufferInfo(i,n,0),u=l.len>0,c=l.nextStart||0;if(u||c){if(s){var h=l.len>2,f=!c||c-n>2&&!this.fragmentTracker.getPartialFragment(n);if(h||f)return;this.moved=!1}if(!this.moved&&this.stalled){var p=Math.max(c,l.start||0)-n;if(p>0&&p<=2)return void this._trySkipBufferHole(null)}var g=self.performance.now();if(null!==r){var m=g-r;!s&&m>=250&&this._reportStall(l.len);var v=W.bufferInfo(i,n,t.maxBufferHole);this._tryFixBufferStall(v,m)}else this.stalled=g}}}else if(this.moved=!0,null!==r){if(this.stallReported){var _=self.performance.now()-r;d.logger.warn("playback not stuck anymore @"+n+", after "+Math.round(_)+"ms"),this.stallReported=!1}this.stalled=null,this.nudgeRetry=0}},t._tryFixBufferStall=function(e,t){var i=this.config,r=this.fragmentTracker,n=this.media.currentTime,s=r.getPartialFragment(n);s&&this._trySkipBufferHole(s)||e.len>i.maxBufferHole&&t>1e3*i.highBufferWatchdogPeriod&&(d.logger.warn("Trying to nudge playhead over buffer-hole"),this.stalled=null,this._tryNudgeBuffer())},t._reportStall=function(e){var t=this.hls,i=this.media;this.stallReported||(this.stallReported=!0,d.logger.warn("Playback stalling at @"+i.currentTime+" due to low buffer (buffer="+e+")"),t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_STALLED_ERROR,fatal:!1,buffer:e}))},t._trySkipBufferHole=function(e){for(var t=this.config,i=this.hls,r=this.media,n=r.currentTime,s=0,a=0;a<r.buffered.length;a++){var l=r.buffered.start(a);if(n+t.maxBufferHole>=s&&n<l){var c=Math.max(l+.05,r.currentTime+.1);return d.logger.warn("skipping hole, adjusting currentTime from "+n+" to "+c),this.moved=!0,this.stalled=null,r.currentTime=c,e&&i.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_SEEK_OVER_HOLE,fatal:!1,reason:"fragment loaded with buffer holes, seeking from "+n+" to "+c,frag:e}),c}s=r.buffered.end(a)}return 0},t._tryNudgeBuffer=function(){var e=this.config,t=this.hls,i=this.media,r=i.currentTime,n=(this.nudgeRetry||0)+1;if(this.nudgeRetry=n,n<e.nudgeMaxRetry){var s=r+n*e.nudgeOffset;d.logger.warn("Nudging 'currentTime' from "+r+" to "+s),i.currentTime=s,t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_NUDGE_ON_STALL,fatal:!1})}else d.logger.error("Playhead still not moving while enough data buffered @"+r+" after "+e.nudgeMaxRetry+" nudges"),t.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_STALLED_ERROR,fatal:!0})},e}();function fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var pe=function(e){var t,i;function r(t){for(var i,r=arguments.length,n=new Array(r>1?r-1:0),s=1;s<r;s++)n[s-1]=arguments[s];return(i=e.call.apply(e,[this,t].concat(n))||this)._boundTick=void 0,i._tickTimer=null,i._tickInterval=null,i._tickCallCount=0,i._boundTick=i.tick.bind(fe(i)),i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.onHandlerDestroying=function(){this.clearNextTick(),this.clearInterval()},n.hasInterval=function(){return!!this._tickInterval},n.hasNextTick=function(){return!!this._tickTimer},n.setInterval=function(e){return!this._tickInterval&&(this._tickInterval=self.setInterval(this._boundTick,e),!0)},n.clearInterval=function(){return!!this._tickInterval&&(self.clearInterval(this._tickInterval),this._tickInterval=null,!0)},n.clearNextTick=function(){return!!this._tickTimer&&(self.clearTimeout(this._tickTimer),this._tickTimer=null,!0)},n.tick=function(){this._tickCallCount++,1===this._tickCallCount&&(this.doTick(),this._tickCallCount>1&&(this.clearNextTick(),this._tickTimer=self.setTimeout(this._boundTick,0)),this._tickCallCount=0)},n.doTick=function(){},r}(h),ge="STOPPED",me="STARTING",ve="IDLE",_e="PAUSED",ye="KEY_LOADING",be="FRAG_LOADING",Ee="FRAG_LOADING_WAITING_RETRY",Te="WAITING_TRACK",Se="PARSING",ke="PARSED",we="BUFFER_FLUSHING",Re="ENDED",Le="ERROR",Ae="WAITING_INIT_PTS",Ce="WAITING_LEVEL",De=function(e){var t,i;function r(){return e.apply(this,arguments)||this}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.doTick=function(){},n.startLoad=function(){},n.stopLoad=function(){var e=this.fragCurrent;e&&(e.loader&&e.loader.abort(),this.fragmentTracker.removeFragment(e)),this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.fragCurrent=null,this.fragPrevious=null,this.clearInterval(),this.clearNextTick(),this.state=ge},n._streamEnded=function(e,t){var i=this.fragCurrent,r=this.fragmentTracker;if(!t.live&&i&&!i.backtracked&&i.sn===t.endSN&&!e.nextStart){var n=r.getState(i);return n===j||n===U}return!1},n.onMediaSeeking=function(){var e=this.config,t=this.media,i=this.mediaBuffer,r=this.state,n=t?t.currentTime:null,s=W.bufferInfo(i||t,n,this.config.maxBufferHole);if(d.logger.log("media seeking to "+(Object(l.isFiniteNumber)(n)?n.toFixed(3):n)),r===be){var a=this.fragCurrent;if(0===s.len&&a){var o=e.maxFragLookUpTolerance,u=a.start-o,c=a.start+a.duration+o;n<u||n>c?(a.loader&&(d.logger.log("seeking outside of buffer while fragment load in progress, cancel fragment load"),a.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.state=ve):d.logger.log("seeking outside of buffer but within currently loaded fragment range")}}else r===Re&&(0===s.len&&(this.fragPrevious=null,this.fragCurrent=null),this.state=ve);t&&(this.lastCurrentTime=n),this.loadedmetadata||(this.nextLoadPosition=this.startPosition=n),this.tick()},n.onMediaEnded=function(){this.startPosition=this.lastCurrentTime=0},n.onHandlerDestroying=function(){this.stopLoad(),e.prototype.onHandlerDestroying.call(this)},n.onHandlerDestroyed=function(){this.state=ge,this.fragmentTracker=null},n.computeLivePosition=function(e,t){var i=void 0!==this.config.liveSyncDuration?this.config.liveSyncDuration:this.config.liveSyncDurationCount*t.targetduration;return e+Math.max(0,t.totalduration-i)},r}(pe);function xe(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Ie,Oe=function(e){var t,i;function r(t,i){var r;return(r=e.call(this,t,u.default.MEDIA_ATTACHED,u.default.MEDIA_DETACHING,u.default.MANIFEST_LOADING,u.default.MANIFEST_PARSED,u.default.LEVEL_LOADED,u.default.LEVELS_UPDATED,u.default.KEY_LOADED,u.default.FRAG_LOADED,u.default.FRAG_LOAD_EMERGENCY_ABORTED,u.default.FRAG_PARSING_INIT_SEGMENT,u.default.FRAG_PARSING_DATA,u.default.FRAG_PARSED,u.default.ERROR,u.default.AUDIO_TRACK_SWITCHING,u.default.AUDIO_TRACK_SWITCHED,u.default.BUFFER_CREATED,u.default.BUFFER_APPENDED,u.default.BUFFER_FLUSHED)||this).fragmentTracker=i,r.config=t.config,r.audioCodecSwap=!1,r._state=ge,r.stallReported=!1,r.gapController=null,r.altAudio=!1,r.audioOnly=!1,r.bitrateTest=!1,r}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,a,c,h=r.prototype;return h.startLoad=function(e){if(this.levels){var t=this.lastCurrentTime,i=this.hls;if(this.stopLoad(),this.setInterval(100),this.level=-1,this.fragLoadError=0,!this.startFragRequested){var r=i.startLevel;-1===r&&(i.config.testBandwidth?(r=0,this.bitrateTest=!0):r=i.nextAutoLevel),this.level=i.nextLoadLevel=r,this.loadedmetadata=!1}t>0&&-1===e&&(d.logger.log("override startPosition with lastCurrentTime @"+t.toFixed(3)),e=t),this.state=ve,this.nextLoadPosition=this.startPosition=this.lastCurrentTime=e,this.tick()}else this.forceStartLoad=!0,this.state=ge},h.stopLoad=function(){this.forceStartLoad=!1,e.prototype.stopLoad.call(this)},h.doTick=function(){switch(this.state){case we:this.fragLoadError=0;break;case ve:this._doTickIdle();break;case Ce:var e=this.levels[this.level];e&&e.details&&(this.state=ve);break;case Ee:var t=window.performance.now(),i=this.retryDate;(!i||t>=i||this.media&&this.media.seeking)&&(d.logger.log("mediaController: retryDate reached, switch back to IDLE state"),this.state=ve)}this._checkBuffer(),this._checkFragmentChanged()},h._doTickIdle=function(){var e=this.hls,t=e.config,i=this.media;if(void 0!==this.levelLastLoaded&&(i||!this.startFragRequested&&t.startFragPrefetch))if(this.altAudio&&this.audioOnly)this.demuxer.frag=null;else{var r;r=this.loadedmetadata?i.currentTime:this.nextLoadPosition;var n=e.nextLoadLevel,s=this.levels[n];if(s){var a,o=s.bitrate;a=o?Math.max(8*t.maxBufferSize/o,t.maxBufferLength):t.maxBufferLength,a=Math.min(a,t.maxMaxBufferLength);var l=r<t.maxBufferHole?Math.max(2,t.maxBufferHole):t.maxBufferHole,c=W.bufferInfo(this.mediaBuffer?this.mediaBuffer:i,r,l),h=c.len;if(!(h>=a)){d.logger.trace("buffer length of "+h.toFixed(3)+" is below max of "+a.toFixed(3)+". checking for more payload ..."),this.level=e.nextLoadLevel=n;var f=s.details;if(!f||f.live&&this.levelLastLoaded!==n)this.state=Ce;else{if(this._streamEnded(c,f)){var p={};return this.altAudio&&(p.type="video"),this.hls.trigger(u.default.BUFFER_EOS,p),void(this.state=Re)}this._fetchPayloadOrEos(r,c,f)}}}}},h._fetchPayloadOrEos=function(e,t,i){var r=this.fragPrevious,n=(this.level,i.fragments),s=n.length;if(0!==s){var a,o=n[0].start,l=n[s-1].start+n[s-1].duration,u=t.end;if(i.initSegment&&!i.initSegment.data)a=i.initSegment;else if(i.live){var c=this.config.initialLiveManifestSize;if(s<c)return void d.logger.warn("Can not start playback of a level, reason: not enough fragments "+s+" < "+c);if(null===(a=this._ensureFragmentAtLivePoint(i,u,o,l,r,n)))return}else u<o&&(a=n[0]);a||(a=this._findFragment(o,r,s,n,u,l,i)),a&&(a.encrypted?this._loadKey(a,i):this._loadFragment(a,i,e,u))}},h._ensureFragmentAtLivePoint=function(e,t,i,r,n,s){var a,o=this.hls.config,u=this.media,c=1/0;if(void 0!==o.liveMaxLatencyDuration?c=o.liveMaxLatencyDuration:Object(l.isFiniteNumber)(o.liveMaxLatencyDurationCount)&&(c=o.liveMaxLatencyDurationCount*e.targetduration),t<Math.max(i-o.maxFragLookUpTolerance,r-c)){var h=this.liveSyncPosition=this.computeLivePosition(i,e);t=h,u&&!u.paused&&u.readyState&&u.duration>h&&h>u.currentTime&&(d.logger.log("buffer end: "+t.toFixed(3)+" is located too far from the end of live sliding playlist, reset currentTime to : "+h.toFixed(3)),u.currentTime=h),this.nextLoadPosition=h}if(e.PTSKnown&&t>r&&u&&u.readyState)return null;if(this.startFragRequested&&!e.PTSKnown&&n)if(e.hasProgramDateTime)d.logger.log("live playlist, switching playlist, load frag with same PDT: "+n.programDateTime),a=le(s,n.endProgramDateTime,o.maxFragLookUpTolerance);else{var f=n.sn+1;if(f>=e.startSN&&f<=e.endSN){var p=s[f-e.startSN];n.cc===p.cc&&(a=p,d.logger.log("live playlist, switching playlist, load frag with next SN: "+a.sn))}a||(a=H.search(s,(function(e){return n.cc-e.cc})))&&d.logger.log("live playlist, switching playlist, load frag with same CC: "+a.sn)}return a},h._findFragment=function(e,t,i,r,n,s,a){var o,l=this.hls.config;if(o=n<s?ue(t,r,n,n>s-l.maxFragLookUpTolerance?0:l.maxFragLookUpTolerance):r[i-1]){var u=o.sn-a.startSN,c=t&&o.level===t.level,h=r[u-1],f=r[u+1];if(t&&o.sn===t.sn)if(c&&!o.backtracked)if(o.sn<a.endSN){var p=t.deltaPTS;p&&p>l.maxBufferHole&&t.dropped&&u?(o=h,d.logger.warn("Previous fragment was dropped with large PTS gap between audio and video. Maybe fragment is not starting with a keyframe? Loading previous one to try to overcome this")):(o=f,this.fragmentTracker.getState(o)!==U&&d.logger.log("Re-loading fragment with SN: "+o.sn))}else o=null;else o.backtracked&&(f&&f.backtracked?(d.logger.warn("Already backtracked from fragment "+f.sn+", will not backtrack to fragment "+o.sn+". Loading fragment "+f.sn),o=f):(d.logger.warn("Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe"),o.dropped=0,h?(o=h).backtracked=!0:u&&(o=null)))}return o},h._loadKey=function(e,t){d.logger.log("Loading key for "+e.sn+" of ["+t.startSN+"-"+t.endSN+"], level "+this.level),this.state=ye,this.hls.trigger(u.default.KEY_LOADING,{frag:e})},h._loadFragment=function(e,t,i,r){var n=this.fragmentTracker.getState(e);this.fragCurrent=e,"initSegment"!==e.sn&&(this.startFragRequested=!0),Object(l.isFiniteNumber)(e.sn)&&!e.bitrateTest&&(this.nextLoadPosition=e.start+e.duration),e.backtracked||n===B||n===j?(e.autoLevel=this.hls.autoLevelEnabled,e.bitrateTest=this.bitrateTest,d.logger.log("Loading "+e.sn+" of ["+t.startSN+"-"+t.endSN+"], level "+this.level+", "+(this.loadedmetadata?"currentTime":"nextLoadPosition")+": "+parseFloat(i.toFixed(3))+", bufferEnd: "+parseFloat(r.toFixed(3))),this.hls.trigger(u.default.FRAG_LOADING,{frag:e}),this.demuxer||(this.demuxer=new $(this.hls,"main")),this.state=be):n===N&&this._reduceMaxBufferLength(e.duration)&&this.fragmentTracker.removeFragment(e)},h.getBufferedFrag=function(e){return this.fragmentTracker.getBufferedFrag(e,s.MAIN)},h.followingBufferedFrag=function(e){return e?this.getBufferedFrag(e.endPTS+.5):null},h._checkFragmentChanged=function(){var e,t,i=this.media;if(i&&i.readyState&&!1===i.seeking&&((t=i.currentTime)>this.lastCurrentTime&&(this.lastCurrentTime=t),W.isBuffered(i,t)?e=this.getBufferedFrag(t):W.isBuffered(i,t+.1)&&(e=this.getBufferedFrag(t+.1)),e)){var r=e;if(r!==this.fragPlaying){this.hls.trigger(u.default.FRAG_CHANGED,{frag:r});var n=r.level;this.fragPlaying&&this.fragPlaying.level===n||this.hls.trigger(u.default.LEVEL_SWITCHED,{level:n}),this.fragPlaying=r}}},h.immediateLevelSwitch=function(){if(d.logger.log("immediateLevelSwitch"),!this.immediateSwitch){this.immediateSwitch=!0;var e,t=this.media;t?(e=t.paused)||t.pause():e=!0,this.previouslyPaused=e}var i=this.fragCurrent;i&&i.loader&&i.loader.abort(),this.fragCurrent=null,this.flushMainBuffer(0,Number.POSITIVE_INFINITY)},h.immediateLevelSwitchEnd=function(){var e=this.media;e&&e.buffered.length&&(this.immediateSwitch=!1,e.currentTime>0&&W.isBuffered(e,e.currentTime)&&(e.currentTime-=1e-4),this.previouslyPaused||e.play())},h.nextLevelSwitch=function(){var e=this.media;if(e&&e.readyState){var t,i=this.getBufferedFrag(e.currentTime);if(i&&i.startPTS>1&&this.flushMainBuffer(0,i.startPTS-1),e.paused)t=0;else{var r=this.hls.nextLoadLevel,n=this.levels[r],s=this.fragLastKbps;t=s&&this.fragCurrent?this.fragCurrent.duration*n.bitrate/(1e3*s)+1:0}var a=this.getBufferedFrag(e.currentTime+t);if(a){var o=this.followingBufferedFrag(a);if(o){var l=this.fragCurrent;l&&l.loader&&l.loader.abort(),this.fragCurrent=null;var u=Math.max(a.endPTS,o.maxStartPTS+Math.min(this.config.maxFragLookUpTolerance,o.duration));this.flushMainBuffer(u,Number.POSITIVE_INFINITY)}}}},h.flushMainBuffer=function(e,t){this.state=we;var i={startOffset:e,endOffset:t};this.altAudio&&(i.type="video"),this.hls.trigger(u.default.BUFFER_FLUSHING,i)},h.onMediaAttached=function(e){var t=this.media=this.mediaBuffer=e.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvseeked=this.onMediaSeeked.bind(this),this.onvended=this.onMediaEnded.bind(this),t.addEventListener("seeking",this.onvseeking),t.addEventListener("seeked",this.onvseeked),t.addEventListener("ended",this.onvended);var i=this.config;this.levels&&i.autoStartLoad&&this.hls.startLoad(i.startPosition),this.gapController=new he(i,t,this.fragmentTracker,this.hls)},h.onMediaDetaching=function(){var e=this.media;e&&e.ended&&(d.logger.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0);var t=this.levels;t&&t.forEach((function(e){e.details&&e.details.fragments.forEach((function(e){e.backtracked=void 0}))})),e&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("seeked",this.onvseeked),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.fragmentTracker.removeAllFragments(),this.media=this.mediaBuffer=null,this.loadedmetadata=!1,this.stopLoad()},h.onMediaSeeked=function(){var e=this.media,t=e?e.currentTime:void 0;Object(l.isFiniteNumber)(t)&&d.logger.log("media seeked to "+t.toFixed(3)),this.tick()},h.onManifestLoading=function(){d.logger.log("trigger BUFFER_RESET"),this.hls.trigger(u.default.BUFFER_RESET),this.fragmentTracker.removeAllFragments(),this.stalled=!1,this.startPosition=this.lastCurrentTime=0},h.onManifestParsed=function(e){var t,i=!1,r=!1;e.levels.forEach((function(e){(t=e.audioCodec)&&(-1!==t.indexOf("mp4a.40.2")&&(i=!0),-1!==t.indexOf("mp4a.40.5")&&(r=!0))})),this.audioCodecSwitch=i&&r,this.audioCodecSwitch&&d.logger.log("both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"),this.altAudio=e.altAudio,this.levels=e.levels,this.startFragRequested=!1;var n=this.config;(n.autoStartLoad||this.forceStartLoad)&&this.hls.startLoad(n.startPosition)},h.onLevelLoaded=function(e){var t=e.details,i=e.level,r=this.levels[this.levelLastLoaded],n=this.levels[i],s=t.totalduration,a=0;if(d.logger.log("level "+i+" loaded ["+t.startSN+","+t.endSN+"],duration:"+s),t.live){var o=n.details;o&&t.fragments.length>0?(ie(o,t),a=t.fragments[0].start,this.liveSyncPosition=this.computeLivePosition(a,o),t.PTSKnown&&Object(l.isFiniteNumber)(a)?d.logger.log("live playlist sliding:"+a.toFixed(3)):(d.logger.log("live playlist - outdated PTS, unknown sliding"),oe(this.fragPrevious,r,t))):(d.logger.log("live playlist - first load, unknown sliding"),t.PTSKnown=!1,oe(this.fragPrevious,r,t))}else t.PTSKnown=!1;if(n.details=t,this.levelLastLoaded=i,this.hls.trigger(u.default.LEVEL_UPDATED,{details:t,level:i}),!1===this.startFragRequested){if(-1===this.startPosition||-1===this.lastCurrentTime){var c=t.startTimeOffset;Object(l.isFiniteNumber)(c)?(c<0&&(d.logger.log("negative start time offset "+c+", count from end of last fragment"),c=a+s+c),d.logger.log("start time offset found in playlist, adjust startPosition to "+c),this.startPosition=c):t.live?(this.startPosition=this.computeLivePosition(a,t),d.logger.log("configure startPosition to "+this.startPosition)):this.startPosition=0,this.lastCurrentTime=this.startPosition}this.nextLoadPosition=this.startPosition}this.state===Ce&&(this.state=ve),this.tick()},h.onKeyLoaded=function(){this.state===ye&&(this.state=ve,this.tick())},h.onFragLoaded=function(e){var t=this.fragCurrent,i=this.hls,r=this.levels,n=this.media,s=e.frag;if(this.state===be&&t&&"main"===s.type&&s.level===t.level&&s.sn===t.sn){var a=e.stats,o=r[t.level],l=o.details;if(this.bitrateTest=!1,this.stats=a,d.logger.log("Loaded "+t.sn+" of ["+l.startSN+" ,"+l.endSN+"],level "+t.level),s.bitrateTest&&i.nextLoadLevel)this.state=ve,this.startFragRequested=!1,a.tparsed=a.tbuffered=window.performance.now(),i.trigger(u.default.FRAG_BUFFERED,{stats:a,frag:t,id:"main"}),this.tick();else if("initSegment"===s.sn)this.state=ve,a.tparsed=a.tbuffered=window.performance.now(),l.initSegment.data=e.payload,i.trigger(u.default.FRAG_BUFFERED,{stats:a,frag:t,id:"main"}),this.tick();else{d.logger.log("Parsing "+t.sn+" of ["+l.startSN+" ,"+l.endSN+"],level "+t.level+", cc "+t.cc),this.state=Se,this.pendingBuffering=!0,this.appended=!1,s.bitrateTest&&(s.bitrateTest=!1,this.fragmentTracker.onFragLoaded({frag:s}));var c=!(n&&n.seeking)&&(l.PTSKnown||!l.live),h=l.initSegment?l.initSegment.data:[],f=this._getAudioCodec(o);(this.demuxer=this.demuxer||new $(this.hls,"main")).push(e.payload,h,f,o.videoCodec,t,l.totalduration,c)}}this.fragLoadError=0},h.onFragParsingInitSegment=function(e){var t=this.fragCurrent,i=e.frag;if(t&&"main"===e.id&&i.sn===t.sn&&i.level===t.level&&this.state===Se){var r,n,s=e.tracks;if(this.audioOnly=s.audio&&!s.video,this.altAudio&&!this.audioOnly&&delete s.audio,n=s.audio){var a=this.levels[this.level].audioCodec,o=navigator.userAgent.toLowerCase();a&&this.audioCodecSwap&&(d.logger.log("swapping playlist audio codec"),a=-1!==a.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5"),this.audioCodecSwitch&&1!==n.metadata.channelCount&&-1===o.indexOf("firefox")&&(a="mp4a.40.5"),-1!==o.indexOf("android")&&"audio/mpeg"!==n.container&&(a="mp4a.40.2",d.logger.log("Android: force audio codec to "+a)),n.levelCodec=a,n.id=e.id}for(r in(n=s.video)&&(n.levelCodec=this.levels[this.level].videoCodec,n.id=e.id),this.hls.trigger(u.default.BUFFER_CODECS,s),s){n=s[r],d.logger.log("main track:"+r+",container:"+n.container+",codecs[level/parsed]=["+n.levelCodec+"/"+n.codec+"]");var l=n.initSegment;l&&(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(u.default.BUFFER_APPENDING,{type:r,data:l,parent:"main",content:"initSegment"}))}this.tick()}},h.onFragParsingData=function(e){var t=this,i=this.fragCurrent,r=e.frag;if(i&&"main"===e.id&&r.sn===i.sn&&r.level===i.level&&("audio"!==e.type||!this.altAudio)&&this.state===Se){var n=this.levels[this.level],s=i;if(Object(l.isFiniteNumber)(e.endPTS)||(e.endPTS=e.startPTS+i.duration,e.endDTS=e.startDTS+i.duration),!0===e.hasAudio&&s.addElementaryStream(g.AUDIO),!0===e.hasVideo&&s.addElementaryStream(g.VIDEO),d.logger.log("Parsed "+e.type+",PTS:["+e.startPTS.toFixed(3)+","+e.endPTS.toFixed(3)+"],DTS:["+e.startDTS.toFixed(3)+"/"+e.endDTS.toFixed(3)+"],nb:"+e.nb+",dropped:"+(e.dropped||0)),"video"===e.type)if(s.dropped=e.dropped,s.dropped)if(s.backtracked)d.logger.warn("Already backtracked on this fragment, appending with the gap",s.sn);else{var a=n.details;if(!a||s.sn!==a.startSN)return d.logger.warn("missing video frame(s), backtracking fragment",s.sn),this.fragmentTracker.removeFragment(s),s.backtracked=!0,this.nextLoadPosition=e.startPTS,this.state=ve,this.fragPrevious=s,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),void this.tick();d.logger.warn("missing video frame(s) on first frag, appending with gap",s.sn)}else s.backtracked=!1;var o=te(n.details,s,e.startPTS,e.endPTS,e.startDTS,e.endDTS),c=this.hls;c.trigger(u.default.LEVEL_PTS_UPDATED,{details:n.details,level:this.level,drift:o,type:e.type,start:e.startPTS,end:e.endPTS}),[e.data1,e.data2].forEach((function(i){i&&i.length&&t.state===Se&&(t.appended=!0,t.pendingBuffering=!0,c.trigger(u.default.BUFFER_APPENDING,{type:e.type,data:i,parent:"main",content:"data"}))})),this.tick()}},h.onFragParsed=function(e){var t=this.fragCurrent,i=e.frag;t&&"main"===e.id&&i.sn===t.sn&&i.level===t.level&&this.state===Se&&(this.stats.tparsed=window.performance.now(),this.state=ke,this._checkAppendedParsed())},h.onAudioTrackSwitching=function(e){var t=this.altAudio,i=!!e.url,r=e.id;if(!i){if(this.mediaBuffer!==this.media){d.logger.log("switching on main audio, use media.buffered to schedule main fragment loading"),this.mediaBuffer=this.media;var n=this.fragCurrent;n.loader&&(d.logger.log("switching to main audio track, cancel main fragment load"),n.loader.abort()),this.fragCurrent=null,this.fragPrevious=null,this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),this.state=ve}var s=this.hls;t&&s.trigger(u.default.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"}),s.trigger(u.default.AUDIO_TRACK_SWITCHED,{id:r})}},h.onAudioTrackSwitched=function(e){var t=e.id,i=!!this.hls.audioTracks[t].url;if(i){var r=this.videoBuffer;r&&this.mediaBuffer!==r&&(d.logger.log("switching on alternate audio, use video.buffered to schedule main fragment loading"),this.mediaBuffer=r)}this.altAudio=i,this.tick()},h.onBufferCreated=function(e){var t,i,r=e.tracks,n=!1;for(var s in r){var a=r[s];"main"===a.id?(i=s,t=a,"video"===s&&(this.videoBuffer=r[s].buffer)):n=!0}n&&t?(d.logger.log("alternate track found, use "+i+".buffered to schedule main fragment loading"),this.mediaBuffer=t.buffer):this.mediaBuffer=this.media},h.onBufferAppended=function(e){if("main"===e.parent){var t=this.state;t!==Se&&t!==ke||(this.pendingBuffering=e.pending>0,this._checkAppendedParsed())}},h._checkAppendedParsed=function(){if(!(this.state!==ke||this.appended&&this.pendingBuffering)){var e=this.fragCurrent;if(e){var t=this.mediaBuffer?this.mediaBuffer:this.media;d.logger.log("main buffered : "+se.toString(t.buffered)),this.fragPrevious=e;var i=this.stats;i.tbuffered=window.performance.now(),this.fragLastKbps=Math.round(8*i.total/(i.tbuffered-i.tfirst)),this.hls.trigger(u.default.FRAG_BUFFERED,{stats:i,frag:e,id:"main"}),this.state=ve}(this.loadedmetadata||this.startPosition<=0)&&this.tick()}},h.onError=function(e){var t=e.frag||this.fragCurrent;if(!t||"main"===t.type){var i=!!this.media&&W.isBuffered(this.media,this.media.currentTime)&&W.isBuffered(this.media,this.media.currentTime+.5);switch(e.details){case o.ErrorDetails.FRAG_LOAD_ERROR:case o.ErrorDetails.FRAG_LOAD_TIMEOUT:case o.ErrorDetails.KEY_LOAD_ERROR:case o.ErrorDetails.KEY_LOAD_TIMEOUT:if(!e.fatal)if(this.fragLoadError+1<=this.config.fragLoadingMaxRetry){var r=Math.min(Math.pow(2,this.fragLoadError)*this.config.fragLoadingRetryDelay,this.config.fragLoadingMaxRetryTimeout);d.logger.warn("mediaController: frag loading failed, retry in "+r+" ms"),this.retryDate=window.performance.now()+r,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.fragLoadError++,this.state=Ee}else d.logger.error("mediaController: "+e.details+" reaches max retry, redispatch as fatal ..."),e.fatal=!0,this.state=Le;break;case o.ErrorDetails.LEVEL_LOAD_ERROR:case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:this.state!==Le&&(e.fatal?(this.state=Le,d.logger.warn("streamController: "+e.details+",switch to "+this.state+" state ...")):e.levelRetry||this.state!==Ce||(this.state=ve));break;case o.ErrorDetails.BUFFER_FULL_ERROR:"main"!==e.parent||this.state!==Se&&this.state!==ke||(i?(this._reduceMaxBufferLength(this.config.maxBufferLength),this.state=ve):(d.logger.warn("buffer full error also media.currentTime is not buffered, flush everything"),this.fragCurrent=null,this.flushMainBuffer(0,Number.POSITIVE_INFINITY)))}}},h._reduceMaxBufferLength=function(e){var t=this.config;return t.maxMaxBufferLength>=e&&(t.maxMaxBufferLength/=2,d.logger.warn("main:reduce max buffer length to "+t.maxMaxBufferLength+"s"),!0)},h._checkBuffer=function(){var e=this.media;if(e&&0!==e.readyState){var t=(this.mediaBuffer?this.mediaBuffer:e).buffered;!this.loadedmetadata&&t.length?(this.loadedmetadata=!0,this._seekToStartPos()):this.immediateSwitch?this.immediateLevelSwitchEnd():this.gapController.poll(this.lastCurrentTime,t)}},h.onFragLoadEmergencyAborted=function(){this.state=ve,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.tick()},h.onBufferFlushed=function(){var e=this.mediaBuffer?this.mediaBuffer:this.media;if(e){var t=this.audioOnly?g.AUDIO:g.VIDEO;this.fragmentTracker.detectEvictedFragments(t,e.buffered)}this.state=ve,this.fragPrevious=null},h.onLevelsUpdated=function(e){this.levels=e.levels},h.swapAudioCodec=function(){this.audioCodecSwap=!this.audioCodecSwap},h._seekToStartPos=function(){var e=this.media,t=e.currentTime,i=this.startPosition;if(t!==i&&i>=0){if(e.seeking)return void d.logger.log("could not seek to "+i+", already seeking at "+t);var r=(e.buffered.length?e.buffered.start(0):0)-i;r>0&&r<this.config.maxBufferHole&&(d.logger.log("adjusting start position by "+r+" to match buffer start"),i+=r,this.startPosition=i),d.logger.log("seek to target start position "+i+" from current time "+t+". ready state "+e.readyState),e.currentTime=i}},h._getAudioCodec=function(e){var t=this.config.defaultAudioCodec||e.audioCodec;return this.audioCodecSwap&&(d.logger.log("swapping playlist audio codec"),t&&(t=-1!==t.indexOf("mp4a.40.5")?"mp4a.40.2":"mp4a.40.5")),t},n=r,(a=[{key:"state",set:function(e){if(this.state!==e){var t=this.state;this._state=e,d.logger.log("main stream-controller: "+t+"->"+e),this.hls.trigger(u.default.STREAM_STATE_TRANSITION,{previousState:t,nextState:e})}},get:function(){return this._state}},{key:"currentLevel",get:function(){var e=this.media;if(e){var t=this.getBufferedFrag(e.currentTime);if(t)return t.level}return-1}},{key:"nextBufferedFrag",get:function(){var e=this.media;return e?this.followingBufferedFrag(this.getBufferedFrag(e.currentTime)):null}},{key:"nextLevel",get:function(){var e=this.nextBufferedFrag;return e?e.level:-1}},{key:"liveSyncPosition",get:function(){return this._liveSyncPosition},set:function(e){this._liveSyncPosition=e}}])&&xe(n.prototype,a),c&&xe(n,c),r}(De);function Pe(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Fe=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MANIFEST_LOADED,u.default.LEVEL_LOADED,u.default.AUDIO_TRACK_SWITCHED,u.default.FRAG_LOADED,u.default.ERROR)||this).canload=!1,i.currentLevelIndex=null,i.manualLevelIndex=-1,i.timer=null,Ie=/chrome|firefox/.test(navigator.userAgent.toLowerCase()),i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,l=r.prototype;return l.onHandlerDestroying=function(){this.clearTimer(),this.manualLevelIndex=-1},l.clearTimer=function(){null!==this.timer&&(clearTimeout(this.timer),this.timer=null)},l.startLoad=function(){var e=this._levels;this.canload=!0,this.levelRetryCount=0,e&&e.forEach((function(e){e.loadError=0;var t=e.details;t&&t.live&&(e.details=void 0)})),null!==this.timer&&this.loadLevel()},l.stopLoad=function(){this.canload=!1},l.onManifestLoaded=function(e){var t,i=[],r=[],n={},s=null,a=!1,l=!1;if(e.levels.forEach((function(e){var t=e.attrs;e.loadError=0,e.fragmentError=!1,a=a||!!e.videoCodec,l=l||!!e.audioCodec,Ie&&e.audioCodec&&-1!==e.audioCodec.indexOf("mp4a.40.34")&&(e.audioCodec=void 0),(s=n[e.bitrate])?s.url.push(e.url):(e.url=[e.url],e.urlId=0,n[e.bitrate]=e,i.push(e)),t&&(t.AUDIO&&J(s||e,"audio",t.AUDIO),t.SUBTITLES&&J(s||e,"text",t.SUBTITLES))})),a&&l&&(i=i.filter((function(e){return!!e.videoCodec}))),i=i.filter((function(e){var t=e.audioCodec,i=e.videoCodec;return(!t||w(t,"audio"))&&(!i||w(i,"video"))})),e.audioTracks&&(r=e.audioTracks.filter((function(e){return!e.audioCodec||w(e.audioCodec,"audio")}))).forEach((function(e,t){e.id=t})),i.length>0){t=i[0].bitrate,i.sort((function(e,t){return e.bitrate-t.bitrate})),this._levels=i;for(var c=0;c<i.length;c++)if(i[c].bitrate===t){this._firstLevel=c,d.logger.log("manifest loaded,"+i.length+" level(s) found, first bitrate:"+t);break}var h=l&&!a;this.hls.trigger(u.default.MANIFEST_PARSED,{levels:i,audioTracks:r,firstLevel:this._firstLevel,stats:e.stats,audio:l,video:a,altAudio:!h&&r.some((function(e){return!!e.url}))})}else this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:!0,url:this.hls.url,reason:"no level with compatible codecs found in manifest"})},l.setLevelInternal=function(e){var t=this._levels,i=this.hls;if(e>=0&&e<t.length){if(this.clearTimer(),this.currentLevelIndex!==e){d.logger.log("switching to level "+e),this.currentLevelIndex=e;var r=t[e];r.level=e,i.trigger(u.default.LEVEL_SWITCHING,r)}var n=t[e],s=n.details;if(!s||s.live){var a=n.urlId;i.trigger(u.default.LEVEL_LOADING,{url:n.url[a],level:e,id:a})}}else i.trigger(u.default.ERROR,{type:o.ErrorTypes.OTHER_ERROR,details:o.ErrorDetails.LEVEL_SWITCH_ERROR,level:e,fatal:!1,reason:"invalid level idx"})},l.onError=function(e){if(e.fatal)e.type===o.ErrorTypes.NETWORK_ERROR&&this.clearTimer();else{var t,i=!1,r=!1;switch(e.details){case o.ErrorDetails.FRAG_LOAD_ERROR:case o.ErrorDetails.FRAG_LOAD_TIMEOUT:case o.ErrorDetails.KEY_LOAD_ERROR:case o.ErrorDetails.KEY_LOAD_TIMEOUT:t=e.frag.level,r=!0;break;case o.ErrorDetails.LEVEL_LOAD_ERROR:case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:t=e.context.level,i=!0;break;case o.ErrorDetails.REMUX_ALLOC_ERROR:t=e.level,i=!0}void 0!==t&&this.recoverLevel(e,t,i,r)}},l.recoverLevel=function(e,t,i,r){var n,s,a,o=this,l=this.hls.config,u=e.details,c=this._levels[t];if(c.loadError++,c.fragmentError=r,i){if(!(this.levelRetryCount+1<=l.levelLoadingMaxRetry))return d.logger.error("level controller, cannot recover from "+u+" error"),this.currentLevelIndex=null,this.clearTimer(),void(e.fatal=!0);s=Math.min(Math.pow(2,this.levelRetryCount)*l.levelLoadingRetryDelay,l.levelLoadingMaxRetryTimeout),this.timer=setTimeout((function(){return o.loadLevel()}),s),e.levelRetry=!0,this.levelRetryCount++,d.logger.warn("level controller, "+u+", retry in "+s+" ms, current retry count is "+this.levelRetryCount)}(i||r)&&((n=c.url.length)>1&&c.loadError<n?(c.urlId=(c.urlId+1)%n,c.details=void 0,d.logger.warn("level controller, "+u+" for level "+t+": switching to redundant URL-id "+c.urlId)):-1===this.manualLevelIndex?(a=0===t?this._levels.length-1:t-1,d.logger.warn("level controller, "+u+": switch to "+a),this.hls.nextAutoLevel=this.currentLevelIndex=a):r&&(d.logger.warn("level controller, "+u+": reload a fragment"),this.currentLevelIndex=null))},l.onFragLoaded=function(e){var t=e.frag;if(void 0!==t&&"main"===t.type){var i=this._levels[t.level];void 0!==i&&(i.fragmentError=!1,i.loadError=0,this.levelRetryCount=0)}},l.onLevelLoaded=function(e){var t=this,i=e.level,r=e.details;if(i===this.currentLevelIndex){var n=this._levels[i];if(n.fragmentError||(n.loadError=0,this.levelRetryCount=0),r.live){var s=ne(n.details,r,e.stats.trequest);d.logger.log("live playlist, reload in "+Math.round(s)+" ms"),this.timer=setTimeout((function(){return t.loadLevel()}),s)}else this.clearTimer()}},l.onAudioTrackSwitched=function(e){var t=this.hls.audioTracks[e.id].groupId,i=this.hls.levels[this.currentLevelIndex];if(i&&i.audioGroupIds){for(var r=-1,n=0;n<i.audioGroupIds.length;n++)if(i.audioGroupIds[n]===t){r=n;break}r!==i.urlId&&(i.urlId=r,this.startLoad())}},l.loadLevel=function(){if(d.logger.debug("call to loadLevel"),null!==this.currentLevelIndex&&this.canload){var e=this._levels[this.currentLevelIndex];if("object"==typeof e&&e.url.length>0){var t=this.currentLevelIndex,i=e.urlId,r=e.url[i];d.logger.log("Attempt loading level index "+t+" with URL-id "+i),this.hls.trigger(u.default.LEVEL_LOADING,{url:r,level:t,id:i})}}},l.removeLevel=function(e,t){var i=this.levels.filter((function(i,r){return r!==e||i.url.length>1&&void 0!==t&&(i.url=i.url.filter((function(e,i){return i!==t})),i.urlId=0,!0)})).map((function(e,t){var i=e.details;return i&&i.fragments&&i.fragments.forEach((function(e){e.level=t})),e}));this._levels=i,this.hls.trigger(u.default.LEVELS_UPDATED,{levels:i})},n=r,(s=[{key:"levels",get:function(){return this._levels}},{key:"level",get:function(){return this.currentLevelIndex},set:function(e){var t=this._levels;t&&(e=Math.min(e,t.length-1),this.currentLevelIndex===e&&t[e].details||this.setLevelInternal(e))}},{key:"manualLevel",get:function(){return this.manualLevelIndex},set:function(e){this.manualLevelIndex=e,void 0===this._startLevel&&(this._startLevel=e),-1!==e&&(this.level=e)}},{key:"firstLevel",get:function(){return this._firstLevel},set:function(e){this._firstLevel=e}},{key:"startLevel",get:function(){if(void 0===this._startLevel){var e=this.hls.config.startLevel;return void 0!==e?e:this._firstLevel}return this._startLevel},set:function(e){this._startLevel=e}},{key:"nextLoadLevel",get:function(){return-1!==this.manualLevelIndex?this.manualLevelIndex:this.hls.nextAutoLevel},set:function(e){this.level=e,-1===this.manualLevelIndex&&(this.hls.nextAutoLevel=e)}}])&&Pe(n.prototype,s),a&&Pe(n,a),r}(h),Me=i("./src/demux/id3.js");function Be(e,t){var i;try{i=new Event("addtrack")}catch(e){(i=document.createEvent("Event")).initEvent("addtrack",!1,!1)}i.track=e,t.dispatchEvent(i)}function Ne(e){if(null==e?void 0:e.cues)for(;e.cues.length>0;)e.removeCue(e.cues[0])}var je=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MEDIA_ATTACHED,u.default.MEDIA_DETACHING,u.default.FRAG_PARSING_METADATA,u.default.LIVE_BACK_BUFFER_REACHED)||this).id3Track=void 0,i.media=void 0,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.destroy=function(){h.prototype.destroy.call(this)},n.onMediaAttached=function(e){this.media=e.media,this.media},n.onMediaDetaching=function(){Ne(this.id3Track),this.id3Track=void 0,this.media=void 0},n.getID3Track=function(e){for(var t=0;t<e.length;t++){var i=e[t];if("metadata"===i.kind&&"id3"===i.label)return Be(i,this.media),i}return this.media.addTextTrack("metadata","id3")},n.onFragParsingMetadata=function(e){var t=e.frag,i=e.samples;this.id3Track||(this.id3Track=this.getID3Track(this.media.textTracks),this.id3Track.mode="hidden");for(var r=window.WebKitDataCue||window.VTTCue||window.TextTrackCue,n=0;n<i.length;n++){var s=Me.default.getID3Frames(i[n].data);if(s){var a=Math.max(i[n].pts,0),o=n<i.length-1?i[n+1].pts:t.endPTS;o||(o=t.start+t.duration),o-a<=0&&(o=a+.25);for(var l=0;l<s.length;l++){var u=s[l];if(!Me.default.isTimeStampFrame(u)){var d=new r(a,o,"");d.value=u,this.id3Track.addCue(d)}}}}},n.onLiveBackBufferReached=function(e){var t=e.bufferEnd,i=this.id3Track;if(i&&i.cues&&i.cues.length){var r=function(e,t){if(t<e[0].endTime)return e[0];if(t>e[e.length-1].endTime)return e[e.length-1];for(var i=0,r=e.length-1;i<=r;){var n=Math.floor((r+i)/2);if(t<e[n].endTime)r=n-1;else{if(!(t>e[n].endTime))return e[n];i=n+1}}return e[i].endTime-t<t-e[r].endTime?e[i]:e[r]}(i.cues,t);if(r)for(;i.cues[0]!==r;)i.removeCue(i.cues[0])}},r}(h),Ue=function(){function e(e){this.alpha_=void 0,this.estimate_=void 0,this.totalWeight_=void 0,this.alpha_=e?Math.exp(Math.log(.5)/e):0,this.estimate_=0,this.totalWeight_=0}var t=e.prototype;return t.sample=function(e,t){var i=Math.pow(this.alpha_,e);this.estimate_=t*(1-i)+i*this.estimate_,this.totalWeight_+=e},t.getTotalWeight=function(){return this.totalWeight_},t.getEstimate=function(){if(this.alpha_){var e=1-Math.pow(this.alpha_,this.totalWeight_);return this.estimate_/e}return this.estimate_},e}(),Ge=function(){function e(e,t,i,r){this.hls=void 0,this.defaultEstimate_=void 0,this.minWeight_=void 0,this.minDelayMs_=void 0,this.slow_=void 0,this.fast_=void 0,this.hls=e,this.defaultEstimate_=r,this.minWeight_=.001,this.minDelayMs_=50,this.slow_=new Ue(t),this.fast_=new Ue(i)}var t=e.prototype;return t.sample=function(e,t){var i=(e=Math.max(e,this.minDelayMs_))/1e3,r=8*t/i;this.fast_.sample(i,r),this.slow_.sample(i,r)},t.canEstimate=function(){var e=this.fast_;return e&&e.getTotalWeight()>=this.minWeight_},t.getEstimate=function(){return this.canEstimate()?Math.min(this.fast_.getEstimate(),this.slow_.getEstimate()):this.defaultEstimate_},t.destroy=function(){},e}();function He(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var We=window.performance,Ke=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.FRAG_LOADING,u.default.FRAG_LOADED,u.default.FRAG_BUFFERED,u.default.ERROR)||this).lastLoadedFragLevel=0,i._nextAutoLevel=-1,i.hls=t,i.timer=null,i._bwEstimator=null,i.onCheck=i._abandonRulesCheck.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i)),i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,c=r.prototype;return c.destroy=function(){this.clearTimer(),h.prototype.destroy.call(this)},c.onFragLoading=function(e){var t=e.frag;if("main"===t.type&&(this.timer||(this.fragCurrent=t,this.timer=setInterval(this.onCheck,100)),!this._bwEstimator)){var i,r,n=this.hls,s=n.config,a=t.level;n.levels[a].details.live?(i=s.abrEwmaFastLive,r=s.abrEwmaSlowLive):(i=s.abrEwmaFastVoD,r=s.abrEwmaSlowVoD),this._bwEstimator=new Ge(n,r,i,s.abrEwmaDefaultEstimate)}},c._abandonRulesCheck=function(){var e=this.hls,t=e.media,i=this.fragCurrent;if(i){var r=i.loader;if(!r||r.stats&&r.stats.aborted)return d.logger.warn("frag loader destroy or aborted, disarm abandonRules"),this.clearTimer(),void(this._nextAutoLevel=-1);var n=r.stats;if(t&&n&&(!t.paused&&0!==t.playbackRate||!t.readyState)&&i.autoLevel&&i.level){var s=We.now()-n.trequest,a=Math.abs(t.playbackRate);if(s>500*i.duration/a){var o=e.levels,l=Math.max(1,n.bw?n.bw/8:1e3*n.loaded/s),c=o[i.level];if(!c)return;var h=c.realBitrate?Math.max(c.realBitrate,c.bitrate):c.bitrate,f=n.total?n.total:Math.max(n.loaded,Math.round(i.duration*h/8)),p=t.currentTime,g=(f-n.loaded)/l,m=(W.bufferInfo(t,p,e.config.maxBufferHole).end-p)/a;if(m<2*i.duration/a&&g>m){var v,_=e.minAutoLevel;for(v=i.level-1;v>_;v--){var y=o[v].realBitrate?Math.max(o[v].realBitrate,o[v].bitrate):o[v].bitrate;if(i.duration*y/(6.4*l)<m)break}void 0<g&&(d.logger.warn("loading too slow, abort fragment loading and switch to level "+v+":fragLoadedDelay["+v+"]<fragLoadedDelay["+(i.level-1)+"];bufferStarvationDelay:"+(void 0).toFixed(1)+"<"+g.toFixed(1)+":"+m.toFixed(1)),e.nextLoadLevel=v,this._bwEstimator.sample(s,n.loaded),r.abort(),this.clearTimer(),e.trigger(u.default.FRAG_LOAD_EMERGENCY_ABORTED,{frag:i,stats:n}))}}}}},c.onFragLoaded=function(e){var t=e.frag;if("main"===t.type&&Object(l.isFiniteNumber)(t.sn)){if(this.clearTimer(),this.lastLoadedFragLevel=t.level,this._nextAutoLevel=-1,this.hls.config.abrMaxWithRealBitrate){var i=this.hls.levels[t.level],r=(i.loaded?i.loaded.bytes:0)+e.stats.loaded,n=(i.loaded?i.loaded.duration:0)+e.frag.duration;i.loaded={bytes:r,duration:n},i.realBitrate=Math.round(8*r/n)}if(e.frag.bitrateTest){var s=e.stats;s.tparsed=s.tbuffered=s.tload,this.onFragBuffered(e)}}},c.onFragBuffered=function(e){var t=e.stats,i=e.frag;if(!0!==t.aborted&&"main"===i.type&&Object(l.isFiniteNumber)(i.sn)&&(!i.bitrateTest||t.tload===t.tbuffered)){var r=t.tparsed-t.trequest;d.logger.log("latency/loading/parsing/append/kbps:"+Math.round(t.tfirst-t.trequest)+"/"+Math.round(t.tload-t.tfirst)+"/"+Math.round(t.tparsed-t.tload)+"/"+Math.round(t.tbuffered-t.tparsed)+"/"+Math.round(8*t.loaded/(t.tbuffered-t.trequest))),this._bwEstimator.sample(r,t.loaded),t.bwEstimate=this._bwEstimator.getEstimate(),i.bitrateTest?this.bitrateTestDelay=r/1e3:this.bitrateTestDelay=0}},c.onError=function(e){switch(e.details){case o.ErrorDetails.FRAG_LOAD_ERROR:case o.ErrorDetails.FRAG_LOAD_TIMEOUT:this.clearTimer()}},c.clearTimer=function(){clearInterval(this.timer),this.timer=null},c._findBestLevel=function(e,t,i,r,n,s,a,o,l){for(var u=n;u>=r;u--){var c=l[u];if(c){var h=c.details,f=h?h.totalduration/h.fragments.length:t,p=!!h&&h.live,g=void 0;g=u<=e?a*i:o*i;var m=l[u].realBitrate?Math.max(l[u].realBitrate,l[u].bitrate):l[u].bitrate,v=m*f/g;if(d.logger.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: "+u+"/"+Math.round(g)+"/"+m+"/"+f+"/"+s+"/"+v),g>m&&(!v||p&&!this.bitrateTestDelay||v<s))return u}}return-1},n=r,(s=[{key:"nextAutoLevel",get:function(){var e=this._nextAutoLevel,t=this._bwEstimator;if(!(-1===e||t&&t.canEstimate()))return e;var i=this._nextABRAutoLevel;return-1!==e&&(i=Math.min(e,i)),i},set:function(e){this._nextAutoLevel=e}},{key:"_nextABRAutoLevel",get:function(){var e=this.hls,t=e.maxAutoLevel,i=e.levels,r=e.config,n=e.minAutoLevel,s=e.media,a=this.lastLoadedFragLevel,o=this.fragCurrent?this.fragCurrent.duration:0,l=s?s.currentTime:0,u=s&&0!==s.playbackRate?Math.abs(s.playbackRate):1,c=this._bwEstimator?this._bwEstimator.getEstimate():r.abrEwmaDefaultEstimate,h=(W.bufferInfo(s,l,r.maxBufferHole).end-l)/u,f=this._findBestLevel(a,o,c,n,t,h,r.abrBandWidthFactor,r.abrBandWidthUpFactor,i);if(f>=0)return f;d.logger.trace("rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering");var p=o?Math.min(o,r.maxStarvationDelay):r.maxStarvationDelay,g=r.abrBandWidthFactor,m=r.abrBandWidthUpFactor;if(0===h){var v=this.bitrateTestDelay;v&&(p=(o?Math.min(o,r.maxLoadingDelay):r.maxLoadingDelay)-v,d.logger.trace("bitrate test took "+Math.round(1e3*v)+"ms, set first fragment max fetchDuration to "+Math.round(1e3*p)+" ms"),g=m=1)}return f=this._findBestLevel(a,o,c,n,t,h+p,g,m,i),Math.max(f,0)}}])&&He(n.prototype,s),a&&He(n,a),r}(h),Ve=Y(),qe=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MEDIA_ATTACHING,u.default.MEDIA_DETACHING,u.default.MANIFEST_PARSED,u.default.BUFFER_RESET,u.default.BUFFER_APPENDING,u.default.BUFFER_CODECS,u.default.BUFFER_EOS,u.default.BUFFER_FLUSHING,u.default.LEVEL_PTS_UPDATED,u.default.LEVEL_UPDATED)||this)._msDuration=null,i._levelDuration=null,i._levelTargetDuration=10,i._live=null,i._objectUrl=null,i._needsFlush=!1,i._needsEos=!1,i.config=void 0,i.audioTimestampOffset=void 0,i.bufferCodecEventsExpected=0,i._bufferCodecEventsTotal=0,i.media=null,i.mediaSource=null,i.segments=[],i.parent=void 0,i.appending=!1,i.appended=0,i.appendError=0,i.flushBufferCounter=0,i.tracks={},i.pendingTracks={},i.sourceBuffer={},i.flushRange=[],i._onMediaSourceOpen=function(){d.logger.log("media source opened"),i.hls.trigger(u.default.MEDIA_ATTACHED,{media:i.media});var e=i.mediaSource;e&&e.removeEventListener("sourceopen",i._onMediaSourceOpen),i.checkPendingTracks()},i._onMediaSourceClose=function(){d.logger.log("media source closed")},i._onMediaSourceEnded=function(){d.logger.log("media source ended")},i._onSBUpdateEnd=function(){if(i.audioTimestampOffset&&i.sourceBuffer.audio){var e=i.sourceBuffer.audio;d.logger.warn("change mpeg audio timestamp offset from "+e.timestampOffset+" to "+i.audioTimestampOffset),e.timestampOffset=i.audioTimestampOffset,delete i.audioTimestampOffset}i._needsFlush&&i.doFlush(),i._needsEos&&i.checkEos(),i.appending=!1;var t=i.parent,r=i.segments.reduce((function(e,i){return i.parent===t?e+1:e}),0),n={},s=i.sourceBuffer;for(var a in s){var o=s[a];if(!o)throw Error("handling source buffer update end error: source buffer for "+a+" uninitilized and unable to update buffered TimeRanges.");n[a]=o.buffered}i.hls.trigger(u.default.BUFFER_APPENDED,{parent:t,pending:r,timeRanges:n}),i._needsFlush||i.doAppending(),i.updateMediaElementDuration(),0===r&&i.flushLiveBackBuffer()},i._onSBUpdateError=function(e){d.logger.error("sourceBuffer error:",e),i.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_APPENDING_ERROR,fatal:!1})},i.config=t.config,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.destroy=function(){h.prototype.destroy.call(this)},n.onLevelPtsUpdated=function(e){var t=e.type,i=this.tracks.audio;if("audio"===t&&i&&"audio/mpeg"===i.container){var r=this.sourceBuffer.audio;if(!r)throw Error("Level PTS Updated and source buffer for audio uninitalized");if(Math.abs(r.timestampOffset-e.start)>.1){var n=r.updating;try{r.abort()}catch(e){d.logger.warn("can not abort audio buffer: "+e)}n?this.audioTimestampOffset=e.start:(d.logger.warn("change mpeg audio timestamp offset from "+r.timestampOffset+" to "+e.start),r.timestampOffset=e.start)}}},n.onManifestParsed=function(e){var t=2;(e.audio&&!e.video||!e.altAudio)&&(t=1),this.bufferCodecEventsExpected=this._bufferCodecEventsTotal=t,d.logger.log(this.bufferCodecEventsExpected+" bufferCodec event(s) expected")},n.onMediaAttaching=function(e){var t=this.media=e.media;if(t&&Ve){var i=this.mediaSource=new Ve;i.addEventListener("sourceopen",this._onMediaSourceOpen),i.addEventListener("sourceended",this._onMediaSourceEnded),i.addEventListener("sourceclose",this._onMediaSourceClose),t.src=window.URL.createObjectURL(i),this._objectUrl=t.src}},n.onMediaDetaching=function(){d.logger.log("media source detaching");var e=this.mediaSource;if(e){if("open"===e.readyState)try{e.endOfStream()}catch(e){d.logger.warn("onMediaDetaching:"+e.message+" while calling endOfStream")}e.removeEventListener("sourceopen",this._onMediaSourceOpen),e.removeEventListener("sourceended",this._onMediaSourceEnded),e.removeEventListener("sourceclose",this._onMediaSourceClose),this.media&&(this._objectUrl&&window.URL.revokeObjectURL(this._objectUrl),this.media.src===this._objectUrl?(this.media.removeAttribute("src"),this.media.load()):d.logger.warn("media.src was changed by a third party - skip cleanup")),this.mediaSource=null,this.media=null,this._objectUrl=null,this.bufferCodecEventsExpected=this._bufferCodecEventsTotal,this.pendingTracks={},this.tracks={},this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0}this.hls.trigger(u.default.MEDIA_DETACHED)},n.checkPendingTracks=function(){var e=this.bufferCodecEventsExpected,t=this.pendingTracks,i=Object.keys(t).length;(i&&!e||2===i)&&(this.createSourceBuffers(t),this.pendingTracks={},this.doAppending())},n.onBufferReset=function(){var e=this.sourceBuffer;for(var t in e){var i=e[t];try{i&&(this.mediaSource&&this.mediaSource.removeSourceBuffer(i),i.removeEventListener("updateend",this._onSBUpdateEnd),i.removeEventListener("error",this._onSBUpdateError))}catch(e){}}this.sourceBuffer={},this.flushRange=[],this.segments=[],this.appended=0},n.onBufferCodecs=function(e){var t=this;Object.keys(this.sourceBuffer).length||(Object.keys(e).forEach((function(i){t.pendingTracks[i]=e[i]})),this.bufferCodecEventsExpected=Math.max(this.bufferCodecEventsExpected-1,0),this.mediaSource&&"open"===this.mediaSource.readyState&&this.checkPendingTracks())},n.createSourceBuffers=function(e){var t=this.sourceBuffer,i=this.mediaSource;if(!i)throw Error("createSourceBuffers called when mediaSource was null");for(var r in e)if(!t[r]){var n=e[r];if(!n)throw Error("source buffer exists for track "+r+", however track does not");var s=n.levelCodec||n.codec,a=n.container+";codecs="+s;d.logger.log("creating sourceBuffer("+a+")");try{var l=t[r]=i.addSourceBuffer(a);l.addEventListener("updateend",this._onSBUpdateEnd),l.addEventListener("error",this._onSBUpdateError),this.tracks[r]={buffer:l,codec:s,id:n.id,container:n.container,levelCodec:n.levelCodec}}catch(e){d.logger.error("error while trying to add sourceBuffer:"+e.message),this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.BUFFER_ADD_CODEC_ERROR,fatal:!1,err:e,mimeType:a})}}this.hls.trigger(u.default.BUFFER_CREATED,{tracks:this.tracks})},n.onBufferAppending=function(e){this._needsFlush||(this.segments?this.segments.push(e):this.segments=[e],this.doAppending())},n.onBufferEos=function(e){for(var t in this.sourceBuffer)if(!e.type||e.type===t){var i=this.sourceBuffer[t];i&&!i.ended&&(i.ended=!0,d.logger.log(t+" sourceBuffer now EOS"))}this.checkEos()},n.checkEos=function(){var e=this.sourceBuffer,t=this.mediaSource;if(t&&"open"===t.readyState){for(var i in e){var r=e[i];if(r){if(!r.ended)return;if(r.updating)return void(this._needsEos=!0)}}d.logger.log("all media data are available, signal endOfStream() to MediaSource and stop loading fragment");try{t.endOfStream()}catch(e){d.logger.warn("exception while calling mediaSource.endOfStream()")}this._needsEos=!1}else this._needsEos=!1},n.onBufferFlushing=function(e){e.type?this.flushRange.push({start:e.startOffset,end:e.endOffset,type:e.type}):(this.flushRange.push({start:e.startOffset,end:e.endOffset,type:"video"}),this.flushRange.push({start:e.startOffset,end:e.endOffset,type:"audio"})),this.flushBufferCounter=0,this.doFlush()},n.flushLiveBackBuffer=function(){if(this._live){var e=this.config.liveBackBufferLength;if(isFinite(e)&&!(e<0))if(this.media)for(var t=this.media.currentTime,i=this.sourceBuffer,r=Object.keys(i),n=t-Math.max(e,this._levelTargetDuration),s=r.length-1;s>=0;s--){var a=r[s],o=i[a];if(o){var l=o.buffered;l.length>0&&n>l.start(0)&&this.removeBufferRange(a,o,0,n)&&this.hls.trigger(u.default.LIVE_BACK_BUFFER_REACHED,{bufferEnd:n})}}else d.logger.error("flushLiveBackBuffer called without attaching media")}},n.onLevelUpdated=function(e){var t=e.details;t.fragments.length>0&&(this._levelDuration=t.totalduration+t.fragments[0].start,this._levelTargetDuration=t.averagetargetduration||t.targetduration||10,this._live=t.live,this.updateMediaElementDuration())},n.updateMediaElementDuration=function(){var e,t=this.config;if(null!==this._levelDuration&&this.media&&this.mediaSource&&this.sourceBuffer&&0!==this.media.readyState&&"open"===this.mediaSource.readyState){for(var i in this.sourceBuffer){var r=this.sourceBuffer[i];if(r&&!0===r.updating)return}e=this.media.duration,null===this._msDuration&&(this._msDuration=this.mediaSource.duration),!0===this._live&&!0===t.liveDurationInfinity?(d.logger.log("Media Source duration is set to Infinity"),this._msDuration=this.mediaSource.duration=1/0):(this._levelDuration>this._msDuration&&this._levelDuration>e||!Object(l.isFiniteNumber)(e))&&(d.logger.log("Updating Media Source duration to "+this._levelDuration.toFixed(3)),this._msDuration=this.mediaSource.duration=this._levelDuration)}},n.doFlush=function(){for(;this.flushRange.length;){var e=this.flushRange[0];if(!this.flushBuffer(e.start,e.end,e.type))return void(this._needsFlush=!0);this.flushRange.shift(),this.flushBufferCounter=0}if(0===this.flushRange.length){this._needsFlush=!1;var t=0,i=this.sourceBuffer;try{for(var r in i){var n=i[r];n&&(t+=n.buffered.length)}}catch(e){d.logger.error("error while accessing sourceBuffer.buffered")}this.appended=t,this.hls.trigger(u.default.BUFFER_FLUSHED)}},n.doAppending=function(){var e=this.config,t=this.hls,i=this.segments,r=this.sourceBuffer;if(Object.keys(r).length){if(!this.media||this.media.error)return this.segments=[],void d.logger.error("trying to append although a media error occured, flush segment and abort");if(!this.appending){var n=i.shift();if(n)try{var s=r[n.type];if(!s)return void this._onSBUpdateEnd();if(s.updating)return void i.unshift(n);s.ended=!1,this.parent=n.parent,s.appendBuffer(n.data),this.appendError=0,this.appended++,this.appending=!0}catch(r){d.logger.error("error while trying to append buffer:"+r.message),i.unshift(n);var a={type:o.ErrorTypes.MEDIA_ERROR,parent:n.parent,details:"",fatal:!1};22===r.code?(this.segments=[],a.details=o.ErrorDetails.BUFFER_FULL_ERROR):(this.appendError++,a.details=o.ErrorDetails.BUFFER_APPEND_ERROR,this.appendError>e.appendErrorMaxRetry&&(d.logger.log("fail "+e.appendErrorMaxRetry+" times to append segment in sourceBuffer"),this.segments=[],a.fatal=!0)),t.trigger(u.default.ERROR,a)}}}},n.flushBuffer=function(e,t,i){var r=this.sourceBuffer;if(!Object.keys(r).length)return!0;var n="null";if(this.media&&(n=this.media.currentTime.toFixed(3)),d.logger.log("flushBuffer,pos/start/end: "+n+"/"+e+"/"+t),this.flushBufferCounter>=this.appended)return d.logger.warn("abort flushing too many retries"),!0;var s=r[i];if(s){if(s.ended=!1,s.updating)return d.logger.warn("cannot flush, sb updating in progress"),!1;if(this.removeBufferRange(i,s,e,t))return this.flushBufferCounter++,!1}return d.logger.log("buffer flushed"),!0},n.removeBufferRange=function(e,t,i,r){try{for(var n=0;n<t.buffered.length;n++){var s=t.buffered.start(n),a=t.buffered.end(n),o=Math.max(s,i),l=Math.min(a,r);if(Math.min(l,a)-o>.5){var u="null";return this.media&&(u=this.media.currentTime.toString()),d.logger.log("sb remove "+e+" ["+o+","+l+"], of ["+s+","+a+"], pos:"+u),t.remove(o,l),!0}}}catch(e){d.logger.warn("removeBufferRange failed",e)}return!1},r}(h);function Ye(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ze=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.FPS_DROP_LEVEL_CAPPING,u.default.MEDIA_ATTACHING,u.default.MANIFEST_PARSED,u.default.LEVELS_UPDATED,u.default.BUFFER_CODECS,u.default.MEDIA_DETACHING)||this).autoLevelCapping=Number.POSITIVE_INFINITY,i.firstLevel=null,i.levels=[],i.media=null,i.restrictedLevels=[],i.timer=null,i.clientRect=null,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,o=r.prototype;return o.destroy=function(){this.hls.config.capLevelToPlayerSize&&(this.media=null,this.clientRect=null,this.stopCapping())},o.onFpsDropLevelCapping=function(e){r.isLevelAllowed(e.droppedLevel,this.restrictedLevels)&&this.restrictedLevels.push(e.droppedLevel)},o.onMediaAttaching=function(e){this.media=e.media instanceof window.HTMLVideoElement?e.media:null},o.onManifestParsed=function(e){var t=this.hls;this.restrictedLevels=[],this.levels=e.levels,this.firstLevel=e.firstLevel,t.config.capLevelToPlayerSize&&e.video&&this.startCapping()},o.onBufferCodecs=function(e){this.hls.config.capLevelToPlayerSize&&e.video&&this.startCapping()},o.onLevelsUpdated=function(e){this.levels=e.levels},o.onMediaDetaching=function(){this.stopCapping()},o.detectPlayerSize=function(){if(this.media){var e=this.levels?this.levels.length:0;if(e){var t=this.hls;t.autoLevelCapping=this.getMaxLevel(e-1),t.autoLevelCapping>this.autoLevelCapping&&t.streamController.nextLevelSwitch(),this.autoLevelCapping=t.autoLevelCapping}}},o.getMaxLevel=function(e){var t=this;if(!this.levels)return-1;var i=this.levels.filter((function(i,n){return r.isLevelAllowed(n,t.restrictedLevels)&&n<=e}));return this.clientRect=null,r.getMaxLevelByMediaSize(i,this.mediaWidth,this.mediaHeight)},o.startCapping=function(){this.timer||(this.autoLevelCapping=Number.POSITIVE_INFINITY,this.hls.firstLevel=this.getMaxLevel(this.firstLevel),clearInterval(this.timer),this.timer=setInterval(this.detectPlayerSize.bind(this),1e3),this.detectPlayerSize())},o.stopCapping=function(){this.restrictedLevels=[],this.firstLevel=null,this.autoLevelCapping=Number.POSITIVE_INFINITY,this.timer&&(this.timer=clearInterval(this.timer),this.timer=null)},o.getDimensions=function(){if(this.clientRect)return this.clientRect;var e=this.media,t={width:0,height:0};if(e){var i=e.getBoundingClientRect();t.width=i.width,t.height=i.height,t.width||t.height||(t.width=i.right-i.left||e.width||0,t.height=i.bottom-i.top||e.height||0)}return this.clientRect=t,t},r.isLevelAllowed=function(e,t){return void 0===t&&(t=[]),-1===t.indexOf(e)},r.getMaxLevelByMediaSize=function(e,t,i){if(!e||e&&!e.length)return-1;for(var r,n,s=e.length-1,a=0;a<e.length;a+=1){var o=e[a];if((o.width>=t||o.height>=i)&&(r=o,!(n=e[a+1])||r.width!==n.width||r.height!==n.height)){s=a;break}}return s},n=r,a=[{key:"contentScaleFactor",get:function(){var e=1;try{e=window.devicePixelRatio}catch(e){}return e}}],(s=[{key:"mediaWidth",get:function(){return this.getDimensions().width*r.contentScaleFactor}},{key:"mediaHeight",get:function(){return this.getDimensions().height*r.contentScaleFactor}}])&&Ye(n.prototype,s),a&&Ye(n,a),r}(h),Xe=window.performance,Qe=function(e){var t,i;function r(t){return e.call(this,t,u.default.MEDIA_ATTACHING)||this}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.destroy=function(){this.timer&&clearInterval(this.timer),this.isVideoPlaybackQualityAvailable=!1},n.onMediaAttaching=function(e){var t=this.hls.config;t.capLevelOnFPSDrop&&("function"==typeof(this.video=e.media instanceof window.HTMLVideoElement?e.media:null).getVideoPlaybackQuality&&(this.isVideoPlaybackQualityAvailable=!0),clearInterval(this.timer),this.timer=setInterval(this.checkFPSInterval.bind(this),t.fpsDroppedMonitoringPeriod))},n.checkFPS=function(e,t,i){var r=Xe.now();if(t){if(this.lastTime){var n=r-this.lastTime,s=i-this.lastDroppedFrames,a=t-this.lastDecodedFrames,o=1e3*s/n,l=this.hls;if(l.trigger(u.default.FPS_DROP,{currentDropped:s,currentDecoded:a,totalDroppedFrames:i}),o>0&&s>l.config.fpsDroppedMonitoringThreshold*a){var c=l.currentLevel;d.logger.warn("drop FPS ratio greater than max allowed value for currentLevel: "+c),c>0&&(-1===l.autoLevelCapping||l.autoLevelCapping>=c)&&(c-=1,l.trigger(u.default.FPS_DROP_LEVEL_CAPPING,{level:c,droppedLevel:l.currentLevel}),l.autoLevelCapping=c,l.streamController.nextLevelSwitch())}}this.lastTime=r,this.lastDroppedFrames=i,this.lastDecodedFrames=t}},n.checkFPSInterval=function(){var e=this.video;if(e)if(this.isVideoPlaybackQualityAvailable){var t=e.getVideoPlaybackQuality();this.checkFPS(e,t.totalVideoFrames,t.droppedVideoFrames)}else this.checkFPS(e,e.webkitDecodedFrameCount,e.webkitDroppedFrameCount)},r}(h),Ze=function(){function e(e){e&&e.xhrSetup&&(this.xhrSetup=e.xhrSetup)}var t=e.prototype;return t.destroy=function(){this.abort(),this.loader=null},t.abort=function(){var e=this.loader;e&&4!==e.readyState&&(this.stats.aborted=!0,e.abort()),window.clearTimeout(this.requestTimeout),this.requestTimeout=null,window.clearTimeout(this.retryTimeout),this.retryTimeout=null},t.load=function(e,t,i){this.context=e,this.config=t,this.callbacks=i,this.stats={trequest:window.performance.now(),retry:0},this.retryDelay=t.retryDelay,this.loadInternal()},t.loadInternal=function(){var e,t=this.context;e=this.loader=new window.XMLHttpRequest;var i=this.stats;i.tfirst=0,i.loaded=0;var r=this.xhrSetup;try{if(r)try{r(e,t.url)}catch(i){e.open("GET",t.url,!0),r(e,t.url)}e.readyState||e.open("GET",t.url,!0)}catch(i){return void this.callbacks.onError({code:e.status,text:i.message},t,e)}t.rangeEnd&&e.setRequestHeader("Range","bytes="+t.rangeStart+"-"+(t.rangeEnd-1)),e.onreadystatechange=this.readystatechange.bind(this),e.onprogress=this.loadprogress.bind(this),e.responseType=t.responseType,this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),this.config.timeout),e.send()},t.readystatechange=function(e){var t=e.currentTarget,i=t.readyState,r=this.stats,n=this.context,s=this.config;if(!r.aborted&&i>=2)if(window.clearTimeout(this.requestTimeout),0===r.tfirst&&(r.tfirst=Math.max(window.performance.now(),r.trequest)),4===i){var a=t.status;if(a>=200&&a<300){var o,l;r.tload=Math.max(r.tfirst,window.performance.now()),l="arraybuffer"===n.responseType?(o=t.response).byteLength:(o=t.responseText).length,r.loaded=r.total=l;var u={url:t.responseURL,data:o};this.callbacks.onSuccess(u,r,n,t)}else r.retry>=s.maxRetry||a>=400&&a<499?(d.logger.error(a+" while loading "+n.url),this.callbacks.onError({code:a,text:t.statusText},n,t)):(d.logger.warn(a+" while loading "+n.url+", retrying in "+this.retryDelay+"..."),this.destroy(),this.retryTimeout=window.setTimeout(this.loadInternal.bind(this),this.retryDelay),this.retryDelay=Math.min(2*this.retryDelay,s.maxRetryDelay),r.retry++)}else this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),s.timeout)},t.loadtimeout=function(){d.logger.warn("timeout while loading "+this.context.url),this.callbacks.onTimeout(this.stats,this.context,null)},t.loadprogress=function(e){var t=e.currentTarget,i=this.stats;i.loaded=e.loaded,e.lengthComputable&&(i.total=e.total);var r=this.callbacks.onProgress;r&&r(i,this.context,null,t)},e}();function $e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Je=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MANIFEST_LOADING,u.default.MANIFEST_PARSED,u.default.AUDIO_TRACK_LOADED,u.default.AUDIO_TRACK_SWITCHED,u.default.LEVEL_LOADED,u.default.ERROR)||this)._trackId=-1,i._selectDefaultTrack=!0,i.tracks=[],i.trackIdBlacklist=Object.create(null),i.audioGroupId=null,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,l=r.prototype;return l.onManifestLoading=function(){this.tracks=[],this._trackId=-1,this._selectDefaultTrack=!0},l.onManifestParsed=function(e){var t=this.tracks=e.audioTracks||[];this.hls.trigger(u.default.AUDIO_TRACKS_UPDATED,{audioTracks:t}),this._selectAudioGroup(this.hls.nextLoadLevel)},l.onAudioTrackLoaded=function(e){if(e.id>=this.tracks.length)d.logger.warn("Invalid audio track id:",e.id);else{if(d.logger.log("audioTrack "+e.id+" loaded"),this.tracks[e.id].details=e.details,e.details.live&&!this.hasInterval()){var t=1e3*e.details.targetduration;this.setInterval(t)}!e.details.live&&this.hasInterval()&&this.clearInterval()}},l.onAudioTrackSwitched=function(e){var t=this.tracks[e.id].groupId;t&&this.audioGroupId!==t&&(this.audioGroupId=t)},l.onLevelLoaded=function(e){this._selectAudioGroup(e.level)},l.onError=function(e){e.type===o.ErrorTypes.NETWORK_ERROR&&(e.fatal&&this.clearInterval(),e.details===o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR&&(d.logger.warn("Network failure on audio-track id:",e.context.id),this._handleLoadError()))},l._setAudioTrack=function(e){if(this._trackId===e&&this.tracks[this._trackId].details)d.logger.debug("Same id as current audio-track passed, and track details available -> no-op");else if(e<0||e>=this.tracks.length)d.logger.warn("Invalid id passed to audio-track controller");else{var t=this.tracks[e];d.logger.log("Now switching to audio-track index "+e),this.clearInterval(),this._trackId=e;var i=t.url,r=t.type,n=t.id;this.hls.trigger(u.default.AUDIO_TRACK_SWITCHING,{id:n,type:r,url:i}),this._loadTrackDetailsIfNeeded(t)}},l.doTick=function(){this._updateTrack(this._trackId)},l._selectAudioGroup=function(e){var t=this.hls.levels[e];if(t&&t.audioGroupIds){var i=t.audioGroupIds[t.urlId];this.audioGroupId!==i&&(this.audioGroupId=i,this._selectInitialAudioTrack())}},l._selectInitialAudioTrack=function(){var e=this,t=this.tracks;if(t.length){var i=this.tracks[this._trackId],r=null;if(i&&(r=i.name),this._selectDefaultTrack){var n=t.filter((function(e){return e.default}));n.length?t=n:d.logger.warn("No default audio tracks defined")}var s=!1,a=function(){t.forEach((function(t){s||e.audioGroupId&&t.groupId!==e.audioGroupId||r&&r!==t.name||(e._setAudioTrack(t.id),s=!0)}))};a(),s||(r=null,a()),s||(d.logger.error("No track found for running audio group-ID: "+this.audioGroupId),this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,fatal:!0}))}},l._needsTrackLoading=function(e){var t=e.details,i=e.url;return!(t&&!t.live||!i)},l._loadTrackDetailsIfNeeded=function(e){if(this._needsTrackLoading(e)){var t=e.url,i=e.id;d.logger.log("loading audio-track playlist for id: "+i),this.hls.trigger(u.default.AUDIO_TRACK_LOADING,{url:t,id:i})}},l._updateTrack=function(e){if(!(e<0||e>=this.tracks.length)){this.clearInterval(),this._trackId=e,d.logger.log("trying to update audio-track "+e);var t=this.tracks[e];this._loadTrackDetailsIfNeeded(t)}},l._handleLoadError=function(){this.trackIdBlacklist[this._trackId]=!0;var e=this._trackId,t=this.tracks[e],i=t.name,r=t.language,n=t.groupId;d.logger.warn("Loading failed on audio track id: "+e+", group-id: "+n+', name/language: "'+i+'" / "'+r+'"');for(var s=e,a=0;a<this.tracks.length;a++)if(!this.trackIdBlacklist[a]&&this.tracks[a].name===i){s=a;break}s!==e?(d.logger.log("Attempting audio-track fallback id:",s,"group-id:",this.tracks[s].groupId),this._setAudioTrack(s)):d.logger.warn('No fallback audio-track found for name/language: "'+i+'" / "'+r+'"')},n=r,(s=[{key:"audioTracks",get:function(){return this.tracks}},{key:"audioTrack",get:function(){return this._trackId},set:function(e){this._setAudioTrack(e),this._selectDefaultTrack=!1}}])&&$e(n.prototype,s),a&&$e(n,a),r}(pe);function et(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var tt=window.performance,it=function(e){var t,i;function r(t,i){var r;return(r=e.call(this,t,u.default.MEDIA_ATTACHED,u.default.MEDIA_DETACHING,u.default.AUDIO_TRACKS_UPDATED,u.default.AUDIO_TRACK_SWITCHING,u.default.AUDIO_TRACK_LOADED,u.default.KEY_LOADED,u.default.FRAG_LOADED,u.default.FRAG_PARSING_INIT_SEGMENT,u.default.FRAG_PARSING_DATA,u.default.FRAG_PARSED,u.default.ERROR,u.default.BUFFER_RESET,u.default.BUFFER_CREATED,u.default.BUFFER_APPENDED,u.default.BUFFER_FLUSHED,u.default.INIT_PTS_FOUND)||this).fragmentTracker=i,r.config=t.config,r.audioCodecSwap=!1,r._state=ge,r.initPTS=[],r.waitingFragment=null,r.videoTrackCC=null,r.waitingVideoCC=null,r}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,c=r.prototype;return c.onInitPtsFound=function(e){var t=e.id,i=e.frag.cc,r=e.initPTS;"main"===t&&(this.initPTS[i]=r,this.videoTrackCC=i,d.logger.log("InitPTS for cc: "+i+" found from main: "+r),this.state===Ae&&this.tick())},c.startLoad=function(e){if(this.tracks){var t=this.lastCurrentTime;this.stopLoad(),this.setInterval(100),this.fragLoadError=0,t>0&&-1===e?(d.logger.log("audio:override startPosition with lastCurrentTime @"+t.toFixed(3)),this.state=ve):(this.lastCurrentTime=this.startPosition?this.startPosition:e,this.state=me),this.nextLoadPosition=this.startPosition=this.lastCurrentTime,this.tick()}else this.startPosition=e,this.state=ge},c.doTick=function(){var e,t,i,r=this.hls,n=r.config;switch(this.state){case Le:case _e:case we:break;case me:this.state=Te,this.loadedmetadata=!1;break;case ve:var s=this.tracks;if(!s)break;if(!this.media&&(this.startFragRequested||!n.startFragPrefetch))break;if(this.loadedmetadata)e=this.media.currentTime;else if(void 0===(e=this.nextLoadPosition))break;var a=this.mediaBuffer?this.mediaBuffer:this.media,o=this.videoBuffer?this.videoBuffer:this.media,c=e<n.maxBufferHole?Math.max(2,n.maxBufferHole):n.maxBufferHole,h=W.bufferInfo(a,e,c),f=W.bufferInfo(o,e,c),p=h.len,g=h.end,m=this.fragPrevious,v=Math.min(n.maxBufferLength,n.maxMaxBufferLength),_=Math.max(v,f.len),y=this.audioSwitch,b=this.trackId;if((p<_||y)&&b<s.length){if(void 0===(i=s[b].details)){this.state=Te;break}if(!y&&this._streamEnded(h,i))return this.hls.trigger(u.default.BUFFER_EOS,{type:"audio"}),void(this.state=Re);var E,T=i.fragments,S=T.length,k=T[0].start,w=T[S-1].start+T[S-1].duration;if(y)if(i.live&&!i.PTSKnown)d.logger.log("switching audiotrack, live stream, unknown PTS,load first fragment"),g=0;else if(g=e,i.PTSKnown&&e<k){if(!(h.end>k||h.nextStart))return;d.logger.log("alt audio track ahead of main track, seek to start of alt audio track"),this.media.currentTime=k+.05}if(i.initSegment&&!i.initSegment.data)E=i.initSegment;else if(g<=k){if(E=T[0],null!==this.videoTrackCC&&E.cc!==this.videoTrackCC&&(E=function(e,t){return H.search(e,(function(e){return e.cc<t?1:e.cc>t?-1:0}))}(T,this.videoTrackCC)),i.live&&E.loadIdx&&E.loadIdx===this.fragLoadIdx){var R=h.nextStart?h.nextStart:k;return d.logger.log("no alt audio available @currentTime:"+this.media.currentTime+", seeking @"+(R+.05)),void(this.media.currentTime=R+.05)}}else{var L,A=n.maxFragLookUpTolerance,C=m?T[m.sn-T[0].sn+1]:void 0;g<w?(g>w-A&&(A=0),L=C&&!de(g,A,C)?C:H.search(T,(function(e){return de(g,A,e)}))):L=T[S-1],L&&(E=L,k=L.start,m&&E.level===m.level&&E.sn===m.sn&&(E.sn<i.endSN?(E=T[E.sn+1-i.startSN],this.fragmentTracker.getState(E)!==U&&d.logger.log("SN just loaded, load next one: "+E.sn)):E=null))}E&&(E.encrypted?(d.logger.log("Loading key for "+E.sn+" of ["+i.startSN+" ,"+i.endSN+"],track "+b),this.state=ye,r.trigger(u.default.KEY_LOADING,{frag:E})):(this.fragCurrent=E,(y||this.fragmentTracker.getState(E)===B)&&(d.logger.log("Loading "+E.sn+", cc: "+E.cc+" of ["+i.startSN+" ,"+i.endSN+"],track "+b+", "+(this.loadedmetadata?"currentTime":"nextLoadPosition")+": "+e+", bufferEnd: "+g.toFixed(3)),"initSegment"!==E.sn&&(this.startFragRequested=!0),Object(l.isFiniteNumber)(E.sn)&&(this.nextLoadPosition=E.start+E.duration),r.trigger(u.default.FRAG_LOADING,{frag:E}),this.state=be)))}break;case Te:(t=this.tracks[this.trackId])&&t.details&&(this.state=ve);break;case Ee:var D=tt.now(),x=this.retryDate,I=(a=this.media)&&a.seeking;(!x||D>=x||I)&&(d.logger.log("audioStreamController: retryDate reached, switch back to IDLE state"),this.state=ve);break;case Ae:var O=this.waitingFragment;if(O){var P=O.frag.cc;if(void 0!==this.initPTS[P])this.waitingFragment=null,this.state=be,this.onFragLoaded(O);else if(this.videoTrackCC!==this.waitingVideoCC)d.logger.log("Waiting fragment cc ("+P+") cancelled because video is at cc "+this.videoTrackCC),this.clearWaitingFragment();else{var F=W.bufferInfo(this.mediaBuffer,this.media.currentTime,n.maxBufferHole);de(F.end,n.maxFragLookUpTolerance,O.frag)<0&&(d.logger.log("Waiting fragment cc ("+P+") @ "+O.frag.start+" cancelled because another fragment at "+F.end+" is needed"),this.clearWaitingFragment())}}else this.state=ve}},c.clearWaitingFragment=function(){var e=this.waitingFragment;e&&(this.fragmentTracker.removeFragment(e.frag),this.waitingFragment=null,this.waitingVideoCC=null,this.state=ve)},c.onMediaAttached=function(e){var t=this.media=this.mediaBuffer=e.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvended=this.onMediaEnded.bind(this),t.addEventListener("seeking",this.onvseeking),t.addEventListener("ended",this.onvended);var i=this.config;this.tracks&&i.autoStartLoad&&this.startLoad(i.startPosition)},c.onMediaDetaching=function(){var e=this.media;e&&e.ended&&(d.logger.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0),e&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvseeked=this.onvended=null),this.media=this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1,this.fragmentTracker.removeAllFragments(),this.stopLoad()},c.onAudioTracksUpdated=function(e){d.logger.log("audio tracks updated"),this.tracks=e.audioTracks},c.onAudioTrackSwitching=function(e){var t=!!e.url;this.trackId=e.id,this.fragCurrent=null,this.clearWaitingFragment(),this.state=_e,t?this.setInterval(100):this.demuxer&&(this.demuxer.destroy(),this.demuxer=null),t&&(this.audioSwitch=!0,this.state=ve),this.tick()},c.onAudioTrackLoaded=function(e){var t=e.details,i=e.id,r=this.tracks[i],n=t.totalduration,s=0;if(d.logger.log("track "+i+" loaded ["+t.startSN+","+t.endSN+"],duration:"+n),t.live){var a=r.details;a&&t.fragments.length>0?(ie(a,t),s=t.fragments[0].start,t.PTSKnown?d.logger.log("live audio playlist sliding:"+s.toFixed(3)):d.logger.log("live audio playlist - outdated PTS, unknown sliding")):(t.PTSKnown=!1,d.logger.log("live audio playlist - first load, unknown sliding"))}else t.PTSKnown=!1;if(r.details=t,!this.startFragRequested){if(-1===this.startPosition){var o=t.startTimeOffset;Object(l.isFiniteNumber)(o)?(d.logger.log("start time offset found in playlist, adjust startPosition to "+o),this.startPosition=o):t.live?(this.startPosition=this.computeLivePosition(s,t),d.logger.log("compute startPosition for audio-track to "+this.startPosition)):this.startPosition=0}this.nextLoadPosition=this.startPosition}this.state===Te&&(this.state=ve),this.tick()},c.onKeyLoaded=function(){this.state===ye&&(this.state=ve,this.tick())},c.onFragLoaded=function(e){var t=this.fragCurrent,i=e.frag;if(this.state===be&&t&&"audio"===i.type&&i.level===t.level&&i.sn===t.sn){var r=this.tracks[this.trackId],n=r.details,s=n.totalduration,a=t.level,o=t.sn,l=t.cc,c=this.config.defaultAudioCodec||r.audioCodec||"mp4a.40.2",h=this.stats=e.stats;if("initSegment"===o)this.state=ve,h.tparsed=h.tbuffered=tt.now(),n.initSegment.data=e.payload,this.hls.trigger(u.default.FRAG_BUFFERED,{stats:h,frag:t,id:"audio"}),this.tick();else{this.state=Se,this.appended=!1,this.demuxer||(this.demuxer=new $(this.hls,"audio"));var f=this.initPTS[l],p=n.initSegment?n.initSegment.data:[];void 0!==f?(this.pendingBuffering=!0,d.logger.log("Demuxing "+o+" of ["+n.startSN+" ,"+n.endSN+"],track "+a),this.demuxer.push(e.payload,p,c,null,t,s,!1,f)):(d.logger.log("Unknown video PTS for cc "+l+", waiting for video PTS before demuxing audio frag "+o+" of ["+n.startSN+" ,"+n.endSN+"],track "+a),this.waitingFragment=e,this.waitingVideoCC=this.videoTrackCC,this.state=Ae)}}this.fragLoadError=0},c.onFragParsingInitSegment=function(e){var t=this.fragCurrent,i=e.frag;if(t&&"audio"===e.id&&i.sn===t.sn&&i.level===t.level&&this.state===Se){var r,n=e.tracks;if(n.video&&delete n.video,r=n.audio){r.levelCodec=r.codec,r.id=e.id,this.hls.trigger(u.default.BUFFER_CODECS,n),d.logger.log("audio track:audio,container:"+r.container+",codecs[level/parsed]=["+r.levelCodec+"/"+r.codec+"]");var s=r.initSegment;if(s){var a={type:"audio",data:s,parent:"audio",content:"initSegment"};this.audioSwitch?this.pendingData=[a]:(this.appended=!0,this.pendingBuffering=!0,this.hls.trigger(u.default.BUFFER_APPENDING,a))}this.tick()}}},c.onFragParsingData=function(e){var t=this,i=this.fragCurrent,r=e.frag;if(i&&"audio"===e.id&&"audio"===e.type&&r.sn===i.sn&&r.level===i.level&&this.state===Se){var n=this.trackId,s=this.tracks[n],a=this.hls;Object(l.isFiniteNumber)(e.endPTS)||(e.endPTS=e.startPTS+i.duration,e.endDTS=e.startDTS+i.duration),i.addElementaryStream(g.AUDIO),d.logger.log("parsed "+e.type+",PTS:["+e.startPTS.toFixed(3)+","+e.endPTS.toFixed(3)+"],DTS:["+e.startDTS.toFixed(3)+"/"+e.endDTS.toFixed(3)+"],nb:"+e.nb),te(s.details,i,e.startPTS,e.endPTS);var c=this.media,h=!1;if(this.audioSwitch)if(c&&c.readyState){var f=c.currentTime;d.logger.log("switching audio track : currentTime:"+f),f>=e.startPTS&&(d.logger.log("switching audio track : flushing all audio"),this.state=we,a.trigger(u.default.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"}),h=!0,this.audioSwitch=!1,a.trigger(u.default.AUDIO_TRACK_SWITCHED,{id:n}))}else this.audioSwitch=!1,a.trigger(u.default.AUDIO_TRACK_SWITCHED,{id:n});var p=this.pendingData;if(!p)return d.logger.warn("Apparently attempt to enqueue media payload without codec initialization data upfront"),void a.trigger(u.default.ERROR,{type:o.ErrorTypes.MEDIA_ERROR,details:null,fatal:!0});this.audioSwitch||([e.data1,e.data2].forEach((function(t){t&&t.length&&p.push({type:e.type,data:t,parent:"audio",content:"data"})})),!h&&p.length&&(p.forEach((function(e){t.state===Se&&(t.pendingBuffering=!0,t.hls.trigger(u.default.BUFFER_APPENDING,e))})),this.pendingData=[],this.appended=!0)),this.tick()}},c.onFragParsed=function(e){var t=this.fragCurrent,i=e.frag;t&&"audio"===e.id&&i.sn===t.sn&&i.level===t.level&&this.state===Se&&(this.stats.tparsed=tt.now(),this.state=ke,this._checkAppendedParsed())},c.onBufferReset=function(){this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1},c.onBufferCreated=function(e){var t=e.tracks.audio;t&&(this.mediaBuffer=t.buffer,this.loadedmetadata=!0),e.tracks.video&&(this.videoBuffer=e.tracks.video.buffer)},c.onBufferAppended=function(e){if("audio"===e.parent){var t=this.state;t!==Se&&t!==ke||(this.pendingBuffering=e.pending>0,this._checkAppendedParsed())}},c._checkAppendedParsed=function(){if(!(this.state!==ke||this.appended&&this.pendingBuffering)){var e=this.fragCurrent,t=this.stats,i=this.hls;if(e){this.fragPrevious=e,t.tbuffered=tt.now(),i.trigger(u.default.FRAG_BUFFERED,{stats:t,frag:e,id:"audio"});var r=this.mediaBuffer?this.mediaBuffer:this.media;r&&d.logger.log("audio buffered : "+se.toString(r.buffered)),this.audioSwitch&&this.appended&&(this.audioSwitch=!1,i.trigger(u.default.AUDIO_TRACK_SWITCHED,{id:this.trackId})),this.state=ve}this.tick()}},c.onError=function(e){var t=e.frag;if(!t||"audio"===t.type)switch(e.details){case o.ErrorDetails.FRAG_LOAD_ERROR:case o.ErrorDetails.FRAG_LOAD_TIMEOUT:var i=e.frag;if(i&&"audio"!==i.type)break;if(!e.fatal){var r=this.fragLoadError;r?r++:r=1;var n=this.config;if(r<=n.fragLoadingMaxRetry){this.fragLoadError=r;var s=Math.min(Math.pow(2,r-1)*n.fragLoadingRetryDelay,n.fragLoadingMaxRetryTimeout);d.logger.warn("AudioStreamController: frag loading failed, retry in "+s+" ms"),this.retryDate=tt.now()+s,this.state=Ee}else d.logger.error("AudioStreamController: "+e.details+" reaches max retry, redispatch as fatal ..."),e.fatal=!0,this.state=Le}break;case o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:case o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:case o.ErrorDetails.KEY_LOAD_ERROR:case o.ErrorDetails.KEY_LOAD_TIMEOUT:this.state!==Le&&(this.state=e.fatal?Le:ve,d.logger.warn("AudioStreamController: "+e.details+" while loading frag, now switching to "+this.state+" state ..."));break;case o.ErrorDetails.BUFFER_FULL_ERROR:if("audio"===e.parent&&(this.state===Se||this.state===ke)){var a=this.mediaBuffer,l=this.media.currentTime;if(a&&W.isBuffered(a,l)&&W.isBuffered(a,l+.5)){var c=this.config;c.maxMaxBufferLength>=c.maxBufferLength&&(c.maxMaxBufferLength/=2,d.logger.warn("AudioStreamController: reduce max buffer length to "+c.maxMaxBufferLength+"s")),this.state=ve}else d.logger.warn("AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer"),this.fragCurrent=null,this.state=we,this.hls.trigger(u.default.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:"audio"})}}},c.onBufferFlushed=function(){var e=this,t=this.pendingData;t&&t.length?(d.logger.log("AudioStreamController: appending pending audio data after buffer flushed"),t.forEach((function(t){e.hls.trigger(u.default.BUFFER_APPENDING,t)})),this.appended=!0,this.pendingData=[],this.state=ke):(this.state=ve,this.fragPrevious=null,this.tick())},n=r,(s=[{key:"state",set:function(e){if(this.state!==e){var t=this.state;this._state=e,d.logger.log("audio stream:"+t+"->"+e)}},get:function(){return this._state}}])&&et(n.prototype,s),a&&et(n,a),r}(De),rt=function(){if("undefined"!=typeof window&&window.VTTCue)return window.VTTCue;var e={"":!0,lr:!0,rl:!0},t={start:!0,middle:!0,end:!0,left:!0,right:!0};function i(e){return"string"==typeof e&&!!t[e.toLowerCase()]&&e.toLowerCase()}function r(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)e[r]=i[r]}return e}function n(t,n,s){var a=this,o={enumerable:!0};a.hasBeenReset=!1;var l="",u=!1,d=t,c=n,h=s,f=null,p="",g=!0,m="auto",v="start",_=50,y="middle",b=50,E="middle";Object.defineProperty(a,"id",r({},o,{get:function(){return l},set:function(e){l=""+e}})),Object.defineProperty(a,"pauseOnExit",r({},o,{get:function(){return u},set:function(e){u=!!e}})),Object.defineProperty(a,"startTime",r({},o,{get:function(){return d},set:function(e){if("number"!=typeof e)throw new TypeError("Start time must be set to a number.");d=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"endTime",r({},o,{get:function(){return c},set:function(e){if("number"!=typeof e)throw new TypeError("End time must be set to a number.");c=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"text",r({},o,{get:function(){return h},set:function(e){h=""+e,this.hasBeenReset=!0}})),Object.defineProperty(a,"region",r({},o,{get:function(){return f},set:function(e){f=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"vertical",r({},o,{get:function(){return p},set:function(t){var i=function(t){return"string"==typeof t&&!!e[t.toLowerCase()]&&t.toLowerCase()}(t);if(!1===i)throw new SyntaxError("An invalid or illegal string was specified.");p=i,this.hasBeenReset=!0}})),Object.defineProperty(a,"snapToLines",r({},o,{get:function(){return g},set:function(e){g=!!e,this.hasBeenReset=!0}})),Object.defineProperty(a,"line",r({},o,{get:function(){return m},set:function(e){if("number"!=typeof e&&"auto"!==e)throw new SyntaxError("An invalid number or illegal string was specified.");m=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"lineAlign",r({},o,{get:function(){return v},set:function(e){var t=i(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");v=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"position",r({},o,{get:function(){return _},set:function(e){if(e<0||e>100)throw new Error("Position must be between 0 and 100.");_=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"positionAlign",r({},o,{get:function(){return y},set:function(e){var t=i(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");y=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"size",r({},o,{get:function(){return b},set:function(e){if(e<0||e>100)throw new Error("Size must be between 0 and 100.");b=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"align",r({},o,{get:function(){return E},set:function(e){var t=i(e);if(!t)throw new SyntaxError("An invalid or illegal string was specified.");E=t,this.hasBeenReset=!0}})),a.displayState=void 0}return n.prototype.getCueAsHTML=function(){return window.WebVTT.convertCueToDOMTree(window,this.text)},n}(),nt=function(){return{decode:function(e){if(!e)return"";if("string"!=typeof e)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}}};function st(){this.window=window,this.state="INITIAL",this.buffer="",this.decoder=new nt,this.regionList=[]}function at(){this.values=Object.create(null)}function ot(e,t,i,r){var n=r?e.split(r):[e];for(var s in n)if("string"==typeof n[s]){var a=n[s].split(i);2===a.length&&t(a[0],a[1])}}at.prototype={set:function(e,t){this.get(e)||""===t||(this.values[e]=t)},get:function(e,t,i){return i?this.has(e)?this.values[e]:t[i]:this.has(e)?this.values[e]:t},has:function(e){return e in this.values},alt:function(e,t,i){for(var r=0;r<i.length;++r)if(t===i[r]){this.set(e,t);break}},integer:function(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))},percent:function(e,t){return!!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(t=parseFloat(t))>=0&&t<=100)&&(this.set(e,t),!0)}};var lt=new rt(0,0,0),ut="middle"===lt.align?"middle":"center";function dt(e,t,i){var r=e;function n(){var t=function(e){function t(e,t,i,r){return 3600*(0|e)+60*(0|t)+(0|i)+(0|r)/1e3}var i=e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return i?i[3]?t(i[1],i[2],i[3].replace(":",""),i[4]):i[1]>59?t(i[1],i[2],0,i[4]):t(0,i[1],i[2],i[4]):null}(e);if(null===t)throw new Error("Malformed timestamp: "+r);return e=e.replace(/^[^\sa-zA-Z-]+/,""),t}function s(){e=e.replace(/^\s+/,"")}if(s(),t.startTime=n(),s(),"--\x3e"!==e.substr(0,3))throw new Error("Malformed time stamp (time stamps must be separated by '--\x3e'): "+r);e=e.substr(3),s(),t.endTime=n(),s(),function(e,t){var r=new at;ot(e,(function(e,t){switch(e){case"region":for(var n=i.length-1;n>=0;n--)if(i[n].id===t){r.set(e,i[n].region);break}break;case"vertical":r.alt(e,t,["rl","lr"]);break;case"line":var s=t.split(","),a=s[0];r.integer(e,a),r.percent(e,a)&&r.set("snapToLines",!1),r.alt(e,a,["auto"]),2===s.length&&r.alt("lineAlign",s[1],["start",ut,"end"]);break;case"position":s=t.split(","),r.percent(e,s[0]),2===s.length&&r.alt("positionAlign",s[1],["start",ut,"end","line-left","line-right","auto"]);break;case"size":r.percent(e,t);break;case"align":r.alt(e,t,["start",ut,"end","left","right"])}}),/:/,/\s/),t.region=r.get("region",null),t.vertical=r.get("vertical","");var n=r.get("line","auto");"auto"===n&&-1===lt.line&&(n=-1),t.line=n,t.lineAlign=r.get("lineAlign","start"),t.snapToLines=r.get("snapToLines",!0),t.size=r.get("size",100),t.align=r.get("align",ut);var s=r.get("position","auto");"auto"===s&&50===lt.position&&(s="start"===t.align||"left"===t.align?0:"end"===t.align||"right"===t.align?100:50),t.position=s}(e,t)}function ct(e){return e.replace(/<br(?: \/)?>/gi,"\n")}st.prototype={parse:function(e){var t=this;function i(){var e=t.buffer,i=0;for(e=ct(e);i<e.length&&"\r"!==e[i]&&"\n"!==e[i];)++i;var r=e.substr(0,i);return"\r"===e[i]&&++i,"\n"===e[i]&&++i,t.buffer=e.substr(i),r}e&&(t.buffer+=t.decoder.decode(e,{stream:!0}));try{var r;if("INITIAL"===t.state){if(!/\r\n|\n/.test(t.buffer))return this;var n=(r=i()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);if(!n||!n[0])throw new Error("Malformed WebVTT signature.");t.state="HEADER"}for(var s=!1;t.buffer;){if(!/\r\n|\n/.test(t.buffer))return this;switch(s?s=!1:r=i(),t.state){case"HEADER":/:/.test(r)?ot(r,(function(e,t){}),/:/):r||(t.state="ID");continue;case"NOTE":r||(t.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(r)){t.state="NOTE";break}if(!r)continue;if(t.cue=new rt(0,0,""),t.state="CUE",-1===r.indexOf("--\x3e")){t.cue.id=r;continue}case"CUE":try{dt(r,t.cue,t.regionList)}catch(e){t.cue=null,t.state="BADCUE";continue}t.state="CUETEXT";continue;case"CUETEXT":var a=-1!==r.indexOf("--\x3e");if(!r||a&&(s=!0)){t.oncue&&t.oncue(t.cue),t.cue=null,t.state="ID";continue}t.cue.text&&(t.cue.text+="\n"),t.cue.text+=r;continue;case"BADCUE":r||(t.state="ID");continue}}}catch(e){"CUETEXT"===t.state&&t.cue&&t.oncue&&t.oncue(t.cue),t.cue=null,t.state="INITIAL"===t.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{if(this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new Error("Malformed WebVTT signature.")}catch(e){throw e}return this.onflush&&this.onflush(),this}};var ht=st;function ft(e,t,i,r){for(var n,s,a,o,l,u=[],d=window.VTTCue||TextTrackCue,c=0;c<r.rows.length;c++)if(a=!0,o=0,l="",!(n=r.rows[c]).isEmpty()){for(var h=0;h<n.chars.length;h++)n.chars[h].uchar.match(/\s/)&&a?o++:(l+=n.chars[h].uchar,a=!1);n.cueStartTime=t,t===i&&(i+=1e-4),s=new d(t,i,ct(l.trim())),o>=16?o--:o++,navigator.userAgent.match(/Firefox\//)?s.line=c+1:s.line=c>7?c-2:c+1,s.align="left",s.position=Math.max(0,Math.min(100,o/32*100)),u.push(s),e&&e.addCue(s)}return u}var pt,gt={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,128:174,129:176,130:189,131:191,132:8482,133:162,134:163,135:9834,136:224,137:32,138:232,139:226,140:234,141:238,142:244,143:251,144:193,145:201,146:211,147:218,148:220,149:252,150:8216,151:161,152:42,153:8217,154:9473,155:169,156:8480,157:8226,158:8220,159:8221,160:192,161:194,162:199,163:200,164:202,165:203,166:235,167:206,168:207,169:239,170:212,171:217,172:249,173:219,174:171,175:187,176:195,177:227,178:205,179:204,180:236,181:210,182:242,183:213,184:245,185:123,186:125,187:92,188:94,189:95,190:124,191:8764,192:196,193:228,194:214,195:246,196:223,197:165,198:164,199:9475,200:197,201:229,202:216,203:248,204:9487,205:9491,206:9495,207:9499},mt=function(e){var t=e;return gt.hasOwnProperty(e)&&(t=gt[e]),String.fromCharCode(t)},vt={17:1,18:3,21:5,22:7,23:9,16:11,19:12,20:14},_t={17:2,18:4,21:6,22:8,23:10,19:13,20:15},yt={25:1,26:3,29:5,30:7,31:9,24:11,27:12,28:14},bt={25:2,26:4,29:6,30:8,31:10,27:13,28:15},Et=["white","green","blue","cyan","red","yellow","magenta","black","transparent"];!function(e){e[e.ERROR=0]="ERROR",e[e.TEXT=1]="TEXT",e[e.WARNING=2]="WARNING",e[e.INFO=2]="INFO",e[e.DEBUG=3]="DEBUG",e[e.DATA=3]="DATA"}(pt||(pt={}));var Tt=function(){function e(){this.time=null,this.verboseLevel=pt.ERROR}return e.prototype.log=function(e,t){this.verboseLevel>=e&&d.logger.log(this.time+" ["+e+"] "+t)},e}(),St=function(e){for(var t=[],i=0;i<e.length;i++)t.push(e[i].toString(16));return t},kt=function(){function e(e,t,i,r,n){this.foreground=void 0,this.underline=void 0,this.italics=void 0,this.background=void 0,this.flash=void 0,this.foreground=e||"white",this.underline=t||!1,this.italics=i||!1,this.background=r||"black",this.flash=n||!1}var t=e.prototype;return t.reset=function(){this.foreground="white",this.underline=!1,this.italics=!1,this.background="black",this.flash=!1},t.setStyles=function(e){for(var t=["foreground","underline","italics","background","flash"],i=0;i<t.length;i++){var r=t[i];e.hasOwnProperty(r)&&(this[r]=e[r])}},t.isDefault=function(){return"white"===this.foreground&&!this.underline&&!this.italics&&"black"===this.background&&!this.flash},t.equals=function(e){return this.foreground===e.foreground&&this.underline===e.underline&&this.italics===e.italics&&this.background===e.background&&this.flash===e.flash},t.copy=function(e){this.foreground=e.foreground,this.underline=e.underline,this.italics=e.italics,this.background=e.background,this.flash=e.flash},t.toString=function(){return"color="+this.foreground+", underline="+this.underline+", italics="+this.italics+", background="+this.background+", flash="+this.flash},e}(),wt=function(){function e(e,t,i,r,n,s){this.uchar=void 0,this.penState=void 0,this.uchar=e||" ",this.penState=new kt(t,i,r,n,s)}var t=e.prototype;return t.reset=function(){this.uchar=" ",this.penState.reset()},t.setChar=function(e,t){this.uchar=e,this.penState.copy(t)},t.setPenState=function(e){this.penState.copy(e)},t.equals=function(e){return this.uchar===e.uchar&&this.penState.equals(e.penState)},t.copy=function(e){this.uchar=e.uchar,this.penState.copy(e.penState)},t.isEmpty=function(){return" "===this.uchar&&this.penState.isDefault()},e}(),Rt=function(){function e(e){this.chars=void 0,this.pos=void 0,this.currPenState=void 0,this.cueStartTime=void 0,this.logger=void 0,this.chars=[];for(var t=0;t<100;t++)this.chars.push(new wt);this.logger=e,this.pos=0,this.currPenState=new kt}var t=e.prototype;return t.equals=function(e){for(var t=!0,i=0;i<100;i++)if(!this.chars[i].equals(e.chars[i])){t=!1;break}return t},t.copy=function(e){for(var t=0;t<100;t++)this.chars[t].copy(e.chars[t])},t.isEmpty=function(){for(var e=!0,t=0;t<100;t++)if(!this.chars[t].isEmpty()){e=!1;break}return e},t.setCursor=function(e){this.pos!==e&&(this.pos=e),this.pos<0?(this.logger.log(pt.DEBUG,"Negative cursor position "+this.pos),this.pos=0):this.pos>100&&(this.logger.log(pt.DEBUG,"Too large cursor position "+this.pos),this.pos=100)},t.moveCursor=function(e){var t=this.pos+e;if(e>1)for(var i=this.pos+1;i<t+1;i++)this.chars[i].setPenState(this.currPenState);this.setCursor(t)},t.backSpace=function(){this.moveCursor(-1),this.chars[this.pos].setChar(" ",this.currPenState)},t.insertChar=function(e){e>=144&&this.backSpace();var t=mt(e);this.pos>=100?this.logger.log(pt.ERROR,"Cannot insert "+e.toString(16)+" ("+t+") at position "+this.pos+". Skipping it!"):(this.chars[this.pos].setChar(t,this.currPenState),this.moveCursor(1))},t.clearFromPos=function(e){var t;for(t=e;t<100;t++)this.chars[t].reset()},t.clear=function(){this.clearFromPos(0),this.pos=0,this.currPenState.reset()},t.clearToEndOfRow=function(){this.clearFromPos(this.pos)},t.getTextString=function(){for(var e=[],t=!0,i=0;i<100;i++){var r=this.chars[i].uchar;" "!==r&&(t=!1),e.push(r)}return t?"":e.join("")},t.setPenStyles=function(e){this.currPenState.setStyles(e),this.chars[this.pos].setPenState(this.currPenState)},e}(),Lt=function(){function e(e){this.rows=void 0,this.currRow=void 0,this.nrRollUpRows=void 0,this.lastOutputScreen=void 0,this.logger=void 0,this.rows=[];for(var t=0;t<15;t++)this.rows.push(new Rt(e));this.logger=e,this.currRow=14,this.nrRollUpRows=null,this.lastOutputScreen=null,this.reset()}var t=e.prototype;return t.reset=function(){for(var e=0;e<15;e++)this.rows[e].clear();this.currRow=14},t.equals=function(e){for(var t=!0,i=0;i<15;i++)if(!this.rows[i].equals(e.rows[i])){t=!1;break}return t},t.copy=function(e){for(var t=0;t<15;t++)this.rows[t].copy(e.rows[t])},t.isEmpty=function(){for(var e=!0,t=0;t<15;t++)if(!this.rows[t].isEmpty()){e=!1;break}return e},t.backSpace=function(){this.rows[this.currRow].backSpace()},t.clearToEndOfRow=function(){this.rows[this.currRow].clearToEndOfRow()},t.insertChar=function(e){this.rows[this.currRow].insertChar(e)},t.setPen=function(e){this.rows[this.currRow].setPenStyles(e)},t.moveCursor=function(e){this.rows[this.currRow].moveCursor(e)},t.setCursor=function(e){this.logger.log(pt.INFO,"setCursor: "+e),this.rows[this.currRow].setCursor(e)},t.setPAC=function(e){this.logger.log(pt.INFO,"pacData = "+JSON.stringify(e));var t=e.row-1;if(this.nrRollUpRows&&t<this.nrRollUpRows-1&&(t=this.nrRollUpRows-1),this.nrRollUpRows&&this.currRow!==t){for(var i=0;i<15;i++)this.rows[i].clear();var r=this.currRow+1-this.nrRollUpRows,n=this.lastOutputScreen;if(n){var s=n.rows[r].cueStartTime,a=this.logger.time;if(s&&null!==a&&s<a)for(var o=0;o<this.nrRollUpRows;o++)this.rows[t-this.nrRollUpRows+o+1].copy(n.rows[r+o])}}this.currRow=t;var l=this.rows[this.currRow];if(null!==e.indent){var u=e.indent,d=Math.max(u-1,0);l.setCursor(e.indent),e.color=l.chars[d].penState.foreground}var c={foreground:e.color,underline:e.underline,italics:e.italics,background:"black",flash:!1};this.setPen(c)},t.setBkgData=function(e){this.logger.log(pt.INFO,"bkgData = "+JSON.stringify(e)),this.backSpace(),this.setPen(e),this.insertChar(32)},t.setRollUpRows=function(e){this.nrRollUpRows=e},t.rollUp=function(){if(null!==this.nrRollUpRows){this.logger.log(pt.TEXT,this.getDisplayText());var e=this.currRow+1-this.nrRollUpRows,t=this.rows.splice(e,1)[0];t.clear(),this.rows.splice(this.currRow,0,t),this.logger.log(pt.INFO,"Rolling up")}else this.logger.log(pt.DEBUG,"roll_up but nrRollUpRows not set yet")},t.getDisplayText=function(e){e=e||!1;for(var t=[],i="",r=-1,n=0;n<15;n++){var s=this.rows[n].getTextString();s&&(r=n+1,e?t.push("Row "+r+": '"+s+"'"):t.push(s.trim()))}return t.length>0&&(i=e?"["+t.join(" | ")+"]":t.join("\n")),i},t.getTextAndFormat=function(){return this.rows},e}(),At=function(){function e(e,t,i){this.chNr=void 0,this.outputFilter=void 0,this.mode=void 0,this.verbose=void 0,this.displayedMemory=void 0,this.nonDisplayedMemory=void 0,this.lastOutputScreen=void 0,this.currRollUpRow=void 0,this.writeScreen=void 0,this.cueStartTime=void 0,this.logger=void 0,this.chNr=e,this.outputFilter=t,this.mode=null,this.verbose=0,this.displayedMemory=new Lt(i),this.nonDisplayedMemory=new Lt(i),this.lastOutputScreen=new Lt(i),this.currRollUpRow=this.displayedMemory.rows[14],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null,this.logger=i}var t=e.prototype;return t.reset=function(){this.mode=null,this.displayedMemory.reset(),this.nonDisplayedMemory.reset(),this.lastOutputScreen.reset(),this.outputFilter.reset(),this.currRollUpRow=this.displayedMemory.rows[14],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null},t.getHandler=function(){return this.outputFilter},t.setHandler=function(e){this.outputFilter=e},t.setPAC=function(e){this.writeScreen.setPAC(e)},t.setBkgData=function(e){this.writeScreen.setBkgData(e)},t.setMode=function(e){e!==this.mode&&(this.mode=e,this.logger.log(pt.INFO,"MODE="+e),"MODE_POP-ON"===this.mode?this.writeScreen=this.nonDisplayedMemory:(this.writeScreen=this.displayedMemory,this.writeScreen.reset()),"MODE_ROLL-UP"!==this.mode&&(this.displayedMemory.nrRollUpRows=null,this.nonDisplayedMemory.nrRollUpRows=null),this.mode=e)},t.insertChars=function(e){for(var t=0;t<e.length;t++)this.writeScreen.insertChar(e[t]);var i=this.writeScreen===this.displayedMemory?"DISP":"NON_DISP";this.logger.log(pt.INFO,i+": "+this.writeScreen.getDisplayText(!0)),"MODE_PAINT-ON"!==this.mode&&"MODE_ROLL-UP"!==this.mode||(this.logger.log(pt.TEXT,"DISPLAYED: "+this.displayedMemory.getDisplayText(!0)),this.outputDataUpdate())},t.ccRCL=function(){this.logger.log(pt.INFO,"RCL - Resume Caption Loading"),this.setMode("MODE_POP-ON")},t.ccBS=function(){this.logger.log(pt.INFO,"BS - BackSpace"),"MODE_TEXT"!==this.mode&&(this.writeScreen.backSpace(),this.writeScreen===this.displayedMemory&&this.outputDataUpdate())},t.ccAOF=function(){},t.ccAON=function(){},t.ccDER=function(){this.logger.log(pt.INFO,"DER- Delete to End of Row"),this.writeScreen.clearToEndOfRow(),this.outputDataUpdate()},t.ccRU=function(e){this.logger.log(pt.INFO,"RU("+e+") - Roll Up"),this.writeScreen=this.displayedMemory,this.setMode("MODE_ROLL-UP"),this.writeScreen.setRollUpRows(e)},t.ccFON=function(){this.logger.log(pt.INFO,"FON - Flash On"),this.writeScreen.setPen({flash:!0})},t.ccRDC=function(){this.logger.log(pt.INFO,"RDC - Resume Direct Captioning"),this.setMode("MODE_PAINT-ON")},t.ccTR=function(){this.logger.log(pt.INFO,"TR"),this.setMode("MODE_TEXT")},t.ccRTD=function(){this.logger.log(pt.INFO,"RTD"),this.setMode("MODE_TEXT")},t.ccEDM=function(){this.logger.log(pt.INFO,"EDM - Erase Displayed Memory"),this.displayedMemory.reset(),this.outputDataUpdate(!0)},t.ccCR=function(){this.logger.log(pt.INFO,"CR - Carriage Return"),this.writeScreen.rollUp(),this.outputDataUpdate(!0)},t.ccENM=function(){this.logger.log(pt.INFO,"ENM - Erase Non-displayed Memory"),this.nonDisplayedMemory.reset()},t.ccEOC=function(){if(this.logger.log(pt.INFO,"EOC - End Of Caption"),"MODE_POP-ON"===this.mode){var e=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory,this.nonDisplayedMemory=e,this.writeScreen=this.nonDisplayedMemory,this.logger.log(pt.TEXT,"DISP: "+this.displayedMemory.getDisplayText())}this.outputDataUpdate(!0)},t.ccTO=function(e){this.logger.log(pt.INFO,"TO("+e+") - Tab Offset"),this.writeScreen.moveCursor(e)},t.ccMIDROW=function(e){var t={flash:!1};if(t.underline=e%2==1,t.italics=e>=46,t.italics)t.foreground="white";else{var i=Math.floor(e/2)-16;t.foreground=["white","green","blue","cyan","red","yellow","magenta"][i]}this.logger.log(pt.INFO,"MIDROW: "+JSON.stringify(t)),this.writeScreen.setPen(t)},t.outputDataUpdate=function(e){void 0===e&&(e=!1);var t=this.logger.time;null!==t&&this.outputFilter&&(null!==this.cueStartTime||this.displayedMemory.isEmpty()?this.displayedMemory.equals(this.lastOutputScreen)||(this.outputFilter.newCue(this.cueStartTime,t,this.lastOutputScreen),e&&this.outputFilter.dispatchCue&&this.outputFilter.dispatchCue(),this.cueStartTime=this.displayedMemory.isEmpty()?null:t):this.cueStartTime=t,this.lastOutputScreen.copy(this.displayedMemory))},t.cueSplitAtTime=function(e){this.outputFilter&&(this.displayedMemory.isEmpty()||(this.outputFilter.newCue&&this.outputFilter.newCue(this.cueStartTime,e,this.displayedMemory),this.cueStartTime=e))},e}();function Ct(e,t,i){i.a=e,i.b=t}function Dt(e,t,i){return i.a===e&&i.b===t}var xt=function(){function e(e,t,i){this.channels=void 0,this.currentChannel=0,this.cmdHistory=void 0,this.logger=void 0;var r=new Tt;this.channels=[null,new At(e,t,r),new At(e+1,i,r)],this.cmdHistory={a:null,b:null},this.logger=r}var t=e.prototype;return t.getHandler=function(e){return this.channels[e].getHandler()},t.setHandler=function(e,t){this.channels[e].setHandler(t)},t.addData=function(e,t){var i,r,n,s=!1;this.logger.time=e;for(var a=0;a<t.length;a+=2)if(r=127&t[a],n=127&t[a+1],0!==r||0!==n){if(this.logger.log(pt.DATA,"["+St([t[a],t[a+1]])+"] -> ("+St([r,n])+")"),(i=this.parseCmd(r,n))||(i=this.parseMidrow(r,n)),i||(i=this.parsePAC(r,n)),i||(i=this.parseBackgroundAttributes(r,n)),!i&&(s=this.parseChars(r,n))){var o=this.currentChannel;o&&o>0?this.channels[o].insertChars(s):this.logger.log(pt.WARNING,"No channel found yet. TEXT-MODE?")}i||s||this.logger.log(pt.WARNING,"Couldn't parse cleaned data "+St([r,n])+" orig: "+St([t[a],t[a+1]]))}},t.parseCmd=function(e,t){var i=this.cmdHistory;if(!((20===e||28===e||21===e||29===e)&&t>=32&&t<=47||(23===e||31===e)&&t>=33&&t<=35))return!1;if(Dt(e,t,i))return Ct(null,null,i),this.logger.log(pt.DEBUG,"Repeated command ("+St([e,t])+") is dropped"),!0;var r=20===e||21===e||23===e?1:2,n=this.channels[r];return 20===e||21===e||28===e||29===e?32===t?n.ccRCL():33===t?n.ccBS():34===t?n.ccAOF():35===t?n.ccAON():36===t?n.ccDER():37===t?n.ccRU(2):38===t?n.ccRU(3):39===t?n.ccRU(4):40===t?n.ccFON():41===t?n.ccRDC():42===t?n.ccTR():43===t?n.ccRTD():44===t?n.ccEDM():45===t?n.ccCR():46===t?n.ccENM():47===t&&n.ccEOC():n.ccTO(t-32),Ct(e,t,i),this.currentChannel=r,!0},t.parseMidrow=function(e,t){var i=0;if((17===e||25===e)&&t>=32&&t<=47){if((i=17===e?1:2)!==this.currentChannel)return this.logger.log(pt.ERROR,"Mismatch channel in midrow parsing"),!1;var r=this.channels[i];return!!r&&(r.ccMIDROW(t),this.logger.log(pt.DEBUG,"MIDROW ("+St([e,t])+")"),!0)}return!1},t.parsePAC=function(e,t){var i,r=this.cmdHistory;if(!((e>=17&&e<=23||e>=25&&e<=31)&&t>=64&&t<=127||(16===e||24===e)&&t>=64&&t<=95))return!1;if(Dt(e,t,r))return Ct(null,null,r),!0;var n=e<=23?1:2;i=t>=64&&t<=95?1===n?vt[e]:yt[e]:1===n?_t[e]:bt[e];var s=this.channels[n];return!!s&&(s.setPAC(this.interpretPAC(i,t)),Ct(e,t,r),this.currentChannel=n,!0)},t.interpretPAC=function(e,t){var i=t,r={color:null,italics:!1,indent:null,underline:!1,row:e};return i=t>95?t-96:t-64,r.underline=1==(1&i),i<=13?r.color=["white","green","blue","cyan","red","yellow","magenta","white"][Math.floor(i/2)]:i<=15?(r.italics=!0,r.color="white"):r.indent=4*Math.floor((i-16)/2),r},t.parseChars=function(e,t){var i,r=null,n=null;if(e>=25?(i=2,n=e-8):(i=1,n=e),n>=17&&n<=19){var s=t;s=17===n?t+80:18===n?t+112:t+144,this.logger.log(pt.INFO,"Special char '"+mt(s)+"' in channel "+i),r=[s]}else e>=32&&e<=127&&(r=0===t?[e]:[e,t]);if(r){var a=St(r);this.logger.log(pt.DEBUG,"Char codes =  "+a.join(",")),Ct(e,t,this.cmdHistory)}return r},t.parseBackgroundAttributes=function(e,t){var i;if(!((16===e||24===e)&&t>=32&&t<=47||(23===e||31===e)&&t>=45&&t<=47))return!1;var r={};16===e||24===e?(i=Math.floor((t-32)/2),r.background=Et[i],t%2==1&&(r.background=r.background+"_semi")):45===t?r.background="transparent":(r.foreground="black",47===t&&(r.underline=!0));var n=e<=23?1:2;return this.channels[n].setBkgData(r),Ct(e,t,this.cmdHistory),!0},t.reset=function(){for(var e=0;e<Object.keys(this.channels).length;e++){var t=this.channels[e];t&&t.reset()}this.cmdHistory={a:null,b:null}},t.cueSplitAtTime=function(e){for(var t=0;t<this.channels.length;t++){var i=this.channels[t];i&&i.cueSplitAtTime(e)}},e}(),It=function(){function e(e,t){this.timelineController=void 0,this.cueRanges=[],this.trackName=void 0,this.startTime=null,this.endTime=null,this.screen=null,this.timelineController=e,this.trackName=t}var t=e.prototype;return t.dispatchCue=function(){null!==this.startTime&&(this.timelineController.addCues(this.trackName,this.startTime,this.endTime,this.screen,this.cueRanges),this.startTime=null)},t.newCue=function(e,t,i){(null===this.startTime||this.startTime>e)&&(this.startTime=e),this.endTime=t,this.screen=i,this.timelineController.createCaptionsTrack(this.trackName)},t.reset=function(){this.cueRanges=[]},e}(),Ot=function(e,t,i){return e.substr(i||0,t.length)===t},Pt=function(e){for(var t=5381,i=e.length;i;)t=33*t^e.charCodeAt(--i);return(t>>>0).toString()},Ft={parse:function(e,t,i,r,n,s){var a,o=Object(Me.utf8ArrayToStr)(new Uint8Array(e)).trim().replace(/\r\n|\n\r|\n|\r/g,"\n").split("\n"),u="00:00.000",d=0,c=0,h=0,f=[],p=!0,g=!1,m=new ht;m.oncue=function(e){var t=i[r],n=i.ccOffset;t&&t.new&&(void 0!==c?n=i.ccOffset=t.start:function(e,t,i){var r=e[t],n=e[r.prevCC];if(!n||!n.new&&r.new)return e.ccOffset=e.presentationOffset=r.start,void(r.new=!1);for(;n&&n.new;)e.ccOffset+=r.start-n.start,r.new=!1,n=e[(r=n).prevCC];e.presentationOffset=i}(i,r,h)),h&&(n=h-i.presentationOffset),g&&(e.startTime+=n-c,e.endTime+=n-c),e.id=Pt(e.startTime.toString())+Pt(e.endTime.toString())+Pt(e.text),e.text=decodeURIComponent(encodeURIComponent(e.text)),e.endTime>0&&f.push(e)},m.onparsingerror=function(e){a=e},m.onflush=function(){a&&s?s(a):n(f)},o.forEach((function(e){if(p){if(Ot(e,"X-TIMESTAMP-MAP=")){p=!1,g=!0,e.substr(16).split(",").forEach((function(e){Ot(e,"LOCAL:")?u=e.substr(6):Ot(e,"MPEGTS:")&&(d=parseInt(e.substr(7)))}));try{t+(9e4*i[r].start||0)<0&&(t+=8589934592),d-=t,c=function(e){var t=parseInt(e.substr(-3)),i=parseInt(e.substr(-6,2)),r=parseInt(e.substr(-9,2)),n=e.length>9?parseInt(e.substr(0,e.indexOf(":"))):0;if(!(Object(l.isFiniteNumber)(t)&&Object(l.isFiniteNumber)(i)&&Object(l.isFiniteNumber)(r)&&Object(l.isFiniteNumber)(n)))throw Error("Malformed X-TIMESTAMP-MAP: Local:"+e);return t+=1e3*i,t+=6e4*r,t+=36e5*n}(u)/1e3,h=d/9e4}catch(e){g=!1,a=e}return}""===e&&(p=!1)}m.parse(e+"\n")})),m.flush()}};function Mt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Bt(e,t){return e&&e.label===t.name&&!(e.textTrack1||e.textTrack2)}var Nt=function(e){var t,i;function r(t){var i;if((i=e.call(this,t,u.default.MEDIA_ATTACHING,u.default.MEDIA_DETACHING,u.default.FRAG_PARSING_USERDATA,u.default.FRAG_DECRYPTED,u.default.MANIFEST_LOADING,u.default.MANIFEST_LOADED,u.default.FRAG_LOADED,u.default.INIT_PTS_FOUND)||this).media=null,i.config=void 0,i.enabled=!0,i.Cues=void 0,i.textTracks=[],i.tracks=[],i.initPTS=[],i.unparsedVttFrags=[],i.captionsTracks={},i.nonNativeCaptionsTracks={},i.captionsProperties=void 0,i.cea608Parser1=void 0,i.cea608Parser2=void 0,i.lastSn=-1,i.prevCC=-1,i.vttCCs={ccOffset:0,presentationOffset:0,0:{start:0,prevCC:-1,new:!1}},i.hls=t,i.config=t.config,i.Cues=t.config.cueHandler,i.captionsProperties={textTrack1:{label:i.config.captionsTextTrack1Label,languageCode:i.config.captionsTextTrack1LanguageCode},textTrack2:{label:i.config.captionsTextTrack2Label,languageCode:i.config.captionsTextTrack2LanguageCode},textTrack3:{label:i.config.captionsTextTrack3Label,languageCode:i.config.captionsTextTrack3LanguageCode},textTrack4:{label:i.config.captionsTextTrack4Label,languageCode:i.config.captionsTextTrack4LanguageCode}},i.config.enableCEA708Captions){var r=new It(Mt(i),"textTrack1"),n=new It(Mt(i),"textTrack2"),s=new It(Mt(i),"textTrack3"),a=new It(Mt(i),"textTrack4");i.cea608Parser1=new xt(1,r,n),i.cea608Parser2=new xt(3,s,a)}return i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.addCues=function(e,t,i,r,n){for(var s,a,o,l,d=!1,c=n.length;c--;){var h=n[c],f=(s=h[0],a=h[1],o=t,l=i,Math.min(a,l)-Math.max(s,o));if(f>=0&&(h[0]=Math.min(h[0],t),h[1]=Math.max(h[1],i),d=!0,f/(i-t)>.5))return}if(d||n.push([t,i]),this.config.renderTextTracksNatively)this.Cues.newCue(this.captionsTracks[e],t,i,r);else{var p=this.Cues.newCue(null,t,i,r);this.hls.trigger(u.default.CUES_PARSED,{type:"captions",cues:p,track:e})}},n.onInitPtsFound=function(e){var t=this,i=e.frag,r=e.id,n=e.initPTS,s=this.unparsedVttFrags;"main"===r&&(this.initPTS[i.cc]=n),s.length&&(this.unparsedVttFrags=[],s.forEach((function(e){t.onFragLoaded(e)})))},n.getExistingTrack=function(e){var t=this.media;if(t)for(var i=0;i<t.textTracks.length;i++){var r=t.textTracks[i];if(r[e])return r}return null},n.createCaptionsTrack=function(e){this.config.renderTextTracksNatively?this.createNativeTrack(e):this.createNonNativeTrack(e)},n.createNativeTrack=function(e){if(!this.captionsTracks[e]){var t=this.captionsProperties,i=this.captionsTracks,r=this.media,n=t[e],s=n.label,a=n.languageCode,o=this.getExistingTrack(e);if(o)i[e]=o,Ne(i[e]),Be(i[e],r);else{var l=this.createTextTrack("captions",s,a);l&&(l[e]=!0,i[e]=l)}}},n.createNonNativeTrack=function(e){if(!this.nonNativeCaptionsTracks[e]){var t=this.captionsProperties[e];if(t){var i={_id:e,label:t.label,kind:"captions",default:!!t.media&&!!t.media.default,closedCaptions:t.media};this.nonNativeCaptionsTracks[e]=i,this.hls.trigger(u.default.NON_NATIVE_TEXT_TRACKS_FOUND,{tracks:[i]})}}},n.createTextTrack=function(e,t,i){var r=this.media;if(r)return r.addTextTrack(e,t,i)},n.destroy=function(){e.prototype.destroy.call(this)},n.onMediaAttaching=function(e){this.media=e.media,this._cleanTracks()},n.onMediaDetaching=function(){var e=this.captionsTracks;Object.keys(e).forEach((function(t){Ne(e[t]),delete e[t]})),this.nonNativeCaptionsTracks={}},n.onManifestLoading=function(){this.lastSn=-1,this.prevCC=-1,this.vttCCs={ccOffset:0,presentationOffset:0,0:{start:0,prevCC:-1,new:!1}},this._cleanTracks(),this.tracks=[],this.captionsTracks={},this.nonNativeCaptionsTracks={}},n._cleanTracks=function(){var e=this.media;if(e){var t=e.textTracks;if(t)for(var i=0;i<t.length;i++)Ne(t[i])}},n.onManifestLoaded=function(e){var t=this;if(this.textTracks=[],this.unparsedVttFrags=this.unparsedVttFrags||[],this.initPTS=[],this.cea608Parser1&&this.cea608Parser2&&(this.cea608Parser1.reset(),this.cea608Parser2.reset()),this.config.enableWebVTT){var i=e.subtitles||[],r=this.tracks&&i&&this.tracks.length===i.length;if(this.tracks=e.subtitles||[],this.config.renderTextTracksNatively){var n=this.media?this.media.textTracks:[];this.tracks.forEach((function(e,i){var r;if(i<n.length){for(var s=null,a=0;a<n.length;a++)if(Bt(n[a],e)){s=n[a];break}s&&(r=s)}r||(r=t.createTextTrack("subtitles",e.name,e.lang)),e.default?r.mode=t.hls.subtitleDisplay?"showing":"hidden":r.mode="disabled",t.textTracks.push(r)}))}else if(!r&&this.tracks&&this.tracks.length){var s=this.tracks.map((function(e){return{label:e.name,kind:e.type.toLowerCase(),default:e.default,subtitleTrack:e}}));this.hls.trigger(u.default.NON_NATIVE_TEXT_TRACKS_FOUND,{tracks:s})}}this.config.enableCEA708Captions&&e.captions&&e.captions.forEach((function(e){var i=/(?:CC|SERVICE)([1-4])/.exec(e.instreamId);if(i){var r="textTrack"+i[1],n=t.captionsProperties[r];n&&(n.label=e.name,e.lang&&(n.languageCode=e.lang),n.media=e)}}))},n.onFragLoaded=function(e){var t=e.frag,i=e.payload,r=this.cea608Parser1,n=this.cea608Parser2,s=this.initPTS,a=this.lastSn,o=this.unparsedVttFrags;if("main"===t.type){var d=t.sn;t.sn!==a+1&&r&&n&&(r.reset(),n.reset()),this.lastSn=d}else if("subtitle"===t.type)if(i.byteLength){if(!Object(l.isFiniteNumber)(s[t.cc]))return o.push(e),void(s.length&&this.hls.trigger(u.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t}));var c=t.decryptdata;null!=c&&null!=c.key&&"AES-128"===c.method||this._parseVTTs(t,i)}else this.hls.trigger(u.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:t})},n._parseVTTs=function(e,t){var i=this,r=this.hls,n=this.prevCC,s=this.textTracks,a=this.vttCCs;a[e.cc]||(a[e.cc]={start:e.start,prevCC:n,new:!0},this.prevCC=e.cc),Ft.parse(t,this.initPTS[e.cc],a,e.cc,(function(t){if(i.config.renderTextTracksNatively){var n=s[e.level];if("disabled"===n.mode)return void r.trigger(u.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:e});t.forEach((function(e){if(!n.cues.getCueById(e.id))try{if(n.addCue(e),!n.cues.getCueById(e.id))throw new Error("addCue is failed for: "+e)}catch(i){d.logger.debug("Failed occurred on adding cues: "+i);var t=new window.TextTrackCue(e.startTime,e.endTime,e.text);t.id=e.id,n.addCue(t)}}))}else{var a=i.tracks[e.level].default?"default":"subtitles"+e.level;r.trigger(u.default.CUES_PARSED,{type:"subtitles",cues:t,track:a})}r.trigger(u.default.SUBTITLE_FRAG_PROCESSED,{success:!0,frag:e})}),(function(t){d.logger.log("Failed to parse VTT cue: "+t),r.trigger(u.default.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:e})}))},n.onFragDecrypted=function(e){var t=e.frag,i=e.payload;if("subtitle"===t.type){if(!Object(l.isFiniteNumber)(this.initPTS[t.cc]))return void this.unparsedVttFrags.push(e);this._parseVTTs(t,i)}},n.onFragParsingUserdata=function(e){var t=this.cea608Parser1,i=this.cea608Parser2;if(this.enabled&&t&&i)for(var r=0;r<e.samples.length;r++){var n=e.samples[r].bytes;if(n){var s=this.extractCea608Data(n);t.addData(e.samples[r].pts,s[0]),i.addData(e.samples[r].pts,s[1])}}},n.extractCea608Data=function(e){for(var t=31&e[0],i=2,r=[[],[]],n=0;n<t;n++){var s=e[i++],a=127&e[i++],o=127&e[i++],l=3&s;0===a&&0===o||0!=(4&s)&&(0!==l&&1!==l||(r[l].push(a),r[l].push(o)))}return r},r}(h);function jt(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ut(e){for(var t=[],i=0;i<e.length;i++){var r=e[i];"subtitles"===r.kind&&r.label&&t.push(e[i])}return t}var Gt,Ht=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MEDIA_ATTACHED,u.default.MEDIA_DETACHING,u.default.MANIFEST_LOADED,u.default.SUBTITLE_TRACK_LOADED)||this).tracks=[],i.trackId=-1,i.media=null,i.stopped=!0,i.subtitleDisplay=!0,i.queuedDefaultTrack=null,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,o=r.prototype;return o.destroy=function(){h.prototype.destroy.call(this)},o.onMediaAttached=function(e){var t=this;this.media=e.media,this.media&&(Object(l.isFiniteNumber)(this.queuedDefaultTrack)&&(this.subtitleTrack=this.queuedDefaultTrack,this.queuedDefaultTrack=null),this.trackChangeListener=this._onTextTracksChanged.bind(this),this.useTextTrackPolling=!(this.media.textTracks&&"onchange"in this.media.textTracks),this.useTextTrackPolling?this.subtitlePollingInterval=setInterval((function(){t.trackChangeListener()}),500):this.media.textTracks.addEventListener("change",this.trackChangeListener))},o.onMediaDetaching=function(){this.media&&(this.useTextTrackPolling?clearInterval(this.subtitlePollingInterval):this.media.textTracks.removeEventListener("change",this.trackChangeListener),Object(l.isFiniteNumber)(this.subtitleTrack)&&(this.queuedDefaultTrack=this.subtitleTrack),Ut(this.media.textTracks).forEach((function(e){Ne(e)})),this.subtitleTrack=-1,this.media=null)},o.onManifestLoaded=function(e){var t=this,i=e.subtitles||[];this.tracks=i,this.hls.trigger(u.default.SUBTITLE_TRACKS_UPDATED,{subtitleTracks:i}),i.forEach((function(e){e.default&&(t.media?t.subtitleTrack=e.id:t.queuedDefaultTrack=e.id)}))},o.onSubtitleTrackLoaded=function(e){var t=this,i=e.id,r=e.details,n=this.trackId,s=this.tracks,a=s[n];if(i>=s.length||i!==n||!a||this.stopped)this._clearReloadTimer();else if(d.logger.log("subtitle track "+i+" loaded"),r.live){var o=ne(a.details,r,e.stats.trequest);d.logger.log("Reloading live subtitle playlist in "+o+"ms"),this.timer=setTimeout((function(){t._loadCurrentTrack()}),o)}else this._clearReloadTimer()},o.startLoad=function(){this.stopped=!1,this._loadCurrentTrack()},o.stopLoad=function(){this.stopped=!0,this._clearReloadTimer()},o._clearReloadTimer=function(){this.timer&&(clearTimeout(this.timer),this.timer=null)},o._loadCurrentTrack=function(){var e=this.trackId,t=this.tracks,i=this.hls,r=t[e];e<0||!r||r.details&&!r.details.live||(d.logger.log("Loading subtitle track "+e),i.trigger(u.default.SUBTITLE_TRACK_LOADING,{url:r.url,id:e}))},o._toggleTrackModes=function(e){var t=this.media,i=this.subtitleDisplay,r=this.trackId;if(t){var n=Ut(t.textTracks);if(-1===e)[].slice.call(n).forEach((function(e){e.mode="disabled"}));else{var s=n[r];s&&(s.mode="disabled")}var a=n[e];a&&(a.mode=i?"showing":"hidden")}},o._setSubtitleTrackInternal=function(e){var t=this.hls,i=this.tracks;!Object(l.isFiniteNumber)(e)||e<-1||e>=i.length||(this.trackId=e,d.logger.log("Switching to subtitle track "+e),t.trigger(u.default.SUBTITLE_TRACK_SWITCH,{id:e}),this._loadCurrentTrack())},o._onTextTracksChanged=function(){if(this.media&&this.hls.config.renderTextTracksNatively){for(var e=-1,t=Ut(this.media.textTracks),i=0;i<t.length;i++)if("hidden"===t[i].mode)e=i;else if("showing"===t[i].mode){e=i;break}this.subtitleTrack=e}},n=r,(s=[{key:"subtitleTracks",get:function(){return this.tracks}},{key:"subtitleTrack",get:function(){return this.trackId},set:function(e){this.trackId!==e&&(this._toggleTrackModes(e),this._setSubtitleTrackInternal(e))}}])&&jt(n.prototype,s),a&&jt(n,a),r}(h),Wt=i("./src/crypt/decrypter.js"),Kt=window.performance,Vt=function(e){var t,i;function r(t,i){var r;return(r=e.call(this,t,u.default.MEDIA_ATTACHED,u.default.MEDIA_DETACHING,u.default.ERROR,u.default.KEY_LOADED,u.default.FRAG_LOADED,u.default.SUBTITLE_TRACKS_UPDATED,u.default.SUBTITLE_TRACK_SWITCH,u.default.SUBTITLE_TRACK_LOADED,u.default.SUBTITLE_FRAG_PROCESSED,u.default.LEVEL_UPDATED)||this).fragmentTracker=i,r.config=t.config,r.state=ge,r.tracks=[],r.tracksBuffered=[],r.currentTrackId=-1,r.decrypter=new Wt.default(t,t.config),r.lastAVStart=0,r._onMediaSeeking=r.onMediaSeeking.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r)),r}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n=r.prototype;return n.onSubtitleFragProcessed=function(e){var t=e.frag,i=e.success;if(this.fragPrevious=t,this.state=ve,i){var r=this.tracksBuffered[this.currentTrackId];if(r){for(var n,s=t.start,a=0;a<r.length;a++)if(s>=r[a].start&&s<=r[a].end){n=r[a];break}var o=t.start+t.duration;n?n.end=o:(n={start:s,end:o},r.push(n))}}},n.onMediaAttached=function(e){var t=e.media;this.media=t,t.addEventListener("seeking",this._onMediaSeeking),this.state=ve},n.onMediaDetaching=function(){var e=this;this.media&&(this.media.removeEventListener("seeking",this._onMediaSeeking),this.fragmentTracker.removeAllFragments(),this.currentTrackId=-1,this.tracks.forEach((function(t){e.tracksBuffered[t.id]=[]})),this.media=null,this.state=ge)},n.onError=function(e){var t=e.frag;t&&"subtitle"===t.type&&(this.state=ve)},n.onSubtitleTracksUpdated=function(e){var t=this;d.logger.log("subtitle tracks updated"),this.tracksBuffered=[],this.tracks=e.subtitleTracks,this.tracks.forEach((function(e){t.tracksBuffered[e.id]=[]}))},n.onSubtitleTrackSwitch=function(e){if(this.currentTrackId=e.id,this.tracks&&this.tracks.length&&-1!==this.currentTrackId){var t=this.tracks[this.currentTrackId];t&&t.details&&this.setInterval(500)}else this.clearInterval()},n.onSubtitleTrackLoaded=function(e){var t=e.id,i=e.details,r=this.currentTrackId,n=this.tracks,s=n[r];t>=n.length||t!==r||!s||(i.live&&function(e,t,i){void 0===i&&(i=0);var r=-1;re(e,t,(function(e,t,i){t.start=e.start,r=i}));var n=t.fragments;if(r<0)n.forEach((function(e){e.start+=i}));else for(var s=r+1;s<n.length;s++)n[s].start=n[s-1].start+n[s-1].duration}(s.details,i,this.lastAVStart),s.details=i,this.setInterval(500))},n.onKeyLoaded=function(){this.state===ye&&(this.state=ve)},n.onFragLoaded=function(e){var t=this.fragCurrent,i=e.frag.decryptdata,r=e.frag,n=this.hls;if(this.state===be&&t&&"subtitle"===e.frag.type&&t.sn===e.frag.sn&&e.payload.byteLength>0&&i&&i.key&&"AES-128"===i.method){var s=Kt.now();this.decrypter.decrypt(e.payload,i.key.buffer,i.iv.buffer,(function(e){var t=Kt.now();n.trigger(u.default.FRAG_DECRYPTED,{frag:r,payload:e,stats:{tstart:s,tdecrypt:t}})}))}},n.onLevelUpdated=function(e){var t=e.details.fragments;this.lastAVStart=t.length?t[0].start:0},n.doTick=function(){if(this.media)switch(this.state){case ve:var e=this.config,t=this.currentTrackId,i=this.fragmentTracker,r=this.media,n=this.tracks;if(!n||!n[t]||!n[t].details)break;var s,a=e.maxBufferHole,o=e.maxFragLookUpTolerance,l=Math.min(e.maxBufferLength,e.maxMaxBufferLength),c=W.bufferedInfo(this._getBuffered(),r.currentTime,a),h=c.end,f=c.len,p=n[t].details,g=p.fragments,m=g.length,v=g[m-1].start+g[m-1].duration;if(f>l)return;var _=this.fragPrevious;h<v?(_&&p.hasProgramDateTime&&(s=le(g,_.endProgramDateTime,o)),s||(s=ue(_,g,h,o))):s=g[m-1],s&&s.encrypted?(d.logger.log("Loading key for "+s.sn),this.state=ye,this.hls.trigger(u.default.KEY_LOADING,{frag:s})):s&&i.getState(s)===B&&(this.fragCurrent=s,this.state=be,this.hls.trigger(u.default.FRAG_LOADING,{frag:s}))}else this.state=ve},n.stopLoad=function(){this.lastAVStart=0,e.prototype.stopLoad.call(this)},n._getBuffered=function(){return this.tracksBuffered[this.currentTrackId]||[]},n.onMediaSeeking=function(){this.fragPrevious=null},r}(De);!function(e){e.WIDEVINE="com.widevine.alpha",e.PLAYREADY="com.microsoft.playready"}(Gt||(Gt={}));var qt="undefined"!=typeof window&&window.navigator&&window.navigator.requestMediaKeySystemAccess?window.navigator.requestMediaKeySystemAccess.bind(window.navigator):null;function Yt(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var zt=function(e){var t,i;function r(t){var i;return(i=e.call(this,t,u.default.MEDIA_ATTACHED,u.default.MEDIA_DETACHED,u.default.MANIFEST_PARSED)||this)._widevineLicenseUrl=void 0,i._licenseXhrSetup=void 0,i._emeEnabled=void 0,i._requestMediaKeySystemAccess=void 0,i._drmSystemOptions=void 0,i._config=void 0,i._mediaKeysList=[],i._media=null,i._hasSetMediaKeys=!1,i._requestLicenseFailureCount=0,i.mediaKeysPromise=null,i._onMediaEncrypted=function(e){if(d.logger.log('Media is encrypted using "'+e.initDataType+'" init data type'),!i.mediaKeysPromise)return d.logger.error("Fatal: Media is encrypted but no CDM access or no keys have been requested"),void i.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_KEYS,fatal:!0});var t=function(t){i._media&&(i._attemptSetMediaKeys(t),i._generateRequestWithPreferredKeySession(e.initDataType,e.initData))};i.mediaKeysPromise.then(t).catch(t)},i._config=t.config,i._widevineLicenseUrl=i._config.widevineLicenseUrl,i._licenseXhrSetup=i._config.licenseXhrSetup,i._emeEnabled=i._config.emeEnabled,i._requestMediaKeySystemAccess=i._config.requestMediaKeySystemAccessFunc,i._drmSystemOptions=t.config.drmSystemOptions,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var n,s,a,l=r.prototype;return l.getLicenseServerUrl=function(e){switch(e){case Gt.WIDEVINE:if(!this._widevineLicenseUrl)break;return this._widevineLicenseUrl}throw new Error('no license server URL configured for key-system "'+e+'"')},l._attemptKeySystemAccess=function(e,t,i){var r=this,n=function(e,t,i,r){switch(e){case Gt.WIDEVINE:return function(e,t,i){var r={audioCapabilities:[],videoCapabilities:[]};return e.forEach((function(e){r.audioCapabilities.push({contentType:'audio/mp4; codecs="'+e+'"',robustness:i.audioRobustness||""})})),t.forEach((function(e){r.videoCapabilities.push({contentType:'video/mp4; codecs="'+e+'"',robustness:i.videoRobustness||""})})),[r]}(t,i,r);default:throw new Error("Unknown key-system: "+e)}}(e,t,i,this._drmSystemOptions);d.logger.log("Requesting encrypted media key-system access");var s=this.requestMediaKeySystemAccess(e,n);this.mediaKeysPromise=s.then((function(t){return r._onMediaKeySystemAccessObtained(e,t)})),s.catch((function(t){d.logger.error('Failed to obtain key-system "'+e+'" access:',t)}))},l._onMediaKeySystemAccessObtained=function(e,t){var i=this;d.logger.log('Access for key-system "'+e+'" obtained');var r={mediaKeysSessionInitialized:!1,mediaKeySystemAccess:t,mediaKeySystemDomain:e};this._mediaKeysList.push(r);var n=Promise.resolve().then((function(){return t.createMediaKeys()})).then((function(t){return r.mediaKeys=t,d.logger.log('Media-keys created for key-system "'+e+'"'),i._onMediaKeysCreated(),t}));return n.catch((function(e){d.logger.error("Failed to create media-keys:",e)})),n},l._onMediaKeysCreated=function(){var e=this;this._mediaKeysList.forEach((function(t){t.mediaKeysSession||(t.mediaKeysSession=t.mediaKeys.createSession(),e._onNewMediaKeySession(t.mediaKeysSession))}))},l._onNewMediaKeySession=function(e){var t=this;d.logger.log("New key-system session "+e.sessionId),e.addEventListener("message",(function(i){t._onKeySessionMessage(e,i.message)}),!1)},l._onKeySessionMessage=function(e,t){d.logger.log("Got EME message event, creating license request"),this._requestLicense(t,(function(t){d.logger.log("Received license data (length: "+(t?t.byteLength:t)+"), updating key-session"),e.update(t)}))},l._attemptSetMediaKeys=function(e){if(!this._media)throw new Error("Attempted to set mediaKeys without first attaching a media element");if(!this._hasSetMediaKeys){var t=this._mediaKeysList[0];if(!t||!t.mediaKeys)return d.logger.error("Fatal: Media is encrypted but no CDM access or no keys have been obtained yet"),void this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_KEYS,fatal:!0});d.logger.log("Setting keys for encrypted media"),this._media.setMediaKeys(t.mediaKeys),this._hasSetMediaKeys=!0}},l._generateRequestWithPreferredKeySession=function(e,t){var i=this,r=this._mediaKeysList[0];if(!r)return d.logger.error("Fatal: Media is encrypted but not any key-system access has been obtained yet"),void this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_ACCESS,fatal:!0});if(r.mediaKeysSessionInitialized)d.logger.warn("Key-Session already initialized but requested again");else{var n=r.mediaKeysSession;if(!n)return d.logger.error("Fatal: Media is encrypted but no key-session existing"),void this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_SESSION,fatal:!0});if(!t)return d.logger.warn("Fatal: initData required for generating a key session is null"),void this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_INIT_DATA,fatal:!0});d.logger.log('Generating key-session request for "'+e+'" init data type'),r.mediaKeysSessionInitialized=!0,n.generateRequest(e,t).then((function(){d.logger.debug("Key-session generation succeeded")})).catch((function(e){d.logger.error("Error generating key-session request:",e),i.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_SESSION,fatal:!1})}))}},l._createLicenseXhr=function(e,t,i){var r=new XMLHttpRequest,n=this._licenseXhrSetup;try{if(n)try{n(r,e)}catch(t){r.open("POST",e,!0),n(r,e)}r.readyState||r.open("POST",e,!0)}catch(e){throw new Error("issue setting up KeySystem license XHR "+e)}return r.responseType="arraybuffer",r.onreadystatechange=this._onLicenseRequestReadyStageChange.bind(this,r,e,t,i),r},l._onLicenseRequestReadyStageChange=function(e,t,i,r){switch(e.readyState){case 4:if(200===e.status)this._requestLicenseFailureCount=0,d.logger.log("License request succeeded"),"arraybuffer"!==e.responseType&&d.logger.warn("xhr response type was not set to the expected arraybuffer for license request"),r(e.response);else{if(d.logger.error("License Request XHR failed ("+t+"). Status: "+e.status+" ("+e.statusText+")"),this._requestLicenseFailureCount++,this._requestLicenseFailureCount>3)return void this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0});var n=3-this._requestLicenseFailureCount+1;d.logger.warn("Retrying license request, "+n+" attempts left"),this._requestLicense(i,r)}}},l._generateLicenseRequestChallenge=function(e,t){switch(e.mediaKeySystemDomain){case Gt.WIDEVINE:return t}throw new Error("unsupported key-system: "+e.mediaKeySystemDomain)},l._requestLicense=function(e,t){d.logger.log("Requesting content license for key-system");var i=this._mediaKeysList[0];if(!i)return d.logger.error("Fatal error: Media is encrypted but no key-system access has been obtained yet"),void this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_NO_ACCESS,fatal:!0});try{var r=this.getLicenseServerUrl(i.mediaKeySystemDomain),n=this._createLicenseXhr(r,e,t);d.logger.log("Sending license request to URL: "+r);var s=this._generateLicenseRequestChallenge(i,e);n.send(s)}catch(e){d.logger.error("Failure requesting DRM license: "+e),this.hls.trigger(u.default.ERROR,{type:o.ErrorTypes.KEY_SYSTEM_ERROR,details:o.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0})}},l.onMediaAttached=function(e){if(this._emeEnabled){var t=e.media;this._media=t,t.addEventListener("encrypted",this._onMediaEncrypted)}},l.onMediaDetached=function(){var e=this._media,t=this._mediaKeysList;e&&(e.removeEventListener("encrypted",this._onMediaEncrypted),this._media=null,this._mediaKeysList=[],Promise.all(t.map((function(e){if(e.mediaKeysSession)return e.mediaKeysSession.close().catch((function(){}))}))).then((function(){return e.setMediaKeys(null)})).catch((function(){})))},l.onManifestParsed=function(e){if(this._emeEnabled){var t=e.levels.map((function(e){return e.audioCodec})),i=e.levels.map((function(e){return e.videoCodec}));this._attemptKeySystemAccess(Gt.WIDEVINE,t,i)}},n=r,(s=[{key:"requestMediaKeySystemAccess",get:function(){if(!this._requestMediaKeySystemAccess)throw new Error("No requestMediaKeySystemAccess function configured");return this._requestMediaKeySystemAccess}}])&&Yt(n.prototype,s),a&&Yt(n,a),r}(h);function Xt(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function Qt(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?Xt(Object(i),!0).forEach((function(t){Zt(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):Xt(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function Zt(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var $t=Qt(Qt({autoStartLoad:!0,startPosition:-1,defaultAudioCodec:void 0,debug:!1,capLevelOnFPSDrop:!1,capLevelToPlayerSize:!1,initialLiveManifestSize:1,maxBufferLength:30,maxBufferSize:6e7,maxBufferHole:.5,lowBufferWatchdogPeriod:.5,highBufferWatchdogPeriod:3,nudgeOffset:.1,nudgeMaxRetry:3,maxFragLookUpTolerance:.25,liveSyncDurationCount:3,liveMaxLatencyDurationCount:1/0,liveSyncDuration:void 0,liveMaxLatencyDuration:void 0,liveDurationInfinity:!1,liveBackBufferLength:1/0,maxMaxBufferLength:600,enableWorker:!0,enableSoftwareAES:!0,manifestLoadingTimeOut:1e4,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1e3,manifestLoadingMaxRetryTimeout:64e3,startLevel:void 0,levelLoadingTimeOut:1e4,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1e3,levelLoadingMaxRetryTimeout:64e3,fragLoadingTimeOut:2e4,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1e3,fragLoadingMaxRetryTimeout:64e3,startFragPrefetch:!1,fpsDroppedMonitoringPeriod:5e3,fpsDroppedMonitoringThreshold:.2,appendErrorMaxRetry:3,loader:Ze,fLoader:void 0,pLoader:void 0,xhrSetup:void 0,licenseXhrSetup:void 0,abrController:Ke,bufferController:qe,capLevelController:ze,fpsController:Qe,stretchShortVideoTrack:!1,maxAudioFramesDrift:1,forceKeyFrameOnDiscontinuity:!0,abrEwmaFastLive:3,abrEwmaSlowLive:9,abrEwmaFastVoD:3,abrEwmaSlowVoD:9,abrEwmaDefaultEstimate:5e5,abrBandWidthFactor:.95,abrBandWidthUpFactor:.7,abrMaxWithRealBitrate:!1,maxStarvationDelay:4,maxLoadingDelay:4,minAutoBitrate:0,emeEnabled:!1,widevineLicenseUrl:void 0,drmSystemOptions:{},requestMediaKeySystemAccessFunc:qt,testBandwidth:!0},{cueHandler:r,enableCEA708Captions:!0,enableWebVTT:!0,captionsTextTrack1Label:"English",captionsTextTrack1LanguageCode:"en",captionsTextTrack2Label:"Spanish",captionsTextTrack2LanguageCode:"es",captionsTextTrack3Label:"Unknown CC",captionsTextTrack3LanguageCode:"",captionsTextTrack4Label:"Unknown CC",captionsTextTrack4LanguageCode:"",renderTextTracksNatively:!0}),{},{subtitleStreamController:Vt,subtitleTrackController:Ht,timelineController:Nt,audioStreamController:it,audioTrackController:Je,emeController:zt});function Jt(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function ei(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?Jt(Object(i),!0).forEach((function(t){ti(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):Jt(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function ti(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function ii(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ri(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ni(e,t,i){return t&&ri(e.prototype,t),i&&ri(e,i),e}var si=function(e){var t,i;function r(t){var i;void 0===t&&(t={}),(i=e.call(this)||this).config=void 0,i._autoLevelCapping=void 0,i.abrController=void 0,i.capLevelController=void 0,i.levelController=void 0,i.streamController=void 0,i.networkControllers=void 0,i.audioTrackController=void 0,i.subtitleTrackController=void 0,i.emeController=void 0,i.coreComponents=void 0,i.media=null,i.url=null;var n=r.DefaultConfig;if((t.liveSyncDurationCount||t.liveMaxLatencyDurationCount)&&(t.liveSyncDuration||t.liveMaxLatencyDuration))throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");i.config=ei(ei({},n),t);var s=ii(i).config;if(void 0!==s.liveMaxLatencyDurationCount&&s.liveMaxLatencyDurationCount<=s.liveSyncDurationCount)throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');if(void 0!==s.liveMaxLatencyDuration&&(void 0===s.liveSyncDuration||s.liveMaxLatencyDuration<=s.liveSyncDuration))throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');Object(d.enableLogs)(s.debug),i._autoLevelCapping=-1;var a=i.abrController=new s.abrController(ii(i)),o=new s.bufferController(ii(i)),l=i.capLevelController=new s.capLevelController(ii(i)),u=new s.fpsController(ii(i)),c=new P(ii(i)),h=new F(ii(i)),f=new M(ii(i)),p=new je(ii(i)),g=i.levelController=new Fe(ii(i)),m=new G(ii(i)),v=[g,i.streamController=new Oe(ii(i),m)],_=s.audioStreamController;_&&v.push(new _(ii(i),m)),i.networkControllers=v;var y=[c,h,f,a,o,l,u,p,m];if(_=s.audioTrackController){var b=new _(ii(i));i.audioTrackController=b,y.push(b)}if(_=s.subtitleTrackController){var E=new _(ii(i));i.subtitleTrackController=E,v.push(E)}if(_=s.emeController){var T=new _(ii(i));i.emeController=T,y.push(T)}return(_=s.subtitleStreamController)&&v.push(new _(ii(i),m)),(_=s.timelineController)&&y.push(new _(ii(i))),i.coreComponents=y,i}i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,r.isSupported=function(){return function(){var e=Y();if(!e)return!1;var t=self.SourceBuffer||self.WebKitSourceBuffer,i=e&&"function"==typeof e.isTypeSupported&&e.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'),r=!t||t.prototype&&"function"==typeof t.prototype.appendBuffer&&"function"==typeof t.prototype.remove;return!!i&&!!r}()},ni(r,null,[{key:"version",get:function(){return"0.14.12"}},{key:"Events",get:function(){return u.default}},{key:"ErrorTypes",get:function(){return o.ErrorTypes}},{key:"ErrorDetails",get:function(){return o.ErrorDetails}},{key:"DefaultConfig",get:function(){return r.defaultConfig?r.defaultConfig:$t},set:function(e){r.defaultConfig=e}}]);var n=r.prototype;return n.destroy=function(){d.logger.log("destroy"),this.trigger(u.default.DESTROYING),this.detachMedia(),this.coreComponents.concat(this.networkControllers).forEach((function(e){e.destroy()})),this.url=null,this.removeAllListeners(),this._autoLevelCapping=-1},n.attachMedia=function(e){d.logger.log("attachMedia"),this.media=e,this.trigger(u.default.MEDIA_ATTACHING,{media:e})},n.detachMedia=function(){d.logger.log("detachMedia"),this.trigger(u.default.MEDIA_DETACHING),this.media=null},n.loadSource=function(e){e=a.buildAbsoluteURL(window.location.href,e,{alwaysNormalize:!0}),d.logger.log("loadSource:"+e),this.url=e,this.trigger(u.default.MANIFEST_LOADING,{url:e})},n.startLoad=function(e){void 0===e&&(e=-1),d.logger.log("startLoad("+e+")"),this.networkControllers.forEach((function(t){t.startLoad(e)}))},n.stopLoad=function(){d.logger.log("stopLoad"),this.networkControllers.forEach((function(e){e.stopLoad()}))},n.swapAudioCodec=function(){d.logger.log("swapAudioCodec"),this.streamController.swapAudioCodec()},n.recoverMediaError=function(){d.logger.log("recoverMediaError");var e=this.media;this.detachMedia(),e&&this.attachMedia(e)},n.removeLevel=function(e,t){void 0===t&&(t=0),this.levelController.removeLevel(e,t)},ni(r,[{key:"levels",get:function(){return this.levelController.levels}},{key:"currentLevel",get:function(){return this.streamController.currentLevel},set:function(e){d.logger.log("set currentLevel:"+e),this.loadLevel=e,this.streamController.immediateLevelSwitch()}},{key:"nextLevel",get:function(){return this.streamController.nextLevel},set:function(e){d.logger.log("set nextLevel:"+e),this.levelController.manualLevel=e,this.streamController.nextLevelSwitch()}},{key:"loadLevel",get:function(){return this.levelController.level},set:function(e){d.logger.log("set loadLevel:"+e),this.levelController.manualLevel=e}},{key:"nextLoadLevel",get:function(){return this.levelController.nextLoadLevel},set:function(e){this.levelController.nextLoadLevel=e}},{key:"firstLevel",get:function(){return Math.max(this.levelController.firstLevel,this.minAutoLevel)},set:function(e){d.logger.log("set firstLevel:"+e),this.levelController.firstLevel=e}},{key:"startLevel",get:function(){return this.levelController.startLevel},set:function(e){d.logger.log("set startLevel:"+e),-1!==e&&(e=Math.max(e,this.minAutoLevel)),this.levelController.startLevel=e}},{key:"capLevelToPlayerSize",set:function(e){var t=!!e;t!==this.config.capLevelToPlayerSize&&(t?this.capLevelController.startCapping():(this.capLevelController.stopCapping(),this.autoLevelCapping=-1,this.streamController.nextLevelSwitch()),this.config.capLevelToPlayerSize=t)}},{key:"autoLevelCapping",get:function(){return this._autoLevelCapping},set:function(e){d.logger.log("set autoLevelCapping:"+e),this._autoLevelCapping=e}},{key:"bandwidthEstimate",get:function(){var e=this.abrController._bwEstimator;return e?e.getEstimate():NaN}},{key:"autoLevelEnabled",get:function(){return-1===this.levelController.manualLevel}},{key:"manualLevel",get:function(){return this.levelController.manualLevel}},{key:"minAutoLevel",get:function(){for(var e=this.levels,t=this.config.minAutoBitrate,i=e?e.length:0,r=0;r<i;r++)if((e[r].realBitrate?Math.max(e[r].realBitrate,e[r].bitrate):e[r].bitrate)>t)return r;return 0}},{key:"maxAutoLevel",get:function(){var e=this.levels,t=this.autoLevelCapping;return-1===t&&e&&e.length?e.length-1:t}},{key:"nextAutoLevel",get:function(){return Math.min(Math.max(this.abrController.nextAutoLevel,this.minAutoLevel),this.maxAutoLevel)},set:function(e){this.abrController.nextAutoLevel=Math.max(this.minAutoLevel,e)}},{key:"audioTracks",get:function(){var e=this.audioTrackController;return e?e.audioTracks:[]}},{key:"audioTrack",get:function(){var e=this.audioTrackController;return e?e.audioTrack:-1},set:function(e){var t=this.audioTrackController;t&&(t.audioTrack=e)}},{key:"liveSyncPosition",get:function(){return this.streamController.liveSyncPosition}},{key:"subtitleTracks",get:function(){var e=this.subtitleTrackController;return e?e.subtitleTracks:[]}},{key:"subtitleTrack",get:function(){var e=this.subtitleTrackController;return e?e.subtitleTrack:-1},set:function(e){var t=this.subtitleTrackController;t&&(t.subtitleTrack=e)}},{key:"subtitleDisplay",get:function(){var e=this.subtitleTrackController;return!!e&&e.subtitleDisplay},set:function(e){var t=this.subtitleTrackController;t&&(t.subtitleDisplay=e)}}]),r}(X);si.defaultConfig=void 0},"./src/polyfills/number.js":
/*!*********************************!*\
  !*** ./src/polyfills/number.js ***!
  \*********************************/
/*! exports provided: isFiniteNumber, MAX_SAFE_INTEGER */function(e,t,i){"use strict";i.r(t),i.d(t,"isFiniteNumber",(function(){return r})),i.d(t,"MAX_SAFE_INTEGER",(function(){return n}));var r=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},n=Number.MAX_SAFE_INTEGER||9007199254740991},"./src/utils/get-self-scope.js":
/*!*************************************!*\
  !*** ./src/utils/get-self-scope.js ***!
  \*************************************/
/*! exports provided: getSelfScope */function(e,t,i){"use strict";function r(){return"undefined"==typeof window?self:window}i.r(t),i.d(t,"getSelfScope",(function(){return r}))},"./src/utils/logger.js":
/*!*****************************!*\
  !*** ./src/utils/logger.js ***!
  \*****************************/
/*! exports provided: enableLogs, logger */function(e,t,i){"use strict";i.r(t),i.d(t,"enableLogs",(function(){return d})),i.d(t,"logger",(function(){return c}));var r=i(/*! ./get-self-scope */"./src/utils/get-self-scope.js");function n(){}var s={trace:n,debug:n,log:n,warn:n,info:n,error:n},a=s;function o(e,t){return t="["+e+"] > "+t}var l=Object(r.getSelfScope)();function u(e){var t=l.console[e];return t?function(){for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];r[0]&&(r[0]=o(e,r[0])),t.apply(l.console,r)}:n}var d=function(e){if(l.console&&!0===e||"object"==typeof e){!function(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),r=1;r<t;r++)i[r-1]=arguments[r];i.forEach((function(t){a[t]=e[t]?e[t].bind(e):u(t)}))}(e,"debug","log","info","warn","error");try{a.log()}catch(e){a=s}}else a=s},c=a}}).default},e.exports=r())},function(e,t,i){"use strict";(function(e){var r=i(5),n=i(6),s=setTimeout;function a(e){return Boolean(e&&void 0!==e.length)}function o(){}function l(e){if(!(this instanceof l))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],p(e,this)}function u(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,l._immediateFn((function(){var i=1===e._state?t.onFulfilled:t.onRejected;if(null!==i){var r;try{r=i(e._value)}catch(e){return void c(t.promise,e)}d(t.promise,r)}else(1===e._state?d:c)(t.promise,e._value)}))):e._deferreds.push(t)}function d(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var i=t.then;if(t instanceof l)return e._state=3,e._value=t,void h(e);if("function"==typeof i)return void p((r=i,n=t,function(){r.apply(n,arguments)}),e)}e._state=1,e._value=t,h(e)}catch(t){c(e,t)}var r,n}function c(e,t){e._state=2,e._value=t,h(e)}function h(e){2===e._state&&0===e._deferreds.length&&l._immediateFn((function(){e._handled||l._unhandledRejectionFn(e._value)}));for(var t=0,i=e._deferreds.length;t<i;t++)u(e,e._deferreds[t]);e._deferreds=null}function f(e,t,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=i}function p(e,t){var i=!1;try{e((function(e){i||(i=!0,d(t,e))}),(function(e){i||(i=!0,c(t,e))}))}catch(e){if(i)return;i=!0,c(t,e)}}l.prototype.catch=function(e){return this.then(null,e)},l.prototype.then=function(e,t){var i=new this.constructor(o);return u(this,new f(e,t,i)),i},l.prototype.finally=r.a,l.all=function(e){return new l((function(t,i){if(!a(e))return i(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var n=r.length;function s(e,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var o=a.then;if("function"==typeof o)return void o.call(a,(function(t){s(e,t)}),i)}r[e]=a,0==--n&&t(r)}catch(e){i(e)}}for(var o=0;o<r.length;o++)s(o,r[o])}))},l.allSettled=n.a,l.resolve=function(e){return e&&"object"==typeof e&&e.constructor===l?e:new l((function(t){t(e)}))},l.reject=function(e){return new l((function(t,i){i(e)}))},l.race=function(e){return new l((function(t,i){if(!a(e))return i(new TypeError("Promise.race accepts an array"));for(var r=0,n=e.length;r<n;r++)l.resolve(e[r]).then(t,i)}))},l._immediateFn="function"==typeof e&&function(t){e(t)}||function(e){s(e,0)},l._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},t.a=l}).call(this,i(9).setImmediate)},function(e,t,i){"use strict";var r=function(){function e(){this.browser=this._getUserAgent(),this.detailBrowser=this._getDetailUa()}return e.prototype._getUserAgent=function(){var e=window.navigator.userAgent.toLowerCase(),t=window.navigator.appVersion.toLowerCase();if(e.indexOf("msie")>-1||e.indexOf("trident")>-1)return-1!=t.indexOf("msie 6.")?"ie6":-1!=t.indexOf("msie 7.")?"ie7":-1!=t.indexOf("msie 8.")?"ie8":-1!=t.indexOf("msie 9.")?"ie9":-1!=t.indexOf("msie 10.")?"ie10":"IE";if(e.indexOf("edge")>-1)return"edge";if(e.indexOf("firefox")>-1)return"Firefox";if(e.indexOf("opera")>-1)return"opera";if(e.indexOf("netscape")>-1)return"netscape";if(e.indexOf("chrome")>-1)return"Chrome";if(e.indexOf("safari")>-1&&-1==e.indexOf("mobile")){return parseInt(/version\/(\d+)/.exec(t)[1])>=9?"Safari":"oldSafari"}return"Unknown"},e.prototype._getDetailUa=function(){var e=navigator.userAgent.toLowerCase(),t=[],i={browser:{name:"",version:"",engine:""},os:{name:"",version:""},isIE:!1,isEdge:!1,isFirefox:!1,isSafari:!1,isChrome:!1,isOpera:!1,isSP:!1,isTablet:!1};return e.match(/msie/)||e.match(/trident/)?(i.browser.name="Internet Explorer",(t=e.match(/(msie|rv:?)\s?([\d\.]+)/))&&t.length>0&&t[2]&&(i.browser.version=t[2]),i.isIE=!0):e.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i)?(i.browser.name="Edge",(t=e.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/([0-9\.]+)/))&&t.length>0&&t[1]&&(i.browser.version=t[1]),i.isEdge=!0):e.match(/opera|opr/)?(i.browser.name="Opera",e.match(/version\//)?(t=e.match(/version\/([\d\.]+)/))&&t.length>0&&t[1]&&(i.browser.version=t[1]):(t=e.match(/(opera(\s|\/)|opr\/)([\d\.]+)/))&&t.length>0&&t[3]&&(i.browser.version=t[3]),i.isOpera=!0):e.match(/firefox/)?(i.browser.name="Firefox",(t=e.match(/firefox\/([\d\.]+)/))&&t.length>0&&t[1]&&(i.browser.version=t[1]),i.isFirefox=!0):e.match(/chrome/)?(i.browser.name="Chrome",(t=e.match(/chrome\/([\d\.]+)/))&&t.length>0&&t[1]&&(i.browser.version=t[1]),i.isChrome=!0):e.match(/safari/)?(i.browser.name="Safari",(t=e.match(/version\/([\d\.]+)/))&&t.length>0&&t[1]&&(i.browser.version=t[1]),i.isSafari=!0):i.browser.name="Unknown",e.match(/trident/)?i.browser.engine="Trident":e.match(/blink/)?i.browser.engine="Blink":e.match(/webkit/)?i.browser.engine="Webkit":e.match(/khtml/)?i.browser.engine="KHTML":e.match(/gecko/)?i.browser.engine="Gecko":e.match(/presto/)?i.browser.engine="Presto":i.browser.engine="Unknown",e.match(/windows phone/)?i.os.name="Windows Phone":e.match(/windows/)?(i.os.name="Windows",(t=e.match(/windows nt ([\d\.]+)/))&&t.length>0&&t[1]&&(t[1].match(/10\.[0-9]/)?i.os.version=t[1]:"6.3"===t[1]?i.os.version="8.1":"6.2"===t[1]?i.os.version="8.0":"6.1"===t[1]||"6.1"===t[1]?i.os.version="7":"6.0"===t[1]?i.os.version="Vista":"5.2"===t[1]||"5.1"===t[1]?i.os.version="XP":"5.0"===t[1]&&(i.os.version="2000")),(t=e.match(/windows ([\d]+)/))&&t.length>0&&t[1]&&("98"===t[1]&&e.match(/9x/)?i.os.version="Me":"98"===t[1]?i.os.version="98":"95"===t[1]?i.os.version="95":"3.1"===t[1]&&(i.os.version="3.1"))):e.match(/ios|iphone|ipad|ipod/)?(i.os.name="iOS",(t=e.match(/((iphone)? os) ([\d_]+)/))&&t.length>0&&t[3]&&(i.os.version=t[3].replace(/_/g,"."))):e.match(/mac os|mac_powerpc|macintosh/)?i.os.name="Macintosh":e.match(/android/)?(i.os.name="Android",(t=e.match(/android ([\d\.]+)/))&&t.length>0&&t[1]&&(i.os.version=t[1])):e.match(/linux/)?i.os.name="Linux":e.match(/firefox/)&&e.match(/mobile|tablet/)?i.os.name="Firefox OS":i.os.name="Unknown",e.match(/iphone/)||e.match(/ipod/)||e.match(/android/)&&e.match(/mobile/)||e.match(/windows phone/)?i.isSP=!0:(e.match(/ipad/)||e.match(/android/)&&!e.match(/mobile/))&&(i.isTablet=!0),i},e}();t.a=r},function(e,t,i){"use strict";var r=i(1),n=function(){function e(){}return e.get=function(t,i,n){return void 0===i&&(i=3),void 0===n&&(n=!1),new r.a((function(r,s){var a=new XMLHttpRequest;a.withCredentials=n,a.open("GET",t,!0),a.timeout=0,a.onload=function(){4===a.readyState&&200===a.status?r(a.response):--i>0?e.get(t,i).then(r).catch(s):s(new Error(a.statusText))},a.onerror=function(){--i>0?e.get(t,i).then(r).catch(s):s(new Error(a.statusText))},a.send(null)}))},e.post=function(t,i,n){return void 0===i&&(i=3),void 0===n&&(n=!1),new r.a((function(r,s){var a=new XMLHttpRequest;a.withCredentials=n,a.open("POST",t,!0),a.timeout=0,a.onload=function(){4===a.readyState&&200===a.status?r(a.response):--i>0?e.post(t,i).then(r).catch(s):s(new Error(a.statusText))},a.onerror=function(){--i>0?e.post(t,i).then(r).catch(s):s(new Error(a.statusText))},a.send(null)}))},e}();t.a=n},function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},function(e,t,i){"use strict";t.a=function(e){var t=this.constructor;return this.then((function(i){return t.resolve(e()).then((function(){return i}))}),(function(i){return t.resolve(e()).then((function(){return t.reject(i)}))}))}},function(e,t,i){"use strict";t.a=function(e){return new this((function(t,i){if(!e||void 0===e.length)return i(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var n=r.length;function s(e,i){if(i&&("object"==typeof i||"function"==typeof i)){var a=i.then;if("function"==typeof a)return void a.call(i,(function(t){s(e,t)}),(function(i){r[e]={status:"rejected",reason:i},0==--n&&t(r)}))}r[e]={status:"fulfilled",value:i},0==--n&&t(r)}for(var a=0;a<r.length;a++)s(a,r[a])}))}},function(e,t,i){"use strict";var r,n=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},s=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),a=[];function o(e){for(var t=-1,i=0;i<a.length;i++)if(a[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},r=[],n=0;n<e.length;n++){var s=e[n],l=t.base?s[0]+t.base:s[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var c=o(d),h={css:s[1],media:s[2],sourceMap:s[3]};-1!==c?(a[c].references++,a[c].updater(h)):a.push({identifier:d,updater:m(h,t),references:1}),r.push(d)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var n=i.nc;n&&(r.nonce=n)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=s(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var d,c=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function h(e,t,i,r){var n=i?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,n);else{var s=document.createTextNode(n),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(s,a[t]):e.appendChild(s)}}function f(e,t,i){var r=i.css,n=i.media,s=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),s&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,g=0;function m(e,t){var i,r,n;if(t.singleton){var s=g++;i=p||(p=u(t)),r=h.bind(null,i,s,!1),n=h.bind(null,i,s,!0)}else i=u(t),r=f.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<i.length;r++){var n=o(i[r]);a[n].references--}for(var s=l(e,t),u=0;u<i.length;u++){var d=o(i[u]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}i=s}}}},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",r=e[3];if(!r)return i;if(t&&"function"==typeof btoa){var n=(a=r,o=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(l," */")),s=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([n]).join("\n")}var a,o,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,r){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(r)for(var s=0;s<this.length;s++){var a=this[s][0];null!=a&&(n[a]=!0)}for(var o=0;o<e.length;o++){var l=[].concat(e[o]);r&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t,i){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,n=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(n.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new s(n.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},i(10),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,i(4))},function(e,t,i){(function(e,t){!function(e,i){"use strict";if(!e.setImmediate){var r,n,s,a,o,l=1,u={},d=!1,c=e.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(e);h=h&&h.setTimeout?h:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,i=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=i,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){p(e.data)},r=function(e){s.port2.postMessage(e)}):c&&"onreadystatechange"in c.createElement("script")?(n=c.documentElement,r=function(e){var t=c.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,n.removeChild(t),t=null},n.appendChild(t)}):r=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",o=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",o,!1):e.attachEvent("onmessage",o),r=function(t){e.postMessage(a+t,"*")}),h.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),i=0;i<t.length;i++)t[i]=arguments[i+1];var n={callback:e,args:t};return u[l]=n,r(l),l++},h.clearImmediate=f}function f(e){delete u[e]}function p(e){if(d)setTimeout(p,0,e);else{var t=u[e];if(t){d=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(void 0,i)}}(t)}finally{f(e),d=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,i(4),i(11))},function(e,t){var i,r,n=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(e){if(i===setTimeout)return setTimeout(e,0);if((i===s||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:s}catch(e){i=s}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,u=[],d=!1,c=-1;function h(){d&&l&&(d=!1,l.length?u=l.concat(u):c=-1,u.length&&f())}function f(){if(!d){var e=o(h);d=!0;for(var t=u.length;t;){for(l=u,u=[];++c<t;)l&&l[c].run();c=-1,t=u.length}l=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];u.push(new p(e,t)),1!==u.length||d||o(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=g,n.addListener=g,n.once=g,n.off=g,n.removeListener=g,n.removeAllListeners=g,n.emit=g,n.prependListener=g,n.prependOnceListener=g,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},,function(e,t,i){var r=i(7),n=i(23);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var s={insert:"head",singleton:!1};r(n,s);e.exports=n.locals||{}},,,function(e,t,i){"use strict";i.r(t);i(18);var r=i(2),n=(i(20),i(1)),s=function(){function e(){var e=this;this._seekbarThumbnailBox=document.createElement("div"),this._seekbarThumbnailBox.classList.add("jsp-seekbar-thumbnail-box"),this._seekbarThumbnailImage=document.createElement("img"),this._seekbarThumbnailImage.classList.add("jsp-seekbar-thumbnail-image"),this._seekbarThumbnailBox.appendChild(this._seekbarThumbnailImage),this.getThumbneilInfo().then((function(t){e._thumbnailInfo=t,e._seekbarThumbnailBox.style.width=String(e._thumbnailInfo.width)+"px",e._seekbarThumbnailBox.style.height=String(e._thumbnailInfo.height)+"px"}))}return e.prototype.getThumbneilInfo=function(){return new n.a((function(e,t){e({urls:function(){for(var e=[],t=0;t<45;t++)e.push("https://ssl-cache.stream.ne.jp/web05/demo05/jsplayer/seekbar_thumbnail/"+(t+1)+".png");return e}(),width:150,height:84,tile:{row:3,col:20,percent:10}})}))},e.prototype.setThumbnail=function(e,t){var i=Math.floor(t/(e*(this._thumbnailInfo.tile.percent/100))),r=this._thumbnailInfo.urls[i];r&&(this._seekbarThumbnailImage.src=r)},e.prototype.setThumbnailPosition=function(e,t){this._seekbarThumbnailBox.style.transform="translate("+e+"px, "+t+"px)"},Object.defineProperty(e.prototype,"seekbarThumbnailBox",{get:function(){return this._seekbarThumbnailBox},enumerable:!1,configurable:!0}),e}(),a=["0.25","0.5","0.75","1.0","1.25","1.5","1.75","2.0"],o='<svg class="jsp-pause-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><rect x="4" y="3" width="3.5" height="14"/><rect x="12.5" y="3" width="3.5" height="14"/></svg>',l='<svg class="jsp-play-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M16.68,9.45,5,2.09a.63.63,0,0,0-1,.55V17.36a.63.63,0,0,0,1,.55l11.73-7.36A.63.63,0,0,0,16.68,9.45Z"/></svg>',u=function(){function e(e,t){this._isSeeking=!1,this._isSeekedPlay=!0,this._isVolumeChanging=!1,this._currentTime=0,this._duration=255,this._seekPosition={positionX:0,percent:0},this._volumePosition={positionX:0,percent:0},this._isActiveTimerStarted=!1,this._isLoadingRemove=!0,this._isTouched=!1,this._seekbarThumbnail=new s,this._ua=new r.a,this._platform=this._ua.detailBrowser,this._settings=e,this._videoWrapper=t,this._targetElement=document.getElementById(this._settings.target),this._videoCover=document.createElement("div"),this._videoCover.classList.add("jsp-video-cover"),this._videoCover.classList.add("controller"),this._content=document.getElementById("jsp-content_"+this._settings.baseID),this._videoElement=this._videoWrapper.getVideoElement(),this._content.appendChild(this._videoCover),this._settings.poster&&this.setPoster(this._settings.poster),"width"in this._settings?this._targetElement.style.width=this._settings.width+"px":this._targetElement.style.width="100%","height"in this._settings?this._targetElement.style.height=this._settings.height+"px":this._targetElement.style.height="100%","live"===this._settings.mode||this._platform.isEdge&&"dvr"===this._settings.mode?(this._targetElement.classList.add("live-mode"),this._targetElement.classList.remove("dvr-mode")):"dvr"===this._settings.mode&&(this._targetElement.classList.add("dvr-mode"),this._targetElement.classList.remove("live-mode")),this._targetElement.classList.add("first"),this._targetElement.classList.add("paused"),this._targetElement.classList.add("jsp-waiting-ready"),this._platform.isSP||this._platform.isTablet?this._targetElement.classList.add("mobile"):this._targetElement.classList.add("pc"),this._touchOrClickEvent=this._targetElement.classList.contains("pc")?"click":"touchend",this._bigPlayButton=document.createElement("button"),this._bigPlayButton.classList.add("jsp-big-play-button"),this._bigPlayButton.innerHTML=l+o,this._bigPlayButton.classList.add("controller"),this._fastSeekBackButton=document.createElement("button"),this._fastSeekBackButton.classList.add("jsp-fast-seek-back-button"),this._fastSeekBackButton.classList.add("controller"),this._fastSeekBackButton.innerHTML='<svg class="jsp-fast-rewind-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.63,10.27l6.79,5.65a.35.35,0,0,0,.58-.27V4.35a.35.35,0,0,0-.58-.27L9.63,9.73A.35.35,0,0,0,9.63,10.27Z"/><path d="M2.13,10.27l6.79,5.65a.35.35,0,0,0,.58-.27V4.35a.35.35,0,0,0-.58-.27L2.13,9.73A.35.35,0,0,0,2.13,10.27Z"/></svg>',this._fastSeekForwordButton=document.createElement("button"),this._fastSeekForwordButton.classList.add("jsp-fast-seek-forword-button"),this._fastSeekForwordButton.classList.add("controller"),this._fastSeekForwordButton.innerHTML='<svg class="jsp-fast-forward-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M10.37,9.73,3.58,4.08A.35.35,0,0,0,3,4.35v11.3a.35.35,0,0,0,.58.27l6.79-5.65A.35.35,0,0,0,10.37,9.73Z"/><path d="M17.37,9.73,10.58,4.08a.35.35,0,0,0-.58.27v11.3a.35.35,0,0,0,.58.27l6.79-5.65A.35.35,0,0,0,17.37,9.73Z"/></svg>';var i=document.createElement("div");i.setAttribute("class","jsp-fast-seek-back-text"),i.innerText="10秒",this._fastSeekBackButton.appendChild(i);var n=document.createElement("div");n.setAttribute("class","jsp-fast-seek-forword-text"),n.innerText="10秒",this._fastSeekForwordButton.appendChild(n);var a=document.createElement("div");a.setAttribute("class","jsp-button-ring");var u=document.createElement("div");u.setAttribute("class","jsp-button-ring");var d=document.createElement("div");d.setAttribute("class","jsp-button-ring"),this._bigPlayButton.appendChild(a),this._fastSeekBackButton.appendChild(u),this._fastSeekForwordButton.appendChild(d),this._spinner=document.createElement("div"),this._spinner.setAttribute("class","jsp-animation-circle");for(var c=1;c<=12;c++){var h=document.createElement("div");h.classList.add("jsp-animation-circle"+c.toString()),h.classList.add("jsp-animation-circle-child"),this._spinner.appendChild(h)}this._controlsBase=document.createElement("div"),this._controlsBase.classList.add("jsp-control-base"),this._controlsBase.classList.add("controller"),this._playControl=document.createElement("button"),this._playControl.classList.add("jsp-play-control"),this._playControl.innerHTML=l+o,this._seekBase=document.createElement("div"),this._seekBase.classList.add("jsp-seek-base"),this._seekRail=document.createElement("div"),this._seekRail.classList.add("jsp-seek-rail"),this._seekInnerRail=document.createElement("div"),this._seekInnerRail.classList.add("jsp-seek-inner-rail"),this._seekThumb=document.createElement("div"),this._seekThumb.classList.add("jsp-seek-thumb"),this._mouseDisplay=document.createElement("div"),this._mouseDisplay.classList.add("jsp-mouse-display"),this._volumeWrapper=document.createElement("div"),this._volumeWrapper.setAttribute("class","jsp-volume-wrapper"),this._volumeButton=document.createElement("button"),this._volumeButton.setAttribute("class","jsp-volume-button"),this._volumeButton.innerHTML='<svg class="jsp-volume-up-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><polygon points="10.04 3.04 5.31 6.85 2 6.85 2 13.19 5.31 13.19 10.04 17 10.04 3.04"/><path d="M11.79,7.4a2.56,2.56,0,1,1,0,5.12Z"/><path d="M11.79,3V5.46a4.52,4.52,0,0,1,2.73.9l0,0a4.47,4.47,0,0,1,0,7.15l0,0-.22.15h0a4.51,4.51,0,0,1-2.48.73v2.46A7,7,0,1,0,11.79,3Z"/></svg><svg class="jsp-volume-off-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M14.55,6.39A4.48,4.48,0,0,1,16.33,10a4.31,4.31,0,0,1-.2,1.3L18.08,13a6.78,6.78,0,0,0,.72-3,7,7,0,0,0-7-7V5.46a4.52,4.52,0,0,1,2.73.9Z"/><path d="M3.53,3,2,4.69,4.41,6.85H2v6.34H5.31L10,17V11.9l2.73,2.46a4.46,4.46,0,0,1-1,.1v2.46a7.12,7.12,0,0,0,3.06-.7l2.42,2.18,1.53-1.69Z"/><path d="M11.83,7.4l2.52,2.26A2.57,2.57,0,0,0,11.83,7.4Z"/><polygon points="10.04 5.79 10.04 3.04 8.42 4.34 10.04 5.79"/></svg>',this._volumeBase=document.createElement("div"),this._volumeBase.setAttribute("class","jsp-volume-base"),this._volumeRail=document.createElement("div"),this._volumeRail.classList.add("jsp-volume-rail"),this._volumeInnerRail=document.createElement("div"),this._volumeInnerRail.classList.add("jsp-volume-inner-rail"),this._volumeThumb=document.createElement("div"),this._volumeThumb.classList.add("jsp-volume-thumb"),this._remainingTime=document.createElement("div"),this._remainingTime.classList.add("jsp-remaining-time"),this._settingsButton=this._createElementWithClassName("button","jsp-settings-button"),this._settingsBase=this._createElementWithClassName("div","jsp-settings-base"),this._settingsButton.innerHTML='<svg class="jsp-settings-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M18.23,12.53l-2-1.61a7,7,0,0,0,.07-.92,7,7,0,0,0-.07-.92l2-1.61a.53.53,0,0,0,.21-.7L17,4.23a.51.51,0,0,0-.71-.17l-2.4,1a6.17,6.17,0,0,0-1.57-.92L12,1.54a.52.52,0,0,0-.5-.54H8.55a.52.52,0,0,0-.5.54L7.69,4.12A6.17,6.17,0,0,0,6.12,5l-2.4-1A.51.51,0,0,0,3,4.23L1.56,6.77a.53.53,0,0,0,.21.7l2,1.61a7,7,0,0,0-.07.92,7,7,0,0,0,.07.92l-2,1.61a.53.53,0,0,0-.21.7L3,15.77a.51.51,0,0,0,.71.17l2.4-1a6.17,6.17,0,0,0,1.57.92l.36,2.58a.52.52,0,0,0,.5.54h2.9a.52.52,0,0,0,.5-.54l.36-2.58A6.17,6.17,0,0,0,13.88,15l2.4,1a.51.51,0,0,0,.71-.17l1.45-2.54A.53.53,0,0,0,18.23,12.53ZM10,12a2,2,0,1,1,2-2A2,2,0,0,1,10,12Z"/></svg>',this._fullscreenButton=this._createElementWithClassName("button","jsp-fullscreen-button"),this._fullscreenButton.innerHTML='<svg class="jsp-fullscreen-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><polygon points="12 4.4 15.6 4.4 15.6 8 18 8 18 2 12 2 12 4.4"/><polygon points="4.4 8 4.4 4.4 8 4.4 8 2 2 2 2 8 4.4 8"/><polygon points="8 15.6 4.4 15.6 4.4 12 2 12 2 18 8 18 8 15.6"/><polygon points="15.6 12 15.6 15.6 12 15.6 12 18 18 18 18 12 15.6 12"/></svg><svg class="jsp-fullscreen-exit-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><polygon points="2 14.4 5.6 14.4 5.6 18 8 18 8 12 2 12 2 14.4"/><polygon points="14.4 18 14.4 14.4 18 14.4 18 12 12 12 12 18 14.4 18"/><polygon points="18 5.6 14.4 5.6 14.4 2 12 2 12 8 18 8 18 5.6"/><polygon points="5.6 2 5.6 5.6 2 5.6 2 8 8 8 8 2 5.6 2"/></svg>';var f=document.createElement("div");f.setAttribute("id","jsp-bottom_"+this._settings.baseID),f.classList.add("jsp-bottom"),f.classList.add("controller"),this._content.appendChild(this._spinner),this._content.appendChild(this._bigPlayButton),this._content.appendChild(this._fastSeekBackButton),this._content.appendChild(this._fastSeekForwordButton),this._leftControls=document.createElement("div"),this._leftControls.classList.add("jsp-left-controls"),this._leftControls.appendChild(this._playControl),this._leftControls.appendChild(this._volumeWrapper),this._leftControls.appendChild(this._remainingTime),this._rightControls=document.createElement("div"),this._rightControls.classList.add("jsp-right-controls"),this._rightControls.appendChild(this._settingsButton),this._rightControls.appendChild(this._fullscreenButton),this._controlsBase.appendChild(this._leftControls),this._controlsBase.appendChild(this._rightControls),this._content.appendChild(f),f.appendChild(this._controlsBase),f.appendChild(this._seekBase),this._volumeWrapper.appendChild(this._volumeButton),this._volumeWrapper.appendChild(this._volumeBase),this._volumeBase.appendChild(this._volumeRail),this._volumeBase.appendChild(this._volumeInnerRail),this._volumeBase.appendChild(this._volumeThumb),this._seekBase.appendChild(this._seekRail),this._seekBase.appendChild(this._seekInnerRail),this._seekBase.appendChild(this._seekThumb),this._seekBase.appendChild(this._seekbarThumbnail.seekbarThumbnailBox),this._seekBase.appendChild(this._mouseDisplay),this._rightControls.appendChild(this._settingsBase),this._errorCover=document.createElement("div"),this._errorCover.classList.add("jsp-error-cover"),this._content.appendChild(this._errorCover);var p=document.createElement("canvas");p.id="jsp-canvas",p.style.visibility="hidden",p.style.position="absolute",p.style.display="none",this._settingsBase.appendChild(p),this._initSpeedSetting(),this._controllerInit()}return e.prototype.destroyInstance=function(){},e.prototype._controllerInit=function(){var e=this;this._videoWrapper.on("ready",(function(){e._targetElement.classList.remove("jsp-waiting-ready")}));var t=function(){e._targetElement.classList.remove("first"),e._videoElement.removeEventListener("play",t)};this._videoElement.addEventListener("play",t),this._bigPlayButton.addEventListener("click",(function(){e._bigPlayButton.querySelector(".jsp-button-ring").classList.add("jsp-animation-ring"),e._videoWrapper.isPlaying?e._videoWrapper.pause():e._videoWrapper.play()}),!1),this._bigPlayButton.querySelector(".jsp-button-ring").addEventListener("animationend",(function(){e._bigPlayButton.querySelector(".jsp-button-ring").classList.remove("jsp-animation-ring")}),!1),this._videoWrapper.on("loading",(function(){e._targetElement.classList.add("loading")})),this._videoWrapper.on("volumechange",(function(){e._volumeChangeEventHundler()})),this._videoElement.addEventListener(this._touchOrClickEvent,(function(){e._targetElement.classList.contains("loading")||(!e._targetElement.classList.contains("pc")||e._targetElement.classList.contains("jsp-control-hidden")&&!e._targetElement.classList.contains("jsp-control-auto")?e._isActiveTimerStarted?e._removeActive():e._setActiveTime():(e._targetElement.classList.add("jsp-control-visible"),e._targetElement.classList.remove("jsp-control-hidden"),e._triggerEvent(e._bigPlayButton,"click")))}),!1),this._videoCover.addEventListener("click",(function(){e._triggerEvent(e._bigPlayButton,"click")}),!1),this._playControl.addEventListener(this._touchOrClickEvent,(function(){e._triggerEvent(e._bigPlayButton,"click")}),!1),this._fastSeekBackButton.addEventListener(this._touchOrClickEvent,(function(){e._fastSeekBackButton.querySelector(".jsp-button-ring").classList.add("jsp-animation-ring"),e._currentTime<10?e._videoWrapper.setCurrentTime(0):e._videoWrapper.setCurrentTime(e._currentTime-10),e._setActiveTime(),e._setFastSeekTime("back")}),!1),this._fastSeekBackButton.querySelector(".jsp-button-ring").addEventListener("animationend",(function(){e._fastSeekBackButton.querySelector(".jsp-button-ring").classList.remove("jsp-animation-ring")}),!1),this._fastSeekForwordButton.addEventListener(this._touchOrClickEvent,(function(){e._fastSeekForwordButton.querySelector(".jsp-button-ring").classList.add("jsp-animation-ring"),e._currentTime+10>e._duration-1?e._videoWrapper.setCurrentTime(e._duration-1):e._videoWrapper.setCurrentTime(e._currentTime+10),e._setActiveTime(),e._setFastSeekTime("forword")}),!1),this._fastSeekForwordButton.querySelector(".jsp-button-ring").addEventListener("animationend",(function(){e._fastSeekForwordButton.querySelector(".jsp-button-ring").classList.remove("jsp-animation-ring")}),!1),this._fullscreenButton.addEventListener(this._touchOrClickEvent,(function(){e._setFullScreen(),e._setActiveTime()}),!1),this._videoWrapper.on("parsed_m3u8",(function(){e._initResolutionSetting()})),this._videoWrapper.on("parsed_pd",(function(){e._initResolutionSetting()})),this._videoWrapper.on("loaded_sidecar_subtitle_information",(function(){e._initSubtitleSetting()})),this._videoWrapper.on("loadeddata",(function(){e._initSubtitleSetting()})),this._videoWrapper.on("srcchange",(function(){e._initResolutionSetting()})),this._settingsButton.addEventListener(this._touchOrClickEvent,(function(){e._openOrCloseSettings()}),!1),this._speedBox.addEventListener(this._touchOrClickEvent,(function(){e._speedBoxClickEventHundler()}),!1),this._speedReturnButton.addEventListener(this._touchOrClickEvent,(function(){e._speedReturn()}),!1),this._videoWrapper.on("play",(function(){e._videoPlayEventHundler()})),this._videoWrapper.on("pause",(function(){e._videoPauseEventHundler()})),this._targetElement.classList.contains("pc")&&(this._videoElement.addEventListener("mousemove",(function(){e._setActiveTime()}),!1),this._content.addEventListener("mouseenter",(function(){e._targetElement.classList.contains("jsp-control-auto")&&(e._targetElement.classList.add("jsp-control-visible"),e._targetElement.classList.remove("jsp-control-hidden"))}),!1),this._content.addEventListener("mouseleave",(function(){!e._targetElement.classList.contains("jsp-control-auto")||!e._targetElement.classList.contains("playing")||e._targetElement.classList.contains("settings-shown")||e._targetElement.classList.contains("resolution-shown")||e._targetElement.classList.contains("subtitle-shown")||e._targetElement.classList.contains("speed-shown")||(e._targetElement.classList.remove("jsp-control-visible"),e._targetElement.classList.add("jsp-control-hidden"))}),!1)),this._videoWrapper.on("playing",(function(){e._videoPlayEventHundler(),e._isLoadingRemove&&e._targetElement.classList.remove("loading")})),this._videoWrapper.on("canplaythrough",(function(){e._isLoadingRemove&&e._targetElement.classList.remove("loading")})),this._videoWrapper.on("ended",(function(){e._videoPauseEventHundler()})),this._videoWrapper.on("timeout",(function(t){e._targetElement.classList.remove("loading"),e._errorCover.innerHTML="<p>"+t.detail.type+"<br>(code:"+t.detail.code+")</p>",e._targetElement.classList.add("jsp-timeout")})),this._videoWrapper.on("seeking",(function(){window.clearTimeout(e._seekTimer),e._isLoadingRemove=!1})),this._videoWrapper.on("seeked",(function(){e._targetElement.classList.remove("loading"),e._isLoadingRemove=!0,e._seekTimer=setTimeout((function(){e._tick()}),1e3/15)})),this._videoWrapper.on("control_visible",(function(){e._targetElement.classList.remove("jsp-control-hidden"),e._targetElement.classList.add("jsp-control-visible"),e._setActiveTime()})),this._videoWrapper.on("control_hidden",(function(){e._targetElement.classList.remove("jsp-control-visible"),e._targetElement.classList.add("jsp-control-hidden")})),this._videoWrapper.on("control_auto",(function(){e._targetElement.classList.remove("jsp-control-manual"),e._targetElement.classList.add("jsp-control-auto"),e._targetElement.classList.contains("jsp-control-visible")&&e._setActiveTime()})),this._videoWrapper.on("control_manual",(function(){e._targetElement.classList.remove("jsp-control-auto"),e._targetElement.classList.add("jsp-control-manual")})),this._settings.control?"auto"===this._settings.control?(this._videoWrapper.setControlVisibility(!0),this._videoWrapper.setControlAuto(!0)):"none"===this._settings.control&&(this._videoWrapper.setControlVisibility(!1),this._videoWrapper.setControlAuto(!1)):(this._videoWrapper.setControlVisibility(!0),this._videoWrapper.setControlAuto(!0)),window.addEventListener("resize",(function(){e._sizeClassSet()})),this._sizeClassSet(),this._seekbarInit(),this._tick(),this._volumebarInit()},e.prototype._videoPlayEventHundler=function(){this._targetElement.classList.add("playing"),this._targetElement.classList.remove("paused"),this._setActiveTime(),this._isLoadingRemove=!0,this._tick()},e.prototype._videoPauseEventHundler=function(){this._targetElement.classList.remove("playing"),this._targetElement.classList.add("paused"),this._setActiveTime()},e.prototype._openOrCloseSettings=function(){if(this._targetElement.classList.contains("settings-shown"))(this._targetElement.classList.contains("settings-shown")||this._targetElement.classList.contains("resolution-shown")||this._targetElement.classList.contains("speed-shown")||this._targetElement.classList.contains("subtitle-shown")||this._targetElement.classList.contains("voice-shown"))&&(this._targetElement.classList.remove("settings-shown"),this._targetElement.classList.remove("resolution-shown"),this._targetElement.classList.remove("speed-shown"),this._targetElement.classList.remove("subtitle-shown"),this._targetElement.classList.remove("voice-shown"),this._setActiveTime());else{var e=this._targetElement.getBoundingClientRect().height-64-2-24;this._settingsBase.style.maxHeight=e+"px",this._targetElement.classList.add("settings-shown")}},e.prototype._addPcAndTouchDeviceClickListener=function(e,t,i){var r=this;this._targetElement.classList.contains("pc")?e.addEventListener("click",(function(){t()}),i):(e.addEventListener("touchstart",(function(){r._isTouched=!0}),!1),e.addEventListener("touchmove",(function(){r._isTouched=!1}),!1),e.addEventListener("touchend",(function(){r._isTouched&&t()}),i))},e.prototype._initSpeedSetting=function(){var e=this;this._speedBox=this._createElementWithClassName("div","jsp-speed-box");var t=this._createElementWithClassName("div","jsp-speed-label");t.textContent="再生速度",this._speedValue=this._createSettingsValueElement("1.0","speed",!1),this._speedBase=this._createElementWithClassName("div","jsp-speed-base"),this._speedReturnButton=this._createSettingsValueElement("再生速度","speed",!0),this._rightControls.appendChild(this._speedBase),this._settingsBase.appendChild(this._speedBox),this._speedBox.appendChild(t),this._speedBox.appendChild(this._speedValue),this._speedBase.appendChild(this._speedReturnButton);var i=function(t){r._speedItem=r._createSettingsItemElement(a[t],a[t],"speed"),r._speedBase.appendChild(r._speedItem),r._addPcAndTouchDeviceClickListener(r._speedItem,(function(){e._videoWrapper.setPlaybackRate(Number(a[t])),e._speedReturn()}),!1)},r=this;for(var n in a)i(n);this._videoWrapper.on("rate_changed",(function(){e._checkCurrentSpeed()})),this._checkCurrentSpeed()},e.prototype._checkCurrentSpeed=function(){for(var e=this._speedBase.getElementsByClassName("jsp-speed-item"),t=this._speedBox.getElementsByClassName("jsp-speed-value"),i=0;i<e.length;i++)this._videoWrapper.getPlaybackRate()===Number(e[i].getAttribute("index"))?(e[i].classList.add("jsp-check"),t[0].textContent=e[i].getAttribute("index")):e[i].classList.remove("jsp-check")},e.prototype._resolutionBoxClickEventHundler=function(){var e=this._targetElement.getBoundingClientRect().height-64-2-24;this._resolutionBase.style.maxHeight=e+"px",this._targetElement.classList.add("resolution-shown")},e.prototype._resolutionReturn=function(){this._targetElement.classList.remove("resolution-shown")},e.prototype._speedBoxClickEventHundler=function(){var e=this._targetElement.getBoundingClientRect().height-64-2-24;this._speedBase.style.maxHeight=e+"px",this._targetElement.classList.add("speed-shown")},e.prototype._speedReturn=function(){this._targetElement.classList.remove("speed-shown")},e.prototype._subtitleBoxClickEventHundler=function(){var e=this._targetElement.getBoundingClientRect().height-64-2-24;this._subtitleBase.style.maxHeight=e+"px",this._targetElement.classList.add("subtitle-shown")},e.prototype._subtitleReturn=function(){this._targetElement.classList.remove("subtitle-shown")},e.prototype._initResolutionSetting=function(){if(this._resolutionBox){for(;this._resolutionBase.firstChild;)this._resolutionBase.removeChild(this._resolutionBase.firstChild);this._settingsBase.removeChild(this._resolutionBox),this._resolutionBox=null}this._videoWrapper.isMasterPlaylist&&this._videoWrapper.isSupportedHls()&&(this._createResolutionSettingBox(),this._resolutionItemsCreate())},e.prototype._createResolutionSettingBox=function(){var e=this;this._resolutionBox=this._createElementWithClassName("div","jsp-resolution-box"),this._resolutionBase=this._createElementWithClassName("div","jsp-resolution-base");var t=this._createElementWithClassName("div","jsp-resolution-label");t.textContent="画質",this._resolutionValue=this._createSettingsValueElement("auto","resolution",!1),this._rightControls.appendChild(this._resolutionBase),this._settingsBase.appendChild(this._resolutionBox),this._resolutionBox.appendChild(t),this._resolutionBox.appendChild(this._resolutionValue),this._resolutionBox.addEventListener(this._touchOrClickEvent,(function(){e._resolutionBoxClickEventHundler()}),!1),this._videoWrapper.on("level_switched",(function(){e._checkCurrentLevel(e._videoWrapper.getQualityList())}))},e.prototype._resolutionItemsCreate=function(){for(var e=this,t=this._videoWrapper.getQualityList();this._resolutionBase.firstChild;)this._resolutionBase.removeChild(this._resolutionBase.firstChild);this._resolutionReturnButton=this._createSettingsValueElement("画質","resolution",!0),this._resolutionBase.appendChild(this._resolutionReturnButton),this._resolutionReturnButton.addEventListener(this._touchOrClickEvent,(function(){e._resolutionReturn()}),!1);for(var i=function(i){r._resolutionItem=r._createSettingsItemElement(r.valueFormatter(t.levels[i].attrs.BANDWIDTH),i.toString(),"resolution"),r._resolutionBase.appendChild(r._resolutionItem),r._addPcAndTouchDeviceClickListener(r._resolutionItem,(function(){e._videoWrapper.setQuality(i),e._resolutionReturn()}),!1)},r=this,n=0;n<t.levels.length;n++)i(n);this._resolutionItem=this._createSettingsItemElement("auto",t.levels.length.toString(),"resolution"),this._resolutionItem.addEventListener(this._touchOrClickEvent,(function(){e._videoWrapper.setQuality(-1),e._resolutionReturn()}),!1),this._resolutionBase.appendChild(this._resolutionItem),this._checkCurrentLevel(t)},e.prototype._checkCurrentLevel=function(e){for(var t=this._resolutionBase.getElementsByClassName("jsp-resolution-item"),i=this._resolutionBox.getElementsByClassName("jsp-resolution-value"),r=0;r<e.levels.length;r++)r!==this._videoWrapper.currentLevel||e.isABR?t[r].classList.remove("jsp-check"):(t[r].classList.add("jsp-check"),i[0].textContent=this.valueFormatter(e.levels[r].attrs.BANDWIDTH));-1===this._videoWrapper.currentLevel||e.isABR?(t[e.levels.length].classList.add("jsp-check"),i[0].textContent="auto"):t[e.levels.length].classList.remove("jsp-check")},e.prototype._initSubtitleSetting=function(){var e=this;if(null==this._subtitleBox){this._subtitleBox=this._createElementWithClassName("div","jsp-subtitle-box");var t=this._createElementWithClassName("div","jsp-subtitle-label");t.textContent="字幕",this._subtitleValue=this._createSettingsValueElement("off","subtitle",!1),this._subtitleBase=this._createElementWithClassName("div","jsp-subtitle-base"),this._rightControls.appendChild(this._subtitleBase),this._settingsBase.appendChild(this._subtitleBox),this._subtitleBox.appendChild(t),this._subtitleBox.appendChild(this._subtitleValue),this._subtitleBox.addEventListener(this._touchOrClickEvent,(function(){e._subtitleBoxClickEventHundler()}),!1),this._videoWrapper.on("subtitle_switched",(function(){e._checkCurrentSubtitle(e._videoWrapper.getSubtitleTracks())}))}this._subtitleItemsCreate()},e.prototype._subtitleItemsCreate=function(){for(var e=this,t=this._videoWrapper.getSubtitleTracks();this._subtitleBase.firstChild;)this._subtitleBase.removeChild(this._subtitleBase.firstChild);if(this._subtitleReturnButton=this._createSettingsValueElement("字幕","subtitle",!0),this._subtitleBase.appendChild(this._subtitleReturnButton),this._subtitleReturnButton.addEventListener(this._touchOrClickEvent,(function(){e._subtitleReturn()}),!1),"subtitleTracks"in t){for(var i=function(i){r._subtitleItem=r._createSettingsItemElement(t.subtitleTracks[i].attrs.NAME,i.toString(),"subtitle"),r._subtitleBase.appendChild(r._subtitleItem),r._addPcAndTouchDeviceClickListener(r._subtitleItem,(function(){e._videoWrapper.setSubtitle(i),e._subtitleReturn()}),!1)},r=this,n=0;n<t.subtitleTracks.length;n++)i(n);this._subtitleItem=this._createSettingsItemElement("off",t.subtitleTracks.length.toString(),"subtitle"),this._subtitleItem.addEventListener(this._touchOrClickEvent,(function(){e._videoWrapper.setSubtitle(-1),e._subtitleReturn()}),!1),this._subtitleBase.appendChild(this._subtitleItem),this._checkCurrentSubtitle(t)}},e.prototype._checkCurrentSubtitle=function(e){for(var t=this._subtitleBase.getElementsByClassName("jsp-subtitle-item"),i=this._subtitleBox.getElementsByClassName("jsp-subtitle-value"),r=0;r<e.subtitleTracks.length;r++)r===this._videoWrapper._SubTitle.currentSubtitle?(t[r].classList.add("jsp-check"),i[0].textContent=e.subtitleTracks[r].attrs.NAME):t[r].classList.remove("jsp-check");-1===this._videoWrapper._SubTitle.currentSubtitle?(t[e.subtitleTracks.length].classList.add("jsp-check"),i[0].textContent="off"):t[e.subtitleTracks.length].classList.remove("jsp-check"),this.strWidth(i[0].textContent)>100?i[0].classList.add("wordwrap"):i[0].classList.remove("wordwrap")},e.prototype.strWidth=function(e){var t=document.getElementById("jsp-canvas");if(t.getContext){var i=t.getContext("2d");return i.font="16px 游ゴシック",i.measureText(e).width}return-1},e.prototype._setActiveTime=function(){var e=this;this._targetElement.classList.contains("jsp-control-manual")||(this._targetElement.classList.add("jsp-control-visible"),this._targetElement.classList.remove("jsp-control-hidden"),clearTimeout(this._activeTimer),this._activeTimer=setTimeout((function(){e._removeActive()}),2e3),this._isActiveTimerStarted=!0)},e.prototype._removeActive=function(){this._targetElement.classList.contains("settings-shown")||this._targetElement.classList.contains("resolution-shown")||this._targetElement.classList.contains("subtitle-shown")||this._targetElement.classList.contains("speed-shown")||this._targetElement.classList.contains("jsp-control-manual")||(clearTimeout(this._activeTimer),this._videoWrapper.isPlaying&&(this._targetElement.classList.add("jsp-control-hidden"),this._targetElement.classList.remove("jsp-control-visible")),this._isActiveTimerStarted=!1)},e.prototype._setFastSeekTime=function(e){var t=this;"back"===e?(this._targetElement.classList.add("jsp-back-skipping"),this._targetElement.classList.remove("jsp-forword-skipping")):"forword"===e&&(this._targetElement.classList.add("jsp-forword-skipping"),this._targetElement.classList.remove("jsp-back-skipping")),clearTimeout(this._skippingTimer),this._skippingTimer=setTimeout((function(){t.__removeFastSeekTime()}),1e3)},e.prototype.__removeFastSeekTime=function(){this._targetElement.classList.remove("jsp-back-skipping"),this._targetElement.classList.remove("jsp-forword-skipping"),clearTimeout(this._skippingTimer)},e.prototype._tick=function(){var e=this;this._duration=this._videoWrapper.getDuration(),this._startTime=this._videoWrapper.startTime,this._endTime=this._videoWrapper.endTime,this._currentTime=this._videoWrapper.getCurrentTime(),this._platform.isSafari&&(this._seekRailRect=this._seekRail.getBoundingClientRect()),!this._videoWrapper.isFullscreen()&&this._targetElement.classList.contains("fullscreen")?(this._targetElement.classList.remove("fullscreen"),this._triggerEvent(window,"resize")):this._videoWrapper.isFullscreen()&&!this._targetElement.classList.contains("fullscreen")&&(this._targetElement.classList.add("fullscreen"),this._triggerEvent(window,"resize")),this._seekbarManager(),this._setTime(),this._seekTimer=setTimeout((function(){e._tick()}),1e3/15)},e.prototype._seekbarInit=function(){var e=this;this._seekRailRect=this._seekRail.getBoundingClientRect(),this._targetElement.classList.contains("pc")?(this._seekBase.addEventListener("mousedown",(function(t){e._seekThumbMousedownEventHundler(t)})),window.addEventListener("mousemove",(function(t){e._seekThumbMousemoveEventHundler(t)})),window.addEventListener("mouseup",(function(t){e._seekThumbMouseupEventHundler(t)}))):this._targetElement.classList.contains("mobile")&&(this._seekBase.addEventListener("touchstart",(function(t){e._seekThumbMousedownEventHundler(t)})),this._seekBase.addEventListener("touchmove",(function(t){t.preventDefault(),e._seekThumbMousemoveEventHundler(t)})),this._seekBase.addEventListener("touchend",(function(t){e._seekThumbMouseupEventHundler(t)})))},e.prototype._seekbarManager=function(){if(!this._isSeeking){var e=this._currentTime/this._duration;e<0&&(e=0),e>1&&(e=1);var t=this._seekRailRect.width*e;this._moveSeekThumb(t),this._moveSeekInnerProgress(e)}},e.prototype._moveSeekThumb=function(e){this._seekThumb.style.transform="translateX("+e+"px)"},e.prototype._moveSeekInnerProgress=function(e){this._seekInnerRail.style.width=this._seekRailRect.width*e+"px"},e.prototype._seekThumbMousedownEventHundler=function(e){this._isSeeking=!0,this._targetElement.classList.add("seeking"),this._videoWrapper.isPause?this._isSeekedPlay=!1:(this._videoWrapper.pause(),this._isSeekedPlay=!0);var t=this._getMousePosition(e),i=this._getSeekThumbPosition(t);this._moveMouseDisplay(t),this._moveSeekThumb(i.positionX),this._moveSeekInnerProgress(i.percent)},e.prototype._seekThumbMousemoveEventHundler=function(e){var t=this._getMousePosition(e),i=this._getSeekThumbPosition(t);this._moveMouseDisplay(t),this._isSeeking&&(this._moveSeekThumb(i.positionX),this._moveSeekInnerProgress(i.percent))},e.prototype._seekThumbMouseupEventHundler=function(e){if(this._isSeeking){this._targetElement.classList.remove("seeking");var t=this._seekPosition.percent*this._duration;t>this._duration-1?this._videoWrapper.setCurrentTime(t-1):this._videoWrapper.setCurrentTime(t),!this._videoWrapper.isPlaying&&this._isSeekedPlay&&this._videoWrapper.play()}this._isSeeking=!1},e.prototype._getMousePosition=function(e){var t={x:0,y:0};return e.touches&&e.touches[0]?(t.x=e.touches[0].clientX,t.y=e.touches[0].clientY):e.clientX&&e.clientY&&(t.x=e.clientX,t.y=e.clientY),t},e.prototype._getSeekThumbPosition=function(e){var t=e.x-this._seekRailRect.left,i=t/this._seekRailRect.width;return i<0&&(t=0),i>1&&(t=this._seekRailRect.width),i=t/this._seekRailRect.width,this._seekPosition.positionX=t,this._seekPosition.percent=i,this._seekPosition},e.prototype._volumebarInit=function(){var e=this;this._volumeRailRect=this._volumeRail.getBoundingClientRect(),this._volumeButton.addEventListener(this._touchOrClickEvent,(function(t){e._volumeButtonClickEventHundler(),e._setActiveTime()}),!1),this._volumeBase.addEventListener("transitionend",(function(){e._volumeRailRect=e._volumeRail.getBoundingClientRect()}),!1),this._targetElement.classList.contains("pc")?(this._volumeBase.addEventListener("mousedown",(function(t){e._volumeThumbMousedownEventHundler(t)})),this._volumeBase.addEventListener("mousemove",(function(t){e._volumeThumbMousemoveEventHundler(t)})),window.addEventListener("mouseup",(function(t){e._volumeThumbMouseupEventHundler()})),this._volumeButton.addEventListener("mouseover",(function(t){e._volumeRailRect=e._volumeRail.getBoundingClientRect()}),!1)):this._targetElement.classList.contains("mobile")&&(this._volumeBase.addEventListener("touchstart",(function(t){e._volumeThumbMousedownEventHundler(t)})),this._volumeBase.addEventListener("touchmove",(function(t){t.preventDefault(),e._volumeThumbMousemoveEventHundler(t)})),this._volumeBase.addEventListener("touchend",(function(t){e._volumeThumbMouseupEventHundler(),e._setActiveTime()}))),this._settings.muted?(this._settings.muted=1)&&(this._targetElement.classList.add("mute"),this._videoWrapper.setMuted(!0)):(this._moveVolumeThumbByPercent(100),this._moveVolumeInnerProgress(100)),this._volumePosition.percent=100},e.prototype._volumeThumbMousedownEventHundler=function(e){this._isVolumeChanging=!0;var t=this._getMousePosition(e),i=this._getVolumeThumbPosition(t);this._moveVolumeThumbByPercent(i.percent),this._moveVolumeInnerProgress(i.percent)},e.prototype._volumeThumbMousemoveEventHundler=function(e){if(this._isVolumeChanging){var t=this._getMousePosition(e),i=this._getVolumeThumbPosition(t);this._setActiveTime(),this._moveVolumeThumbByPercent(i.percent),this._moveVolumeInnerProgress(i.percent)}},e.prototype._getVolumeThumbPosition=function(e){var t=e.x-this._volumeRailRect.left,i=t/this._volumeRailRect.width;return i<0&&(t=0),i>1&&(t=this._volumeRailRect.width),i=t/this._volumeRailRect.width*100,isNaN(i)||(this._volumePosition.positionX=t,this._volumePosition.percent=i),this._volumePosition},e.prototype._volumeThumbMouseupEventHundler=function(){this._isVolumeChanging&&(this._videoWrapper.setVolume(this._volumePosition.percent),0!=this._volumePosition.percent&&this._videoWrapper.setMuted(!1)),this._isVolumeChanging=!1},e.prototype._moveVolumeThumb=function(e){this._volumeThumb.style.transform="translateX("+e+"px)"},e.prototype._moveVolumeThumbByPercent=function(e){this._volumeThumb.style.marginLeft=e.toString()+"%"},e.prototype._moveVolumeInnerProgress=function(e){this._volumeInnerRail.style.width=e+"%"},e.prototype._volumeButtonClickEventHundler=function(){this._videoElement.muted&&0!=this._volumePosition.percent?(this._videoWrapper.setMuted(!1),this._videoWrapper.setVolume(this._volumePosition.percent)):this._videoElement.muted||this._videoWrapper.setMuted(!0)},e.prototype._volumeChangeEventHundler=function(){var e=100*this._videoElement.volume;this._volumeRailRect.width,this._videoElement.volume;this._videoElement.muted?(this._moveVolumeThumbByPercent(0),this._moveVolumeInnerProgress(0),this._targetElement.classList.add("mute")):(this._moveVolumeThumbByPercent(e),this._moveVolumeInnerProgress(e),this._targetElement.classList.remove("mute"))},e.prototype._moveMouseDisplay=function(e){var t=e.x-this._seekRailRect.left;e.x>this._seekRailRect.right?t=this._seekRailRect.right-this._seekRailRect.left:e.x<this._seekRailRect.left&&(t=0);var i=t/this._seekRailRect.width;i<0&&(i=0),i>1&&(i=1);var r,n,s,a=this._videoWrapper.isLiveOrDvr?(1-i)*this._duration:i*this._duration,o=Math.floor(a/60/60),l=Math.floor(a/60-60*o),u=Math.floor(a-60*l-60*o*60);r=o<10?"0"+o:o,n=l<10?"0"+l:l,s=u<10?"0"+u:u;var d=this._videoWrapper.isLiveOrDvr?"-"+r+":"+n+":"+s:r+":"+n+":"+s;this._mouseDisplay.textContent=d;var c=this._mouseDisplay.getBoundingClientRect(),h=this.getTranslateXOfSeekbarElement(e,t,c);this._mouseDisplay.style.transform="translateX("+h+"px)",this._seekbarThumbnail.setThumbnail(this._duration,a);var f=this._seekbarThumbnail.seekbarThumbnailBox.getBoundingClientRect(),p=this.getTranslateXOfSeekbarElement(e,t,f),g=this.getTranslateYOfSeekbarThumbnail();this._seekbarThumbnail.setThumbnailPosition(p,g)},e.prototype.getTranslateXOfSeekbarElement=function(e,t,i){var r=this._content.getBoundingClientRect(),n=i.width/2;return e.x-n<r.left?-n+(n-(this._seekRailRect.left-r.left)):e.x+n>r.right?-n+(r.right-n-this._seekRailRect.left):-n+t},e.prototype.getTranslateYOfSeekbarThumbnail=function(){var e=this._seekbarThumbnail.seekbarThumbnailBox.getBoundingClientRect(),t=this._mouseDisplay.getBoundingClientRect();return-(e.height+t.height+10)},e.prototype._setTime=function(){isNaN(this._currentTime)&&(this._currentTime=0),isNaN(this._duration)&&(this._duration=0);var e=this._convertTime(this._currentTime),t=this._convertTime(this._duration);this._remainingTime.textContent=e+" / "+t},e.prototype._convertTime=function(e){var t=Math.floor(e/60/60),i=Math.floor(e/60-60*t),r=Math.floor(e-60*i-60*t*60);return(t<10?"0"+t:t)+":"+(i<10?"0"+i:i)+":"+(r<10?"0"+r:r)},e.prototype._sizeClassSet=function(){this._videoElement.clientWidth<480?(this._targetElement.classList.remove("medium"),this._targetElement.classList.remove("large"),this._targetElement.classList.remove("x-large"),this._targetElement.classList.add("small")):this._videoElement.clientWidth<768?(this._targetElement.classList.remove("small"),this._targetElement.classList.remove("large"),this._targetElement.classList.remove("x-large"),this._targetElement.classList.add("medium")):this._videoElement.clientWidth<1440?(this._targetElement.classList.remove("small"),this._targetElement.classList.remove("medium"),this._targetElement.classList.remove("x-large"),this._targetElement.classList.add("large")):this._videoElement.clientWidth>=1440&&(this._targetElement.classList.remove("small"),this._targetElement.classList.remove("medium"),this._targetElement.classList.remove("large"),this._targetElement.classList.add("x-large")),this._seekRailRect=this._seekRail.getBoundingClientRect()},e.prototype._setFullScreen=function(){this._videoWrapper.isFullscreen()?(document.exitFullscreen?document.exitFullscreen():document.msExitFullscreen?document.msExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen&&document.webkitExitFullscreen(),this._targetElement.classList.remove("fullscreen")):(this._targetElement.requestFullscreen?this._targetElement.requestFullscreen({navigationUI:"hide"}):this._targetElement.msRequestFullscreen?this._targetElement.msRequestFullscreen():this._targetElement.mozRequestFullScreen?this._targetElement.mozRequestFullScreen():this._targetElement.webkitRequestFullscreen?this._targetElement.webkitRequestFullscreen():this._videoElement.webkitEnterFullScreen&&this._videoElement.webkitEnterFullScreen(),this._targetElement.classList.add("fullscreen")),this._seekRailRect=this._seekRail.getBoundingClientRect()},e.prototype._triggerEvent=function(e,t){if(document.createEvent){var i=document.createEvent("HTMLEvents");return i.initEvent(t,!0,!0),e.dispatchEvent(i)}},e.prototype._createElement=function(e,t,i){var r=document.createElement(e);return r.setAttribute(t,i),r},e.prototype._createElementWithClassName=function(e,t){var i=document.createElement(e);return i.classList.add(t),i},e.prototype._createSettingsValueElement=function(e,t,i){var r=document.createElement("div"),n=document.createElement("div");if(n.setAttribute("class","jsp-settings-box-name"),n.innerText=e,i){r.setAttribute("class","jsp-settings-return"),r.classList.add("jsp-"+t+"-return");var s=document.createElement("div");s.setAttribute("class","jsp-arrow-back-box"),s.innerHTML='<svg class="jsp-arrow-back-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 20"><g><polygon points="11.22 18 3.2 10 11.22 2 12.8 3.57 6.35 10 12.8 16.43 11.22 18"/></g></svg>',r.appendChild(s),r.appendChild(n)}else{r.setAttribute("class","jsp-settings-box"),n.classList.add("jsp-"+t+"-value");var a=document.createElement("div");a.setAttribute("class","jsp-arrow-forward-box"),a.innerHTML='<svg class="jsp-arrow-forward-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 20"><g><polygon points="4.78 2 12.8 10 4.78 18 3.2 16.43 9.65 10 3.2 3.57 4.78 2"/></g></svg>',r.appendChild(n),r.appendChild(a)}return r},e.prototype._createSettingsItemElement=function(e,t,i){var r=document.createElement("div"),n=document.createElement("div"),s=document.createElement("div");return r.setAttribute("class","jsp-settings-item"),r.classList.add("jsp-"+i+"-item"),r.setAttribute("index",t),n.setAttribute("class","jsp-settings-check-box"),n.classList.add("jsp-"+i+"-check-box"),n.innerHTML='<svg class="jsp-check-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><g><polygon points="7.57 16.1 2 10.46 3.4 9.03 7.57 13.26 16.6 4.1 18 5.52 7.57 16.1"/></g></svg>',s.setAttribute("class","jsp-settings-item-value"),s.classList.add("jsp-"+i+"-item-value"),s.innerText=e,this.strWidth(s.innerText)>172?s.classList.add("wordwrap"):s.classList.remove("wordwrap"),r.appendChild(n),r.appendChild(s),r},e.prototype.valueFormatter=function(e){var t=Number(e);return t/1e3<1?t+"bps":t/1e6<1?Math.floor(t/1e3)+"kbps":(Math.floor(t/1e5)/10).toFixed(1)+"Mbps"},e.prototype.setPoster=function(e){this._videoCover.style.backgroundImage="url("+e+")"},e}(),d=i(0),c=i.n(d),h=i(3),f=(i(22),function(){function e(e){this._TICKRATE=1e3/15,this._RESTART_TIME=3e4,this._CALCULATE_BPS_SPAN=6e4,this._CHANGE_STANDARD_SPEED_TIME=5,this._RETRY_NUMBER=6,this._RETRY_TIME=1e3,this._CALCULATE_BPS_IMG="https://94ea5c4edba542aaf67d8bf7f455e199.cdnext.stream.ne.jp/for_bps.jpg",this._events={},this._retryNum=0,this._prevCurrentTime=0,this._playingstallCnt=0,this.isReady=!1,this.isPlaying=!1,this.isPause=!0,this.isEnded=!1,this.isLiveOrDvr=!1,this._isDvr=!1,this._isVod=!1,this._isSeeking=!1,this._playbackRate=1,this.isMasterPlaylist=!1,this._qualityLevels=[],this._bandwidthArray=[],this._isAbr=!0,this._isParsedM3u8=!1,this._isSupportedHls=!1,this.srcchanged=!1,this._ua=new r.a,this._platform=this._ua.detailBrowser,this.settings=e,this.isLiveOrDvr="live"===this.settings.mode||"dvr"===this.settings.mode,this._isDvr="dvr"===this.settings.mode,this._isVod="vod"===this.settings.mode;var t=document.getElementById("jsp-content_"+this.settings.baseID);this._videoElement=document.createElement("video"),this._videoElement.classList.add("jsp-video-element"),this._videoElement.setAttribute("playsinline","playsinline"),this._videoElement.setAttribute("crossOrigin","Anonymous"),t.appendChild(this._videoElement),this._target=document.createElement("div"),this._events.before_play=new CustomEvent("before_play"),this._events.play=new CustomEvent("play"),this._events.playing=new CustomEvent("playing"),this._events.pause=new CustomEvent("pause"),this._events.canplaythrough=new CustomEvent("canplaythrough"),this._events.ended=new CustomEvent("ended"),this._events.volumechange=new CustomEvent("volumechange"),this._events.loading=new CustomEvent("loading"),this._events.timeout=new CustomEvent("timeout"),this._events.seeking=new CustomEvent("seeking"),this._events.seeked=new CustomEvent("seeked"),this._events.loadedmetadata=new CustomEvent("loadedmetadata"),this._events.loadeddata=new CustomEvent("loadeddata"),this._events.error=new CustomEvent("error"),this._events.ready=new CustomEvent("ready"),this._events.level_switched=new CustomEvent("level_switched"),this._events.rate_changed=new CustomEvent("rate_changed"),this._events.srcchange=new CustomEvent("srcchange"),this._events.control_visible=new CustomEvent("control_visible"),this._events.control_hidden=new CustomEvent("control_hidden"),this._events.control_auto=new CustomEvent("control_auto"),this._events.control_manual=new CustomEvent("control_manual"),this._events.parsed_m3u8=new CustomEvent("parsed_m3u8"),this._events.parsed_pd=new CustomEvent("parsed_pd"),this._events.subtitle_switched=new CustomEvent("subtitle_switched"),this._events.loaded_sidecar_subtitle_information=new CustomEvent("loaded_sidecar_subtitle_information")}return e.prototype.init=function(){"src"in this.settings&&this.settings.src&&(this._currentSrc=this.settings.src,this._getRequestSrc(this.settings.src),this._initEvent(),this._tick())},e.prototype._initEvent=function(){var e=this;this._videoElement.addEventListener("play",(function(){e.isPlaying=!0,e.isPause=!1,e.isEnded=!1}),!1),this._videoElement.addEventListener("playing",(function(){e.isPlaying=!0,e.isPause=!1,e.isEnded=!1,e.dispatch("playing")}),!1),this._videoElement.addEventListener("pause",(function(){e.isPlaying=!1,e.isPause=!0,e.dispatch("pause")}),!1),this._videoElement.addEventListener("canplaythrough",(function(){e.dispatch("canplaythrough")}),!1),this._videoElement.addEventListener("ended",(function(){e.isPlaying=!1,e.isPause=!0,e.isEnded=!0,e._platform.isIE&&e.setNewSrc(e.settings.src,!0),e.dispatch("ended")}),!1),this._videoElement.addEventListener("volumechange",(function(){e.dispatch("volumechange")}),!1),this._videoElement.addEventListener("seeked",(function(){e._isSeeking&&(e.dispatch("seeked"),e._isSeeking=!1)}),!1),this._videoElement.addEventListener("loadeddata",(function(){e.dispatch("loadeddata")}),!1);var t=function(){e._videoElement.removeEventListener("loadeddata",t),e._videoElement.removeEventListener("loadedmetadata",t),e.isReady||(e.isReady=!0,e.dispatch("ready"))};this.isSupportedHls()?this._videoElement.addEventListener("loadeddata",t):this._videoElement.addEventListener("loadedmetadata",t),this._videoElement.addEventListener("error",(function(){e._events.error=new CustomEvent("error",{detail:{type:"VideoElementError",code:3001,details:null,fatal:null}}),e.dispatch("error"),e.dispatch("loading"),setTimeout((function(){e._videoElementErrorEventHundler(e._retryNum),e._retryNum++}),e._RETRY_TIME)}),!1),this._platform.isIE&&this.on("ended",(function(){e.pause()}))},e.prototype._tick=function(){for(var e=this,t=this._videoElement.seekable,i=0;i<t.length;i++)this.startTime=t.start(0),this.endTime=t.end(0);if(this.differenceTime=Math.floor(this.endTime-this._duration),(this.differenceTime<0||isNaN(this.differenceTime))&&(this.differenceTime=0),this.currentTime=this._videoElement.currentTime-this.differenceTime,this._isVod&&(this._duration=this._videoElement.duration),this._platform.isIE&&this._isVod&&this._videoElement.currentTime>this._videoElement.duration&&!this.isEnded){var r=document.createEvent("HTMLEvents");r.initEvent("ended",!0,!0),this._videoElement.dispatchEvent(r)}this._isDvr&&this.getCurrentTime()>this.getDuration()-this._CHANGE_STANDARD_SPEED_TIME&&this.getPlaybackRate()>1&&this.setPlaybackRate(1),this.srcchanged&&!isNaN(this.differenceTime)&&(this.srcchanged=!1,this.dispatch("srcchange")),this._playingObserver(),this._timer=setTimeout((function(){e._tick()}),this._TICKRATE)},e.prototype._playingObserver=function(){if(!this._videoElement.paused&&!this._videoElement.ended){if(this._prevCurrentTime!=this._videoElement.currentTime)return this._playingstallCnt=0,this._prevCurrentTime=this._videoElement.currentTime,void(this._platform.isIE&&this._retryNum>0&&(this._retryNum=0,this.dispatch("canplaythrough")));this._playingstallCnt++,this._playingstallCnt>150&&(this.dispatch("loading"),this._playingstallCnt=0)}},e.prototype._timeout=function(e){var t={type:e.type,code:e.code,details:e.detail||"",fatal:e.fatal||""};this._events.timeout=new CustomEvent("timeout",{detail:t}),this.dispatch("timeout"),clearTimeout(this._restartTimer)},e.prototype._videoElementErrorEventHundler=function(e){e>this._RETRY_NUMBER&&this._timeout({cause:"PlayerError",code:"3001"}),this._videoElement.load()},e.prototype.on=function(e,t){this._target.addEventListener(e,(function(e){t(e)}))},e.prototype.dispatch=function(e){var t;switch(e){case"before_play":t=this._events.before_play;break;case"play":t=this._events.play;break;case"playing":t=this._events.playing;break;case"pause":t=this._events.pause;break;case"canplaythrough":this._retryNum=0,t=this._events.canplaythrough;break;case"ended":t=this._events.ended;break;case"volumechange":t=this._events.volumechange;break;case"loading":t=this._events.loading;break;case"timeout":t=this._events.timeout;break;case"seeking":t=this._events.seeking;break;case"seeked":t=this._events.seeked;break;case"loadeddata":t=this._events.loadeddata;break;case"loadedmetadata":t=this._events.loadedmetadata;break;case"ready":t=this._events.ready;break;case"error":t=this._events.error;break;case"level_switched":t=this._events.level_switched;break;case"rate_changed":t=this._events.rate_changed;break;case"srcchange":t=this._events.srcchange;break;case"control_visible":t=this._events.control_visible;break;case"control_hidden":t=this._events.control_hidden;break;case"control_auto":t=this._events.control_auto;break;case"control_manual":t=this._events.control_manual;break;case"parsed_m3u8":t=this._events.parsed_m3u8;break;case"parsed_pd":t=this._events.parsed_pd;break;case"subtitle_switched":t=this._events.subtitle_switched;break;case"loaded_sidecar_subtitle_information":t=this._events.loaded_sidecar_subtitle_information}this._target.dispatchEvent(t)},e.prototype._getRequestSrc=function(e,t){void 0===t&&(t=!1)},e.prototype._parseResponseSrc=function(e){},e.prototype._calculateBps=function(){var e,t=this,i=new XMLHttpRequest;if(i.open("GET",this._CALCULATE_BPS_IMG,!0),i.setRequestHeader("Pragma","no-cache"),i.setRequestHeader("Cache-Control","no-cache"),i.setRequestHeader("If-Modified-Since","Thu, 01 Jun 1970 00:00:00 GMT"),i.onloadstart=function(){e=performance.now()},i.onloadend=function(){var i=(performance.now()-e)/1e3;t._bps=400184/i,t.currentLevel=t._getClosestBandwidthIndex()},i.send(null),this._isAbr)setTimeout((function(){t._calculateBps()}),this._CALCULATE_BPS_SPAN)},e.prototype._getClosestBandwidthIndex=function(){if(!(this._bandwidthArray.length>0))return 0;this._bandwidthArray[this._bandwidthArray.length-1];for(var e=this._bandwidthArray.length-1;e>=0;e--)if(this._bandwidthArray[e]<this._bps)return e},e.prototype.isSupportedHls=function(){return this._isSupportedHls},e.prototype.play=function(){var e=this;if(this.isReady){this.dispatch("before_play"),this.dispatch("loading");var t=this._videoElement.play();void 0!==t&&t.then((function(e){})).catch((function(t){e.dispatch("pause")})),this.dispatch("play"),this._platform.isIE&&this.setPlaybackRate(this._playbackRate,!1)}},e.prototype.pause=function(){this._videoElement.pause()},e.prototype.setCurrentTime=function(e){this._isSeeking||(this.dispatch("seeking"),this._isSeeking=!0),this._videoElement.currentTime=e+this.differenceTime},e.prototype.setQuality=function(e){},e.prototype.setVolume=function(e){var t=e/100;this._videoElement.volume=t,this._videoElement.muted=0===t},e.prototype.setMuted=function(e){this._videoElement.muted=e},e.prototype.setPlaybackRate=function(e,t){void 0===t&&(t=!0),this._playbackRate=e,this._videoElement.playbackRate=this._playbackRate,t&&this.dispatch("rate_changed")},e.prototype.setUseSubtitle=function(e){this._SubTitle.useSubtitle=e},e.prototype.setSubtitle=function(e){this._SubTitle.setSubtitle(e),this.dispatch("subtitle_switched")},e.prototype.setAudio=function(e){},e.prototype.setNewSrc=function(e,t){var i=this;void 0===t&&(t=!1);var r=this.isPlaying;if(this._videoElement.src=e,this._videoElement.load(),!t){this.settings.src=e,this._isAbr=!0,this._currentSrc=e;var n=function(){i._videoElement.removeEventListener("loadedmetadata",n),i._getRequestSrc(e,!0)};this._videoElement.addEventListener("loadedmetadata",n)}var s=function(){i.setPlaybackRate(i._playbackRate,!1),i._videoElement.removeEventListener("playing",s)};this._videoElement.addEventListener("playing",s),r?this.play():this.pause()},e.prototype.setControlVisibility=function(e){e?this.dispatch("control_visible"):this.dispatch("control_hidden")},e.prototype.setControlAuto=function(e){e?this.dispatch("control_auto"):this.dispatch("control_manual")},e.prototype.getVideoElement=function(){return this._videoElement},e.prototype.getPlaybackStatus=function(){var e={};return e.isPlaying=this.isPlaying,e.isPause=this.isPause,e.isEnded=this.isEnded,e},e.prototype.getDuration=function(){return this._duration},e.prototype.getCurrentTime=function(){return this.currentTime},e.prototype.getQualityList=function(){var e={};return e.levels=this._qualityLevels,e.currentLevel=this.currentLevel,e.isABR=this._isAbr,e},e.prototype.getVolume=function(){return 100*this._videoElement.volume},e.prototype.isMuted=function(){return this._videoElement.muted},e.prototype.getPlaybackRate=function(){return this._videoElement.playbackRate},e.prototype.getUseSubtitle=function(){return!!this._SubTitle&&this._SubTitle.useSubtitle},e.prototype.getSubtitleTracks=function(){return this._SubTitle?this._SubTitle.getSubtitleTracks():[]},e.prototype.getSubtitleList=function(){return this._SubTitle.getSubtitleList()},e.prototype.getCurrentSubtitle=function(){return this._SubTitle?this._SubTitle.getCurrentSubtitle():{}},e.prototype.getSubtitleCueList=function(){return this._SubTitle?this._SubTitle.getSubtitleCueList():[]},e.prototype.getSubtitleActiveCueList=function(){return this._SubTitle?this._SubTitle.getSubtitleActiveCueList():[]},e.prototype.isFullscreen=function(){return!!(void 0!==document.mozFullScreenElement&&null!==document.mozFullScreenElement||void 0!==document.webkitFullscreenElement&&null!==document.webkitFullscreenElement||void 0!==document.msFullscreenElement&&null!==document.msFullscreenElement||this._videoElement.webkitDisplayingFullscreen)},e.prototype.getAudioList=function(){},e.prototype.getCurrentSrc=function(){return this._currentSrc},e.prototype.getPresentationMode=function(){var e={isInline:!1,isFullscreen:!1,isPip:!1};return"inline"===this._videoElement.webkitPresentationMode?e.isInline=!0:"fullscreen"===this._videoElement.webkitPresentationMode?e.isFullscreen=!0:"picture-in-picture"===this._videoElement.webkitPresentationMode&&(e.isPip=!0),e},e.prototype.preload=function(e){this.setNewSrc(e)},e.prototype.destroy=function(){},e.prototype.getHlsInstance=function(){},e.prototype.getHlsConfig=function(){return null},e.prototype.setHlsConfig=function(e){},e}());i(13);function p(e,t,i){return"function"==typeof window.VTTCue?new window.VTTCue(e,t,i):window.TextTrackCue(e,t,i)}var g,m=function(){function e(t,i,r){var n=this;this._subtitleTracks=[],this.isIPhone=navigator.userAgent.indexOf("iPhone")>=0,this.useSubtitle=!1,this._settings=r,this._hls=i,this._videoWrapper=t,this._videoElement=t.getVideoElement(),this.currentSubtitle=e.SUBTITLE_OFF,this.useSubtitle=!!this._settings.useSubtitle,this.useSubtitle?this._videoElement.addEventListener("loadeddata",(function(){n.useSidecar()&&n._sidecarInit(),n.useOverray()&&n._captionOverlayInit()})):this._videoElement.classList.add("video_cue_hidden")}return e.prototype.useSidecar=function(){return"subtitles"in this._settings&&this._settings.subtitles.length>0},e.prototype.useOverray=function(){return"captionoverlay"in this._settings&&this._settings.captionoverlay},e.prototype._sidecarInit=function(){this._videoElement.crossOrigin="Anonymous",this._subtitleTracks=[];for(var t=e.SUBTITLE_OFF,i=this._videoElement.getElementsByTagName("track"),r=i.length,n=0;n<r;n++)this._videoElement.removeChild(i[0]);var s=function(e){var i=a._settings.subtitles[e],r=[];i.attrs=[],i.attrs.NAME=i.label,i.src.indexOf(".ttml")>-1?r=a.parseTTML(a.getTTML(i.src)):i.src.indexOf(".vtt")>-1&&(r=a.parseVtt(a.getVtt(i.src)));var n=a._videoElement.addTextTrack("subtitles",i.label,i.srclang);n.mode="hidden",r.forEach((function(e){n.addCue(e)})),i.default&&(t=e),a._subtitleTracks.push(i)},a=this;for(n=0;n<this._settings.subtitles.length;n++)s(n);var o=this._videoElement.addTextTrack("subtitles","dummy");o.mode="hidden",o.addCue(p(0,1,"")),this.setSubtitle(t),this._videoWrapper.dispatch("loaded_sidecar_subtitle_information")},e.prototype.getVtt=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},e.prototype.parseVtt=function(e){for(var t,i,r,n,s,a=e.replace(/\r\n/gm,"\n").replace(/\r/gm,"\n").split("\n"),o=/([0-9,:,.]{0,})\s-->\s([0-9,:,.]{0,})/,l=/<br>$/gm,u=[],d=0;d<a.length;d++)if(n=a[d].match(o)){r="",[],t=this.parseToNumber(n[1]),i=this.parseToNumber(n[2]);for(var c=d+1;c<a.length&&(s=c,!a[c].match(o));c++);for(s==a.length-1&&(s+=1),r=a.slice(d+1,s-1).join("\r\n<br>"),d=s-1;r.match(l);)r=r.replace(l,"");for(;r.match(/\r\n$/gm);)r=r.replace(/\r\n$/gm,"");window.navigator.userAgent.toLowerCase();if(void 0!==t&&void 0!==i)try{u.push(p(t,i,r))}catch(e){}}return u},e.prototype.getTTML=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseXML},e.prototype.parseTTML=function(e){var t,i,r,n=[],s=[];s.push(e.querySelector("body>div:first-child>p"));for(var a=0;a<s.length;a++){r=s[a].innerHTML,t=this.parseToNumber(s[a].getAttribute("begin")),i=this.parseToNumber(s[a].getAttribute("end"));window.navigator.userAgent.toLowerCase();if(void 0!==t&&void 0!==i)try{n.push(p(t,i,r))}catch(e){}}return n},e.prototype.parseToNumber=function(e){var t=e.split(":"),i=0;return t.length>=3?(i=60*Number(t[0])*60,i+=60*Number(t[1]),i+=Number(t[2])):t.length>=2?(i+=60*Number(t[0]),i+=Number(t[1])):t.length>=1?i+=Number(t[0]):i},e.prototype._captionOverlayInit=function(){var t=this,i=this.currentSubtitle,r=!1;this.setSubtitle(e.SUBTITLE_OFF),this._videoElement.classList.add("video_cue_hidden"),this._areaDiv=document.createElement("div"),this._captionspan=document.createElement("span"),this._areaDiv.classList.add("overlay-caption_area"),this._areaDiv.classList.add("overlay-caption_area-visible"),this._captionspan.classList.add("overlay-caption_text");var n=this._videoElement.clientWidth/30;this._captionspan.style.fontSize=n+"px",this._captionspan.style.lineHeight=1.5*n+"px",this._areaDiv.appendChild(this._captionspan);var s=document.getElementById("jsp-content_"+this._settings.baseID),a=document.getElementById("jsp-bottom_"+this._settings.baseID);s&&a&&s.insertBefore(this._areaDiv,a),window.addEventListener("resize",(function(){var e=t._videoElement.clientWidth/30;t._captionspan.style.fontSize=e+"px",t._captionspan.style.lineHeight=1.5*e+"px"})),this.setSubtitle(i);for(var o=0;o<this._videoElement.textTracks.length;o++){var l=this._videoElement.textTracks[o];if("metadata"==l.kind)break;"disabled"==l.mode&&(l.mode="hidden"),"dummy"==this._videoElement.textTracks[o].label&&(r=!0),l.addEventListener("cuechange",(function(i){var r=i.target;if(r.mode="hidden",t.currentSubtitle!=e.SUBTITLE_OFF){var n=t._subtitleTracks[t.currentSubtitle];if(t._cueChangechecker(r,n)){if(t.isIPhone)t._videoWrapper.getPresentationMode().isInline?t._videoElement.classList.contains("video_cue_hidden")||t._videoElement.classList.add("video_cue_hidden"):t._videoElement.classList.remove("video_cue_hidden");t._cueChangeHandler(r)}}}))}if(this._settings.isIE&&!r){var u=this._videoElement.addTextTrack("subtitles","dummy");u.mode="showing",u.addCue(p(0,1,""))}},e.prototype._cueChangechecker=function(e,t){return this.useSidecar()?e.label===t.label&&e.language===t.srclang:"label"in e},e.prototype._cueChangeHandler=function(e){var t=this;if(!(e.activeCues.length<=0)){var i=e.activeCues[0];if(i.text){var r=i.text.replace("\r\n","<br>").replace("\r","<br>").replace("\n","<br>");this._setOverlayText(r),this._settings.isIE&&!this.useSidecar()?this._setOnCueChange(i.startTime,i.endTime,e):i.onexit=function(e){t._setOverlayText("")}}}},e.prototype._setOnCueChange=function(e,t,i){var r=this;this._cueExitChecker(e,t,i)||setTimeout((function(){r._setOnCueChange(e,t,i)}),1e3/60)},e.prototype._cueExitChecker=function(e,t,i){var r=this._videoElement.currentTime;return(e>r||t<r)&&(this._setOverlayText(""),i.mode="showing",!0)},e.prototype._setOverlayText=function(e){this._captionspan&&(this._captionspan.innerHTML=e)},e.prototype.setSubtitle=function(t){if(this.currentSubtitle!==t)if(this.currentSubtitle=t,this._settings.isIE&&this.useSidecar()&&this.useOverray())this.setSubtitleForIE(t);else{for(var i=0;i<this._videoElement.textTracks.length;i++)"dummy"!==this._videoElement.textTracks[i].label&&(this._videoElement.textTracks[i].mode="disabled");this._captionspan&&(this._captionspan.innerHTML=""),this._areaDiv&&(this._areaDiv.classList.remove("overlay-caption_area-visible"),this._areaDiv.classList.add("overlay-caption_area-hidden")),t!==e.SUBTITLE_OFF&&(this._videoElement.textTracks[t].mode="showing",this._areaDiv&&(this._areaDiv.classList.remove("overlay-caption_area-hidden"),this._areaDiv.classList.add("overlay-caption_area-visible")))}},e.prototype.setSubtitleForIE=function(t){this._captionspan&&(this._captionspan.innerHTML=""),this._areaDiv&&(this._areaDiv.classList.remove("overlay-caption_area-visible"),this._areaDiv.classList.add("overlay-caption_area-hidden")),t!==e.SUBTITLE_OFF&&this._areaDiv&&(this._areaDiv.classList.remove("overlay-caption_area-hidden"),this._areaDiv.classList.add("overlay-caption_area-visible"))},e.prototype.getSubtitleTracks=function(){var e={};return this._hls&&c.a.isSupported()&&this._hls.subtitleTracks.length>0?e.subtitleTracks=this._hls.subtitleTracks:this._subtitleTracks.length>0?e.subtitleTracks=this._subtitleTracks:e.subtitleTracks=this.getTexttrackList(),e},e.prototype.getSubtitleList=function(){return this.filterTextTrackList()},e.prototype.getCurrentSubtitle=function(){return this.filterTextTrackList()[this.currentSubtitle]||{}},e.prototype.getSubtitleCueList=function(){var e=this.filterTextTrackList()[this.currentSubtitle];return e&&e.cues?e.cues:[]},e.prototype.getSubtitleActiveCueList=function(){var e=this.filterTextTrackList()[this.currentSubtitle];return e&&e.activeCues?e.activeCues:[]},e.prototype.getTexttrackList=function(){this._videoElement.crossOrigin="Anonymous",this._subtitleTracks=[];e.SUBTITLE_OFF;for(var t=this._videoElement.textTracks,i=0;i<t.length;i++){var r=t[i];if("subtitles"!==r.kind&&"captions"!==r.kind)break;if(""==r.label)break;r.attrs=[],r.attrs.NAME=r.label,"showing"==r.mode&&i,this._subtitleTracks.push(r)}return this._subtitleTracks},e.prototype.filterTextTrackList=function(){for(var e=this._videoElement.textTracks||[],t=[],i=0;i<e.length;i+=1)"subtitles"!==e[i].kind&&"captions"!==e[i].kind||t.push(e[i]);return t},e.SUBTITLE_OFF=-1,e}(),v=(g=function(e,t){return(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}g(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),_=function(e){function t(t){var i=e.call(this,t)||this;return i._isDispachParsedM3u8=!1,i}return v(t,e),t.prototype.init=function(){var e=this;if("src"in this.settings&&this.settings.src){if(c.a.isSupported()){this._isSupportedHls=!0;var i=void 0;"hls_config"in this.settings&&this.settings.hls_config?(i=this.settings.hls_config,this._hls=new c.a(i)):this._hls=new c.a(t.DEFAULT_HLS_CONFIG_SETTING),this._hls.attachMedia(this._videoElement),this._hls.on(c.a.Events.MEDIA_ATTACHED,(function(){e._hls.loadSource(e.settings.src),e._hls.on(c.a.Events.MANIFEST_PARSED,(function(){}))})),this._hls.on(c.a.Events.LEVEL_UPDATED,(function(t,i){e._duration=i.details.totalduration})),this._hls.on(c.a.Events.ERROR,(function(t,i){console.log(i),e._hlsErrorEventsHundler(i)}))}else this._videoElement.canPlayType("application/vnd.apple.mpegurl")&&(this._videoElement.src=this.settings.src,this._videoElement.load());this._currentSrc=this.settings.src,this._getRequestSrc(this.settings.src),this._initEvent(),this._tick()}},t.prototype._initEvent=function(){var t=this;e.prototype._initEvent.call(this),this.settings.isIE=this._platform.isIE,this._SubTitle=new m(this,this._hls,this.settings),this._videoElement.addEventListener("play",(function(){t.isSupportedHls()||t.getPresentationMode().isInline||t.dispatch("play")}),!1),this._videoElement.addEventListener("seeking",(function(){t.isSupportedHls()||t.getPresentationMode().isInline||t.dispatch("seeking")}),!1),this._videoElement.addEventListener("seeked",(function(){t.isSupportedHls()||t.getPresentationMode().isInline||t.dispatch("seeked")}),!1)},t.prototype._tick=function(){for(var t=this._videoElement.seekable,i=0;i<t.length;i++)this.startTime=t.start(0),this.endTime=t.end(0),c.a.isSupported()||(this._duration=this.endTime-this.startTime);e.prototype._tick.call(this),this.isReady&&this._isParsedM3u8&&!this._isDispachParsedM3u8&&(this._isDispachParsedM3u8=!0,this.dispatch("parsed_m3u8"))},t.prototype._playingObserver=function(){e.prototype._playingObserver.call(this),this._playingstallCnt>150&&(c.a.isSupported()||this.dispatch("loading"),this._playingstallCnt=0)},t.prototype._timeout=function(t){e.prototype._timeout.call(this,t),this._hls.destroy()},t.prototype._hlsErrorEventsHundler=function(e){var t=this,i=0;if(e.fatal){if(this.dispatch("loading"),e.type=c.a.ErrorTypes.NETWORK_ERROR){switch(e.details){case c.a.ErrorDetails.MANIFEST_LOAD_ERROR:i=2101;break;case c.a.ErrorDetails.MANIFEST_LOAD_TIMEOUT:i=2102;break;case c.a.ErrorDetails.MANIFEST_PARSING_ERROR:i=2103;break;case c.a.ErrorDetails.LEVEL_EMPTY_ERROR:i=2111;break;case c.a.ErrorDetails.LEVEL_LOAD_ERROR:i=2112;break;case c.a.ErrorDetails.FRAG_LOAD_ERROR:i=2131;break;case c.a.ErrorDetails.FRAG_LOAD_TIMEOUT:i=2132;break;case c.a.ErrorDetails.KEY_LOAD_TIMEOUT:i=2142;break;default:this._hls.destroy(),i=2199}setTimeout((function(){t._retryNum>t._RETRY_NUMBER&&t._timeout({type:"NetworkError",code:i,details:e.details,fatal:e.fatal}),t._hls.startLoad(),t._retryNum++}),this._RETRY_TIME)}else if(e.type=c.a.ErrorTypes.MEDIA_ERROR){switch(e.details){case c.a.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR:i=2201;break;case c.a.ErrorDetails.FRAG_DECRYPT_ERROR:i=2211;break;case c.a.ErrorDetails.FRAG_PARSING_ERROR:i=2212;break;case c.a.ErrorDetails.BUFFER_APPEND_ERROR:i=2222;break;case c.a.ErrorDetails.BUFFER_STALLED_ERROR:i=2224;break;case c.a.ErrorDetails.BUFFER_NUDGE_ON_STALL:i=2227;break;default:this._hls.destroy(),i=2299}setTimeout((function(){t._retryNum>t._RETRY_NUMBER&&t._timeout({type:"PlayerError",code:i,details:e.details,fatal:e.fatal}),t._hls.recoverMediaError(),t._retryNum++}),this._RETRY_TIME)}}else switch(e.details){case c.a.ErrorDetails.LEVEL_LOAD_TIMEOUT:i=2113;break;case c.a.ErrorDetails.LEVEL_LOAD_ERROR:break;case c.a.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:i=2121;break;case c.a.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:i=2122;break;case c.a.ErrorDetails.FRAG_LOAD_ERROR:i=2131;break;case c.a.ErrorDetails.FRAG_LOAD_TIMEOUT:i=2132;break;case c.a.ErrorDetails.KEY_LOAD_ERROR:i=2141;break;case c.a.ErrorDetails.FRAG_PARSING_ERROR:i=2212;break;case c.a.ErrorDetails.BUFFER_ADD_CODEC_ERROR:i=2221;break;case c.a.ErrorDetails.BUFFER_APPEND_ERROR:i=2222;break;case c.a.ErrorDetails.BUFFER_APPENDING_ERROR:i=2223;break;case c.a.ErrorDetails.BUFFER_STALLED_ERROR:i=2224;break;case c.a.ErrorDetails.BUFFER_FULL_ERROR:i=2225;break;case c.a.ErrorDetails.BUFFER_SEEK_OVER_HOLE:i=2226;break;case c.a.ErrorDetails.BUFFER_NUDGE_ON_STALL:i=2227;break;case c.a.ErrorDetails.REMUX_ALLOC_ERROR:i=2401;break;case c.a.ErrorDetails.LEVEL_SWITCH_ERROR:i=2501;break;case c.a.ErrorDetails.INTERNAL_EXCEPTION:i=2502;break;default:this._hls.destroy(),i=2599}this._events.error=new CustomEvent("error",{detail:{type:e.type,code:i,details:e.details,fatal:e.fatal}}),this.dispatch("error")},t.prototype._getRequestSrc=function(e,t){var i=this;void 0===t&&(t=!1),h.a.get(e).then((function(e){i._parseResponseSrc(e)})).then((function(){t&&(i.srcchanged=!0)})).catch((function(e){}))},t.prototype._parseResponseSrc=function(e){if(e.match(/#EXT-X-STREAM-INF/)){if(this.isMasterPlaylist=!0,!c.a.isSupported()){this._bandwidthArray=[],this._qualityLevels=[];for(var t=this.settings.src.slice(0,this.settings.src.lastIndexOf("/")),i=e.split("#EXT-X-STREAM-INF:"),r=1;r<i.length;r++){for(var n=/([0-9A-Z\-]+)\=(\"([^\"]+)\"|([^\,]+))/g,s=void 0,a={},o={};s=n.exec(i[r].split(/\r\n|\r|\n/)[0]);){var l=s[1],u=s[3]||s[4];a[l]=u}o.attrs=a,-1!=i[r].split(/\r\n|\r|\n/)[1].indexOf("://")?o.url=i[r].split(/\r\n|\r|\n/)[1]:o.url=t+"/"+i[r].split(/\r\n|\r|\n/)[1],this._qualityLevels.push(o)}this._qualityLevels.sort((function(e,t){return e.attrs.BANDWIDTH-t.attrs.BANDWIDTH}));for(r=0;r<this._qualityLevels.length;r++)this._bandwidthArray.push(this._qualityLevels[r].attrs.BANDWIDTH)}}else this.isMasterPlaylist=!1,this._isAbr=!1,this._bandwidthArray=[],this._qualityLevels=[],(o={}).url=this.settings.src,this._qualityLevels.push(o);this._isParsedM3u8=!0},t.prototype.setQuality=function(e){var t=this,i=this.isPlaying;(-1===e?(this._isAbr=!0,c.a.isSupported()):this._isAbr=!1,c.a.isSupported())?(this._platform.isIE&&this.pause(),this._hls.currentLevel=e,this.currentLevel=e,i&&this.play()):(this.currentLevel=e,new Promise((function(e){e(t.getCurrentTime())})).then((function(i){t._currentTimeForSetQuality=i,-1===e?t.setNewSrc(t._currentSrc,!0):t.setNewSrc(t._qualityLevels[e].url,!0)})).then((function(){var e=function(){t.setCurrentTime(t._currentTimeForSetQuality),t._videoElement.removeEventListener("loadeddata",e)};t._videoElement.addEventListener("loadeddata",e)})));var r=function(){t.setPlaybackRate(t._playbackRate,!1),t._videoElement.removeEventListener("playing",r)};this._videoElement.addEventListener("playing",r),this.dispatch("level_switched")},t.prototype.setNewSrc=function(e,t){var i=this;void 0===t&&(t=!1);var r=!this._currentSrc;if(this.settings.src=e,this._currentSrc=e,r)this.init();else{c.a.isSupported()?this._setNewSrcForHlsSupported(e,t):this._setNewSrcForNotHlsSupported(e,t);var n=function(){i.setPlaybackRate(i._playbackRate,!1),i._videoElement.removeEventListener("playing",n)};this._videoElement.addEventListener("playing",n)}},t.prototype._setNewSrcForHlsSupported=function(e,i){var r=this;void 0===i&&(i=!1);var n=this.isPlaying,s=!1,a=!1,o=function(){r._videoElement.removeEventListener("loadedmetadata",o),(s=!0)&&a&&l()};this._videoElement.addEventListener("loadedmetadata",o),this._isSupportedHls=!0,this._hls.destroy(),"hls_config"in this.settings&&this.settings.hls_config?this._hls=new c.a(this.settings.hls_config):this._hls=new c.a(t.DEFAULT_HLS_CONFIG_SETTING),this._hls.attachMedia(this._videoElement),this._hls.on(c.a.Events.MEDIA_ATTACHED,(function(){console.log("this._hls.on("+c.a.Events.MEDIA_ATTACHED),r._hls.loadSource(r.settings.src),r._hls.on(c.a.Events.MANIFEST_PARSED,(function(){console.log("this._hls.on("+c.a.Events.MANIFEST_PARSED),a=!0,s&&a&&l()}))}));var l=function(){i||(r._isAbr=!0,r.currentLevel=-1,r._getRequestSrc(e,!0)),n?r.play():r.pause()};this._hls.on(c.a.Events.LEVEL_UPDATED,(function(e,t){r._duration=t.details.totalduration})),this._hls.on(c.a.Events.ERROR,(function(e,t){console.log("this._hls.on("+c.a.Events.ERROR),r._hlsErrorEventsHundler(t)}))},t.prototype._setNewSrcForNotHlsSupported=function(e,t){var i=this;void 0===t&&(t=!1);var r=this.isPlaying;this._videoElement.src="",this._videoElement.src=e,this._isAbr=!0,this._videoElement.load();var n=function(){i._videoElement.removeEventListener("loadedmetadata",n),i._getRequestSrc(e,!0),r?i.play():i.pause()};this._videoElement.addEventListener("loadedmetadata",n)},t.prototype.getQualityList=function(){var e={};return c.a.isSupported()?(e.levels=this._hls.levels,e.currentLevel=this._hls.currentLevel):(e.levels=this._qualityLevels,e.currentLevel=this.currentLevel),e.isABR=this._isAbr,e},t.prototype.destroy=function(){},t.prototype.getHlsInstance=function(){return this._hls?this._hls:null},t.prototype.getHlsConfig=function(){return this._hls?this._hls.config:null},t.prototype.setHlsConfig=function(e){var t=this;this._hls&&Object.keys(e).forEach((function(i){return t._hls.config[i]=e[i]}))},t.DEFAULT_HLS_CONFIG_SETTING={maxMaxBufferLength:30},t}(f),y=function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function r(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(r.prototype=i.prototype,new r)}}(),b=function(e){function t(t,i,r){return"captionoverlay"in r&&r.captionoverlay&&(r.captionoverlay=!1),e.call(this,t,i,r)||this}return y(t,e),t}(m),E=function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function r(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(r.prototype=i.prototype,new r)}}(),T=function(e){function t(t){var i=e.call(this,t)||this;return i._isDispachParsedPD=!1,i}return E(t,e),t.prototype.init=function(){"src"in this.settings&&this.settings.src&&(this._currentSrc=this.settings.src,this._getRequestSrc(this.settings.src),this._initEvent(),this._tick())},t.prototype._initEvent=function(){e.prototype._initEvent.call(this),this._platform.isIE?this._SubTitle=new b(this,null,this.settings):this._SubTitle=new m(this,null,this.settings)},t.prototype._tick=function(){e.prototype._tick.call(this),this.isReady&&!this._isDispachParsedPD&&(this._isDispachParsedPD=!0,this.dispatch("parsed_pd"))},t.prototype._getRequestSrc=function(e,t){void 0===t&&(t=!1),this._isAbr=!1,this._bandwidthArray=[],this._qualityLevels=[];var i={};i.url=this.settings.src,this._qualityLevels.push(i);for(var r=this._videoElement.getElementsByTagName("source"),n=r.length,s=0;s<n;s++)this._videoElement.removeChild(r[0]);var a=document.createElement("source");a.src=this.settings.src,this._videoElement.appendChild(a),t&&(this.srcchanged=!0)},t.prototype.setNewSrc=function(e,t){var i=this;void 0===t&&(t=!1);var r=!this._currentSrc;this.settings.src=e,this._currentSrc=e,r&&this.init();var n=this.isPlaying;if(this._videoElement.src=e,this._videoElement.load(),!t){this.settings.src=e,this._isAbr=!0,this._currentSrc=e;var s=function(){i._videoElement.removeEventListener("loadedmetadata",s),i._getRequestSrc(e,!0)};this._videoElement.addEventListener("loadedmetadata",s)}var a=function(){i.setPlaybackRate(i._playbackRate,!1),i._videoElement.removeEventListener("playing",a)};this._videoElement.addEventListener("playing",a),n?this.play():this.pause()},t.prototype.destroy=function(){},t}(f),S=function(){function e(e){if(this._isVod=!1,this._isLive=!1,this._isDvr=!1,this._isPD=!1,this._stockEventHundlers=[],this._settings=e,this._targetElement=document.getElementById(this._settings.target),this._targetElement.classList.add("target"),this._settings.baseID=this.createRandomID(),null==document.getElementById("jsp-content")){var t=document.createElement("div");t.setAttribute("id","jsp-content_"+this._settings.baseID),t.classList.add("jsp-content"),this._targetElement.appendChild(t)}this.initialize()}return e.prototype.createRandomID=function(){var e="-"+Math.random();if(null==document.getElementById("jsp"+e))return e;this.createRandomID()},e.prototype.setSettings=function(e){this._settings=e},e.prototype.initialize=function(){"isPD"in this._settings&&this._settings.isPD?this._videoWrapper=new T(this._settings):this._videoWrapper=new _(this._settings),this._options="options"in this._settings?this._settings.options:null,"vod"===this._settings.mode?this._isVod=!0:"live"===this._settings.mode?this._isLive=!0:"dvr"===this._settings.mode&&(this._isDvr=!0),this._videoWrapper.init(),this._controller=new u(this._settings,this._videoWrapper),this._isStockEventHundlers&&this._addStockEventHundlers()},e.prototype.getTagSettings=function(){return this._settings},e.prototype.getIsVod=function(){return this._isVod},e.prototype.getIsLive=function(){return this._isLive},e.prototype.getIsDvr=function(){return this._isDvr},e.prototype.play=function(){this._videoWrapper.isPlaying||this._videoWrapper.play()},e.prototype.pause=function(){this._videoWrapper.isPause||this._videoWrapper.pause()},e.prototype.setCurrentTime=function(e){e<0||(e>=this._videoWrapper.getDuration()?this._videoWrapper.setCurrentTime(this._videoWrapper.getDuration()-1):this._videoWrapper.setCurrentTime(e))},e.prototype.setQuality=function(e){this._videoWrapper.setQuality(e)},e.prototype.setVolume=function(e){e<0||100<e||this._videoWrapper.setVolume(e)},e.prototype.setMuted=function(e){this._videoWrapper.setMuted(e)},e.prototype.setPlaybackRate=function(e){this._videoWrapper.setPlaybackRate(e)},e.prototype.setUseSubtitle=function(e){},e.prototype.setSubtitle=function(e){this._videoWrapper.setSubtitle(e)},e.prototype.setNewSrc=function(e){this._videoWrapper.setNewSrc(e)},e.prototype.setPoster=function(e){this._controller.setPoster(e)},e.prototype.setControlVisibility=function(e){this._videoWrapper.setControlVisibility(e)},e.prototype.setControlAuto=function(e){this._videoWrapper.setControlAuto(e)},e.prototype.getVideoElement=function(){return this._videoWrapper.getVideoElement()},e.prototype.getTargetElement=function(){return this._targetElement},e.prototype.getPlaybackStatus=function(){return this._videoWrapper.getPlaybackStatus()},e.prototype.getDuration=function(){return this._videoWrapper.getDuration()},e.prototype.getCurrentTime=function(){return this._videoWrapper.getCurrentTime()},e.prototype.getQualityList=function(){return this._videoWrapper.getQualityList()},e.prototype.getVolume=function(){return this._videoWrapper.getVolume()},e.prototype.isMuted=function(){return this._videoWrapper.isMuted()},e.prototype.getPlaybackRate=function(){return this._videoWrapper.getPlaybackRate()},e.prototype.getUseSubtitle=function(){return this._videoWrapper.getUseSubtitle()},e.prototype.getSubtitleList=function(){return this._videoWrapper.getSubtitleList()},e.prototype.getCurrentSubtitle=function(){return this._videoWrapper.getCurrentSubtitle()},e.prototype.getSubtitleCueList=function(){return this._videoWrapper.getSubtitleCueList()},e.prototype.getSubtitleActiveCueList=function(){return this._videoWrapper.getSubtitleActiveCueList()},e.prototype.isFullscreen=function(){return this._videoWrapper.isFullscreen()},e.prototype.getCurrentSrc=function(){return this._videoWrapper.getCurrentSrc()},e.prototype.preload=function(e){this._videoWrapper.preload(e)},e.prototype.getHlsInstance=function(){return this._videoWrapper.getHlsInstance()},e.prototype.getHlsConfig=function(){return this._videoWrapper.getHlsConfig()},e.prototype.setHlsConfig=function(e){this._videoWrapper.setHlsConfig(e)},e.prototype.destroy=function(){for(this._videoWrapper.pause(),this._videoWrapper=null;0!=this._targetElement.childElementCount;)this._targetElement.removeChild(this._targetElement.children[0]);this._controller=null},e.prototype.on=function(e,t){if(null==this._videoWrapper){var i={};i.type=e,i.hundler=t,this._stockEventHundlers.push(i),this._isStockEventHundlers=!0}else this._videoWrapper.on(e,t)},e.prototype._addStockEventHundlers=function(){for(var e in this._stockEventHundlers)this._videoWrapper.on(this._stockEventHundlers[e].type,this._stockEventHundlers[e].hundler)},e}();t.default=S},,function(e,t,i){var r=i(7),n=i(19);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var s={insert:"head",singleton:!1};r(n,s);e.exports=n.locals||{}},function(e,t,i){(t=i(8)(!1)).push([e.i,'.jsp-content {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  background-color: rgb(0, 0, 0);\n  font-family: "Helvetica Neue", "Helvetica", "Hiragino Sans", "Hiragino Kaku Gothic ProN", "Arial", "Yu Gothic", "Meiryo", sans-serif;\n  font-weight: bold;\n  overflow: hidden;\n}\n.fullscreen  {\n  width: 100% !important;\n  height: 100% !important;\n}\n.fullscreen .jsp-content {\n  height: 100%;\n}\n.pc.jsp-control-visible .controller {\n  visibility: visible;\n}\n.pc.jsp-control-hidden .controller {\n  visibility: hidden;\n}\n.mobile.jsp-control-visible .controller {\n  visibility: visible;\n}\n.mobile.jsp-control-hidden .controller {\n  visibility: hidden;\n}\n.jsp-control-manual.jsp-control-visible .jsp-animation-circle {\n  visibility: visible;\n}\n.jsp-control-manual.jsp-control-hidden .jsp-animation-circle {\n  visibility: hidden;\n}\n/* .pc.playing .jsp-content > .controller{\n  visibility: hidden;\n  transition: visibility 0.5s;\n}\n.pc.jsp-control-visible.playing .controller {\n  visibility: visible;\n} */\n.first .jsp-video-cover {\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  position: absolute;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  -webkit-background-size: contain;\n  background-color: rgb(0, 0, 0);\n  cursor: pointer;\n}\n.jsp-video-cover {\n  cursor: pointer;\n}\n.jsp-video-element {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  cursor: pointer;\n  height: 100%;\n}\n.fullscreen .jsp-video-element {\n  width: 100%;\n  height: 100%;\n}\n.jsp-ad-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n}\n.adPlaying .jsp-ad-container {\n  display: block;\n}\n.adPaused .jsp-ad-container {\n  display: none;\n}\n\n/* 中央ボタン群 */\n.paused .jsp-big-play-button {\n  background-size: 100%;\n  left: 50%;\n  background: transparent;\n}\n.paused .jsp-play-svg {\n  vertical-align: middle;\n  display: block;\n  fill: #F8F8F8;\n}\n.paused .jsp-pause-svg {\n  display: none;\n}\n.playing .jsp-big-play-button {\n  background-size: 100%;\n  left: 50%;\n  background: transparent;\n}\n.playing .jsp-play-svg {\n  display: none;\n}\n.playing .jsp-pause-svg {\n  vertical-align: middle;\n  display: block;\n  fill: #F8F8F8;\n}\n.jsp-big-play-button:hover {\n  opacity: 0.6;\n}\n.jsp-waiting-ready .jsp-big-play-button {\n  display: none;\n}\n.jsp-fast-seek-back-button {\n  background-size: 100%;\n  left: 30%;\n  background: transparent;\n}\n.jsp-fast-seek-back-button:hover .jsp-fast-rewind-svg{\n  opacity: 0.6;\n}\n.jsp-fast-rewind-svg {\n  fill: #F8F8F8;\n  vertical-align: middle;\n}\n.jsp-fast-seek-forword-button {\n  background-size: 100%;\n  left: 70%;\n  background: transparent;\n}\n.jsp-fast-seek-forword-button:hover .jsp-fast-forward-svg{\n  opacity: 0.6;\n}\n.jsp-fast-forward-svg {\n  fill: #F8F8F8;\n  vertical-align: middle;\n  height: 100%;\n}\n.jsp-big-play-button,\n.jsp-fast-seek-back-button,\n.jsp-fast-seek-forword-button {\n  cursor: pointer;\n  position: absolute;\n  top: 50%;\n  border: none;\n  outline: none;\n  padding: 0;\n  -webkit-tap-highlight-color:rgba(0,0,0,0);\n}\n.jsp-button-ring{\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  background-color: #F8F8F8;\n  border-radius: 100%;\n  visibility: hidden;\n}\n\n/* .jsp-fast-seek-back-button::before,\n.jsp-fast-seek-forword-button::before {\n  content: attr(data-content);\n  position: absolute;\n  width: 100%;\n  font-size: 0.6em;\n  color: #F8F8F8;\n  bottom: 3em;\n}\n_:-ms-lang(x)::-ms-backdrop,\n.jsp-fast-seek-back-button::before,\n.jsp-fast-seek-forword-button::before {\n  margin-top: 0;\n} */\n.jsp-fast-seek-back-text,\n.jsp-fast-seek-forword-text {\n  visibility: hidden;\n}\n.jsp-back-skipping .jsp-fast-seek-back-text,\n.jsp-forword-skipping .jsp-fast-seek-forword-text {\n  position: relative;\n  color: #F8F8F8;\n  bottom: 4em;\n  left: 0.5em;\n  visibility: visible;\n}\n\n.jsp-video-element:hover ~ .jsp-big-play-button,\n.jsp-video-cover:hover ~ .jsp-big-play-button {\n  opacity: 0.6;\n}\n.jsp-animation-circle {\n  position: absolute;\n}\n\n.loading .jsp-animation-circle{\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n}\n/* .loading .jsp-spinner {\n  color: F8F8F8;\n  font-size: 2em;\n  margin: auto;\n  width: 1em;\n  height: 1em;\n  border-radius: 50%;\n  position: absolute;\n  text-indent: -9999em;\n  -webkit-animation: spinner 1.3s infinite linear;\n  animation: spinner 1.3s infinite linear;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  visibility: visible;\n  border: none;\n} */\n.loading .controller {\n  visibility: hidden !important;\n}\n.small .jsp-big-play-button {\n  width: 1.2em;\n  height: 1.2em;\n  font-size: 1.8em;\n  margin-left: -0.6em;\n  margin-top: -0.6em;\n}\n.small .jsp-fast-seek-back-button,\n.small .jsp-fast-seek-forword-button {\n  width: 1.2em;\n  height: 1.2em;\n  font-size: 1.6em;\n  margin-left: -0.6em;\n  margin-top: -0.6em;\n}\n.small.loading .jsp-animation-circle {\n  width: 3em;\n  height: 3em;\n}\n/* .small.loading .jsp-spinner {\n  font-size: 0.8em;\n} */\n.small .jsp-fast-seek-back-text,\n.small .jsp-fast-seek-forword-text {\n  font-size: 0.6em;\n  margin-left: -1.1em;\n}\n.medium .jsp-big-play-button {\n  width: 1.4em;\n  height: 1.4em;\n  font-size: 2.4em;\n  margin-left: -0.7em;\n  margin-top: -0.7em;\n}\n.medium .jsp-fast-seek-back-button,\n.medium .jsp-fast-seek-forword-button {\n  width: 1.4em;\n  height: 1.4em;\n  font-size: 1.8em;\n  margin-left: -0.7em;\n  margin-top: -0.7em;\n}\n.medium .jsp-fast-seek-back-text,\n.medium .jsp-fast-seek-forword-text {\n  font-size: 0.8em;\n  margin-left: -1.1em;\n}\n.medium.loading .jsp-animation-circle {\n  width: 7em;\n  height: 7em;\n}\n/* .medium.loading .jsp-spinner {\n  font-size: 1.0em;\n} */\n.large .jsp-big-play-button {\n  width: 1.8em;\n  height: 1.8em;\n  font-size: 2.6em;\n  margin-left: -0.9em;\n  margin-top: -0.9em;\n}\n.large .jsp-fast-seek-back-button,\n.large .jsp-fast-seek-forword-button {\n  width: 1.8em;\n  height: 1.8em;\n  font-size: 2.0em;\n  margin-left: -0.9em;\n  margin-top: -0.9em;\n}\n.large .jsp-fast-seek-back-text,\n.large .jsp-fast-seek-forword-text {\n  font-size: 0.8em;\n  margin-left: -1.0em;\n}\n.large.loading .jsp-animation-circle {\n  width: 10em;\n  height: 10em;\n}\n/* .large.loading .jsp-spinner {\n  font-size: 1.6em;\n} */\n.x-large .jsp-big-play-button {\n  width: 2.0em;\n  height: 2.0em;\n  font-size: 4.0em;\n  margin-left: -1.0em;\n  margin-top: -1.0em;\n}\n.x-large .jsp-fast-seek-back-button,\n.x-large .jsp-fast-seek-forword-button {\n  width: 2.0em;\n  height: 2.0em;\n  font-size: 3.0em;\n  margin-left: -1.0em;\n  margin-top: -1.0em;\n}\n.x-large .jsp-fast-seek-back-text,\n.x-large .jsp-fast-seek-forword-text {\n  font-size: 1.2em;\n  margin-left: -1.0em;\n}\n.x-large.loading .jsp-animation-circle {\n  width: 20em;\n  height: 20em;\n}\n/* .x-large.loading .jsp-spinner {\n  font-size: 1.8em;\n} */\n.live-mode .jsp-fast-seek-back-button,\n.live-mode .jsp-fast-seek-forword-button {\n  display: none;\n}\n\n/* コントロールバー */\n\n.jsp-bottom {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  height: 62px;\n  box-sizing: content-box;\n}\n\n.jsp-control-base {\n  display: flex;\n  -webkit-justify-content: space-between;\n  justify-content: space-between;\n  height: 50px;\n  background-color: rgba(0, 0, 0, 0.3);\n  margin: 0 12px;\n  border-radius: 4px;\n}\n.jsp-left-controls,\n.jsp-right-controls {\n  display: flex;\n}\n.jsp-left-controls {\n  -webkit-justify-content: flex-start;\n  justify-content: flex-start;\n  width: 80%;\n}\n.jsp-right-controls {\n  -webkit-justify-content: flex-end;\n  justify-content: flex-end;\n  width: 20%;\n}\n.jsp-seek-base {\n  height: 20px;\n  cursor: pointer;\n  bottom: 0px;\n  margin: -8px 12px 0 12px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.jsp-play-control {\n  cursor: pointer;\n  /* font-size: 1.1em; */\n  width: 2em;\n  height: 100%;\n  border: none;\n  outline: none;\n  text-align: center;\n  flex: none;\n  margin: 0 0.4rem;\n  background: transparent;\n  padding: 0;\n}\n.playing .jsp-play-control {\n}\n\n.jsp-fullscreen-button {\n  cursor: pointer;\n  /* font-size: 1.1em; */\n  text-align: center;\n  width: 2em;\n  height: 100%;\n  border: none;\n  outline: none;\n  flex: none;\n  margin: 0 0.4rem;\n  background: transparent;\n  padding: 0;\n}\n.jsp-fullscreen-svg {\n  display: block;\n  fill: #F8F8F8;\n}\n.jsp-fullscreen-exit-svg {\n  display: none;\n}\n.fullscreen .jsp-fullscreen-button {\n}\n.fullscreen .jsp-fullscreen-svg {\n  display: none;\n\n}\n.fullscreen .jsp-fullscreen-exit-svg {\n  display: block;\n  fill: #F8F8F8;\n}\n.first .jsp-fast-seek-back-button,\n.first .jsp-fast-seek-forword-button,\n.first .jsp-bottom, \n.first .jsp-control-base{\n  visibility: hidden !important;\n}\n.jsp-remaining-time {\n  font-size: 12px;\n  text-align: center;\n  height: 16px;\n  border: none;\n  outline: none;\n  flex: none;\n  color: #F8F8F8;\n  margin: 0 0.6rem;\n  margin-top: 16px;\n}\n\n.jsp-seek-rail {\n  bottom: 10px;\n  width: 100%;\n  height: 4px;\n  background-color: #F8F8F8;\n  opacity: 0.5;\n  margin-top: 5px;\n}\n.jsp-seek-inner-rail {\n  bottom: 11px;\n  height: 4px;\n  background-color: #3EEF00;\n  position: absolute;\n  left: 12px;\n}\n\n.jsp-seek-base .jsp-seek-thumb {\n  /* display: none; */\n  visibility: hidden;\n}\n.pc .jsp-seek-base:hover .jsp-seek-thumb {\n  margin-top: 0.1em;\n  width: 0.6em;\n  height: 0.6em;\n  background-color: #3EEF00;\n  position: absolute;\n  left: 8px;\n  visibility: visible;\n}\n\n.jsp-seek-base .jsp-mouse-display {\n  display: none;\n}\n.pc .jsp-seek-base:hover .jsp-mouse-display {\n  text-align: center;\n  font-size: 0.8em;\n  width: 5em;\n  height: 1.5em;\n  background-color: #F8F8F8;\n  position: absolute;\n  overflow: hidden;\n  display: block;\n  margin-top: -1.5em;\n  color: #000000;\n  line-height: 1.5em;\n  left: 12px;\n}\n.mobile.seeking .jsp-seek-base .jsp-mouse-display {\n  text-align: center;\n  font-size: 0.8em;\n  width: 5em;\n  height: 1.5em;\n  background-color: #F8F8F8;\n  position: absolute;\n  overflow: hidden;\n  display: block;\n  margin-top: -1.5em;\n  color: #000000;\n  line-height: 1.5em;\n  left: 12px;\n}\n.live-mode .jsp-seek-base,\n.live-mode .jsp-seek-rail,\n.live-mode .jsp-seek-inner-rail,\n.live-mode .jsp-seek-thumb,\n.live-mode .jsp-seek-base:hover .jsp-mouse-display,\n.live-mode .jsp-remaining-time {\n  visibility: hidden;\n  pointer-events: none;\n}\n.dvr-mode .jsp-remaining-time {\n  visibility: hidden;\n}\n\n.jsp-volume-wrapper {\n  display: flex;\n  margin: 0 0.6rem 0 0.4rem;\n}\n\n.jsp-volume-wrapper:hover{\n  transform: scale(1);\n}\n\n.jsp-volume-button {\n  cursor: pointer;\n  /* font-size: 1.1em; */\n  text-align: center;\n  width: 2em;\n  height: 100%;\n  border: none;\n  outline: none;\n  flex: none;\n  margin: 0 0.4rem 0 0;\n  position: relative;\n  background: transparent;\n  padding: 0;\n}\n.jsp-volume-up-svg {\n  display: block;\n  fill: #F8F8F8;\n}\n.jsp-volume-off-svg {\n  display: none;\n}\n.mute .jsp-volume-button {\n}\n.mute .jsp-volume-up-svg {\n  display: none;\n}\n.mute .jsp-volume-off-svg {\n  display: block;\n  fill: #F8F8F8;\n}\n.pc .jsp-volume-base {\n  width: 0em;\n  /* height: 2em; */\n  height: 100%;\n  position: relative;\n  cursor: pointer;\n  transform: scale(0, 1);\n  transform-origin: left;\n  transition-duration: 0.3s;\n}\n.pc .jsp-volume-base .jsp-volume-rail {\n  width: 100%;\n  height: 8px;\n  background-color: #F8F8F8;\n  opacity: 0.5;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n}\n.pc .jsp-volume-base .jsp-volume-inner-rail {\n  height: 8px;\n  background-color: #3EEF00;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n}\n.pc .jsp-volume-base .jsp-volume-thumb {\n  width: 6px;\n  height: 18px;\n  background-color: #f8f8f8;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  left: -0.2rem;\n}\n.pc .jsp-volume-wrapper:hover .jsp-volume-base {\n  /* width: 8em; */\n  display: block;\n  transform: scale(1);\n  -webkit-transform: scale(1);\n  width: 5em;\n  top: 0;\n  bottom: 0;\n  /* margin: auto; */\n}\n.pc .jsp-volume-wrapper:hover .jsp-volume-thumb {\n  display: block;\n}\n.pc.small .jsp-volume-wrapper:hover .jsp-volume-base {\n  display: none;\n}\n.pc.small .jsp-volume-wrapper:hover .jsp-volume-thumb {\n  display: none;\n}\n\n/* 設定ボタン */\n.jsp-settings-button {\n  cursor: pointer;\n  /* font-size: 1.1em; */\n  text-align: center;\n  width: 2em;\n  height: 100%;\n  border: none;\n  outline: none;\n  flex: none;\n  /* margin: 0 0.4 0 -0.5rem; */\n  margin-top: 0;\n  margin-bottom: 0;\n  margin-left: -0.5rem;\n  margin-right: 0.4rem;\n  background: transparent;\n  line-height: 0;\n  padding: 0;\n}\n.jsp-settings-svg {\n  fill: #F8F8F8;\n}\n.jsp-arrow-forward-svg,\n.jsp-arrow-back-svg {\n  fill: #F8F8F8;\n  vertical-align: middle;\n  height:100%;\n  width: 1rem;\n}\n.jsp-settings-base,\n.jsp-resolution-base,\n.jsp-subtitle-base,\n.jsp-speed-base {\n  background-color: rgba(0, 0, 0, 0.8);\n  position: absolute;\n  display: none;\n  cursor: pointer;\n  font-weight: 500;\n  line-height: 2rem;\n  width: 220px;\n  height: auto;\n  padding: 13px 10px 11px 12px;\n  bottom: 64px;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  right:12px;\n}\n.settings-shown .jsp-settings-base,\n.resolution-shown .jsp-resolution-base,\n.subtitle-shown .jsp-subtitle-base,\n.speed-shown .jsp-speed-base {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.jsp-settings-box {\n  display: flex;\n  justify-content: flex-end;\n}\n.jsp-settings-box-name {\n  margin:0 0.5rem;\n  /* line-height: 2rem; */\n  width: 100%;\n}\n.jsp-speed-value {\n\tline-height: 2rem;\n\twidth: 100px;\n\ttext-align: right;\n}\n.jsp-resolution-value {\n\tline-height: 2rem;\n\twidth: 100px;\n\ttext-align: right;\n}\n.jsp-settings-return {\n  color:  #F8F8F8;\n  display: flex;\n  justify-content: flex-start;\n  border-bottom: thin solid #F8F8F8;\n  min-height: 2rem;\n  max-height: 2rem;\n}\n.jsp-arrow-forward-box,\n.jsp-arrow-back-box {\n  width: 1rem;\n  line-height: 1.8rem;\n  display: inline-flex;\n  display: -webkit-inline-flex;\n  display: -ms-inline-flexbox;\n}\n.settings-shown.resolution-shown .jsp-settings-base,\n.settings-shown.subtitle-shown .jsp-settings-base,\n.settings-shown.speed-shown .jsp-settings-base {\n  display: none;\n}\n.jsp-resolution-box,\n.jsp-subtitle-box,\n.jsp-speed-box,\n.jsp-resolution-return,\n.jsp-subtitle-return,\n.jsp-speed-return {\n  color: #F8F8F8;\n  width: 100%;\n  height: 2rem;\n  display: flex;\n  justify-content: space-between;\n}\n.jsp-resolution-label, \n.jsp-subtitle-label,\n.jsp-speed-label {\n  /* width: 100%;\n  text-align: center; */\n}\n.jsp-resolution-box:hover, \n.jsp-subtitle-box:hover,\n.jsp-speed-box:hover,\n.jsp-settings-item:hover {\n  background-color: rgba(112, 114, 116, .7);\n}\n.jsp-settings-item {\n  display: flex;\n  justify-content: flex-start;\n  color: #F8F8F8;\n  width: 100%;\n  min-height: 2rem;\n  max-height: 2rem;\n}\n.jsp-settings-check-box {\n  width: 1rem;\n  line-height: 2rem;\n  padding-top: 0.5rem;\n}\n.jsp-check-svg {\n  display: none;\n  fill: #F8F8F8;\n}\n.jsp-check .jsp-check-svg{\n  display: block;\n}\n.jsp-settings-item-value {\n  margin: 0 0.5rem;\n  line-height: 2rem;\n}\n\n.jsp-timeout .jsp-error-cover{\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  color: rgb(255,255,255);\n  background-color: #000000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* .mobile.playing .controller {\n  visibility: hidden !important;\n}\n.mobile.user-active.playing .controller {\n  visibility: visible !important;;\n}\n\n/* @keyframes spinner {\n\t0%,\n\t100% {\n\t\tbox-shadow: 0 -3em 0 0.2em, 2em -2em 0 0em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em,\n\t\t\t-3em 0 0 -1em, -2em -2em 0 0;\n\t}\n\t12.5% {\n\t\tbox-shadow: 0 -3em 0 0, 2em -2em 0 0.2em, 3em 0 0 0, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em,\n\t\t\t-3em 0 0 -1em, -2em -2em 0 -1em;\n\t}\n\t25% {\n\t\tbox-shadow: 0 -3em 0 -0.5em, 2em -2em 0 0, 3em 0 0 0.2em, 2em 2em 0 0, 0 3em 0 -1em, -2em 2em 0 -1em,\n\t\t\t-3em 0 0 -1em, -2em -2em 0 -1em;\n\t}\n\t37.5% {\n\t\tbox-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 0, 2em 2em 0 0.2em, 0 3em 0 0em, -2em 2em 0 -1em,\n\t\t\t-3em 0em 0 -1em, -2em -2em 0 -1em;\n\t}\n\t50% {\n\t\tbox-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 0em, 0 3em 0 0.2em, -2em 2em 0 0,\n\t\t\t-3em 0em 0 -1em, -2em -2em 0 -1em;\n\t}\n\t62.5% {\n\t\tbox-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 0, -2em 2em 0 0.2em,\n\t\t\t-3em 0 0 0, -2em -2em 0 -1em;\n\t}\n\t75% {\n\t\tbox-shadow: 0em -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0,\n\t\t\t-3em 0em 0 0.2em, -2em -2em 0 0;\n\t}\n\t87.5% {\n\t\tbox-shadow: 0em -3em 0 0, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0,\n\t\t\t-3em 0em 0 0, -2em -2em 0 0.2em;\n\t}\n} */\n\n.jsp-animation-circle .jsp-animation-circle-child {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n.jsp-animation-circle .jsp-animation-circle-child:before {\n  content: \'\';\n  display: block;\n  margin: 0 auto;\n  width: 15%;\n  height: 15%;\n  background-color: #F8F8F8;\n  border-radius: 100%;\n  -webkit-animation: jsp-animation-circleBounceDelay 1.2s infinite ease-in-out both;\n          animation: jsp-animation-circleBounceDelay 1.2s infinite ease-in-out both;\n}\n.jsp-animation-circle .jsp-animation-circle2 {\n  -webkit-transform: rotate(30deg);\n      -ms-transform: rotate(30deg);\n          transform: rotate(30deg); }\n.jsp-animation-circle .jsp-animation-circle3 {\n  -webkit-transform: rotate(60deg);\n      -ms-transform: rotate(60deg);\n          transform: rotate(60deg); }\n.jsp-animation-circle .jsp-animation-circle4 {\n  -webkit-transform: rotate(90deg);\n      -ms-transform: rotate(90deg);\n          transform: rotate(90deg); }\n.jsp-animation-circle .jsp-animation-circle5 {\n  -webkit-transform: rotate(120deg);\n      -ms-transform: rotate(120deg);\n          transform: rotate(120deg); }\n.jsp-animation-circle .jsp-animation-circle6 {\n  -webkit-transform: rotate(150deg);\n      -ms-transform: rotate(150deg);\n          transform: rotate(150deg); }\n.jsp-animation-circle .jsp-animation-circle7 {\n  -webkit-transform: rotate(180deg);\n      -ms-transform: rotate(180deg);\n          transform: rotate(180deg); }\n.jsp-animation-circle .jsp-animation-circle8 {\n  -webkit-transform: rotate(210deg);\n      -ms-transform: rotate(210deg);\n          transform: rotate(210deg); }\n.jsp-animation-circle .jsp-animation-circle9 {\n  -webkit-transform: rotate(240deg);\n      -ms-transform: rotate(240deg);\n          transform: rotate(240deg); }\n.jsp-animation-circle .jsp-animation-circle10 {\n  -webkit-transform: rotate(270deg);\n      -ms-transform: rotate(270deg);\n          transform: rotate(270deg); }\n.jsp-animation-circle .jsp-animation-circle11 {\n  -webkit-transform: rotate(300deg);\n      -ms-transform: rotate(300deg);\n          transform: rotate(300deg); }\n.jsp-animation-circle .jsp-animation-circle12 {\n  -webkit-transform: rotate(330deg);\n      -ms-transform: rotate(330deg);\n          transform: rotate(330deg); }\n.jsp-animation-circle .jsp-animation-circle2:before {\n  -webkit-animation-delay: -1.1s;\n          animation-delay: -1.1s; }\n.jsp-animation-circle .jsp-animation-circle3:before {\n  -webkit-animation-delay: -1s;\n          animation-delay: -1s; }\n.jsp-animation-circle .jsp-animation-circle4:before {\n  -webkit-animation-delay: -0.9s;\n          animation-delay: -0.9s; }\n.jsp-animation-circle .jsp-animation-circle5:before {\n  -webkit-animation-delay: -0.8s;\n          animation-delay: -0.8s; }\n.jsp-animation-circle .jsp-animation-circle6:before {\n  -webkit-animation-delay: -0.7s;\n          animation-delay: -0.7s; }\n.jsp-animation-circle .jsp-animation-circle7:before {\n  -webkit-animation-delay: -0.6s;\n          animation-delay: -0.6s; }\n.jsp-animation-circle .jsp-animation-circle8:before {\n  -webkit-animation-delay: -0.5s;\n          animation-delay: -0.5s; }\n.jsp-animation-circle .jsp-animation-circle9:before {\n  -webkit-animation-delay: -0.4s;\n          animation-delay: -0.4s; }\n.jsp-animation-circle .jsp-animation-circle10:before {\n  -webkit-animation-delay: -0.3s;\n          animation-delay: -0.3s; }\n.jsp-animation-circle .jsp-animation-circle11:before {\n  -webkit-animation-delay: -0.2s;\n          animation-delay: -0.2s; }\n.jsp-animation-circle .jsp-animation-circle12:before {\n  -webkit-animation-delay: -0.1s;\n          animation-delay: -0.1s; }\n\n@-webkit-keyframes jsp-animation-circleBounceDelay {\n  0%, 80%, 100% {\n    -webkit-transform: scale(0);\n            transform: scale(0);\n  } 40% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n}\n\n@keyframes jsp-animation-circleBounceDelay {\n  0%, 80%, 100% {\n    -webkit-transform: scale(0);\n            transform: scale(0);\n  } 40% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  \n}\n\n.jsp-animation-ring{\n  -webkit-animation: jsp-circleBounceDelay 0.3s  ease-in-out both;\n  animation: jsp-circleBounceDelay 0.3s  ease-in-out both;\n  visibility: visible;\n}\n\n@-webkit-keyframes jsp-circleBounceDelay {\n  0%{\n    -webkit-transform: scale(0.25);\n            transform: scale(0.25);\n    opacity:0.3;\n  } \n  100% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity:0;\n  }\n}\n\n@keyframes jsp-circleBounceDelay {\n  0%{\n    -webkit-transform: scale(0.25);\n            transform: scale(0.25);\n    opacity:0.3;\n  } \n  100% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity:0;\n  }\n}\n',""]),e.exports=t},function(e,t,i){var r=i(7),n=i(21);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var s={insert:"head",singleton:!1};r(n,s);e.exports=n.locals||{}},function(e,t,i){(t=i(8)(!1)).push([e.i,".jsp-seekbar-thumbnail-box {\n  display: none;\n  position: absolute;\n  background-color:#FFFFFF;\n  padding: 1px;\n  left: 12px;\n}\n\n.pc .jsp-seek-base:hover .jsp-seekbar-thumbnail-box {\n  display: block;\n  \n}\n\n.mobile.seeking .jsp-seek-base .jsp-seekbar-thumbnail-box {\n  display: block;\n}\n\n.jsp-seekbar-thumbnail-image {\n  width: 100%;\n  height: 100%;\n}",""]),e.exports=t},function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var i,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(i=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=i.preventDefault,i.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},i};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},function(e,t,i){(t=i(8)(!1)).push([e.i,".jsp-subtitle-value{\n\tline-height: 2rem;\n\twidth: 100px;\n\ttext-align: right;\n}\n.jsp-subtitle-value.wordwrap{\n\tline-height: 1rem;\n\tword-break: break-all;\n}\n.jsp-subtitle-item-value{\n\tline-height: 2rem;\n\twidth: 172px;\n}\n.jsp-subtitle-item-value.wordwrap{\n\tline-height: 1rem;\n\tword-break: break-all;\n}\n.overlay-caption_area {\n\twidth: 100%;\n\tposition: absolute;\n\ttouch-action: none;\n\ttext-align: center;\n\t/*bottom: 70px;*/\n\t/*z-index: 3;*/\n\ttransform: translate3d(0, 0, 0);\n}\n\n.overlay-caption_text {\n\tbackground: rgba(8, 8, 8, 0.75);\n\tborder-radius: 2.66667px;\n\tfont-size: 15px;\n\tcolor: rgb(255, 255, 255);\n\tfill: rgb(255, 255, 255);\n}\n\n.jsp-control-visible .overlay-caption_area {\n\tbottom: 70px;\n}\n\n.jsp-control-hidden .overlay-caption_area {\n\tbottom: 10px;\n}\n\n.overlay-caption_area-visible {\n\tvisibility: visible;\n}\n\n.overlay-caption_area-hidden {\n\tvisibility: hidden;\n}\n\nvideo.video_cue_hidden::cue {\n\tvisibility: hidden;\n}\n\nvideo.video_cue_hidden::-webkit-media-text-track-display-backdrop {\n\tbackground-color: rgba(0, 0, 0, 0) !important;\n}\n\nvideo.video_cue_hidden::-webkit-media-text-track-display {\n\tvisibility: hidden;\n}\n\nvideo.video_cue_hidden::-webkit-media-text-track-container {\n\tvisibility: hidden;\n}\n",""]),e.exports=t}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,